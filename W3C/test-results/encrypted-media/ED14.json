{
  "results": [
    {
      "test": "/encrypted-media/clearkey-check-initdata-type.html",
      "subtests": [
        {
          "name": "org.w3.clearkey support for \"webm\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey support for \"cenc\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey support for \"keyids\".",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-events-session-closed-event.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test MediaKeySession closed event.",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-events.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-generate-request-disallowed-input.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-invalid-license.html",
      "subtests": [
        {
          "name": "Update with invalid Clear Key license",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-keystatuses-multiple-sessions.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-keystatuses.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-license, mp4, playback, destroy and acknowledge",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-persistent-license-events.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-license, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-persistent-license.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-license, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-persistent-usage-record-events.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-usage-record, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-persistent-usage-record.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-usage-record, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-retrieve-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-license, mp4, playback, retrieve, playback and destroy",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-retrieve-persistent-license.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-license, mp4, playback, retrieve and playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-retrieve-persistent-usage-record.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, persistent-usage-record, mp4, playback, retrieve in new window",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-clear-encrypted.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, encrypted and clear sources",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-encrypted-clear.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, single key, encrypted then clear content",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-events.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-multikey.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, multikey audio/video",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-multisession.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback with multiple sessions, multikey video",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-setMediaKeys-after-src.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, setMediaKeys after setting video.src",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-setMediaKeys-after-update.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, setMediaKeys after updating session",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-setMediaKeys-immediately.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, setMediaKeys first",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-setMediaKeys-onencrypted.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, setMediaKeys in encrypted event",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-waitingforkey.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, successful playback, temporary, mp4, waitingforkey event, 1 key",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, single key",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-reset-src-after-setmediakeys.html",
      "subtests": [
        {
          "name": "Reset src after setMediaKeys().",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-again-after-playback.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys again after playback",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-again-after-resetting-src.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys again after resetting src",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-at-same-time.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-multiple-times-with-different-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys multiple times with different mediakeys",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-multiple-times-with-the-same-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys multiple times with the same mediakeys",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys-to-multiple-video-elements.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-setmediakeys.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-syntax-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test MediaKeys attribute syntax",
          "status": "FAIL",
          "message": "assert_true: initDataType should be supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeys setServerCertificate() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeys setServerCertificate() syntax with non-empty certificate.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-syntax-mediakeysession.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test MediaKeySession generateRequest() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession load() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test if MediaKeySession generateRequest() resolves for various sessions",
          "status": "FAIL",
          "message": "assert_true: initDataType should be supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession update() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession close() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession remove() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession attribute syntax.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-syntax-mediakeysystemaccess.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test requestMediaKeySystemAccess() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function () {\r\n                return navigator.requestMediaKeySystemAccess('', [{}]);\r\n            }\" expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "org.w3.clearkey test MediaKeySystemAccess attribute syntax.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-unique-origin.html",
      "subtests": [
        {
          "name": "Unique origin is unable to create MediaKeys",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-update-disallowed-input.html",
      "subtests": [
        {
          "name": "update() with invalid response (longer than 64Kb characters) should fail.",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-waiting-for-a-key.html",
      "subtests": [
        {
          "name": "Waiting for a key.",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-not-callable-after-createsession.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, update() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "org.w3.clearkey, temporary, close() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "org.w3.clearkey, temporary, remove() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-update-non-ascii-input.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test handling of non-ASCII responses for update()",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-check-initdata-type.html",
      "subtests": [
        {
          "name": "drm support for \"webm\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm support for \"cenc\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm support for \"keyids\".",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-events-session-closed-event.html",
      "subtests": [
        {
          "name": "drm test MediaKeySession closed event.",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-events.html",
      "subtests": [
        {
          "name": "drm, basic events",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-expiration.html",
      "subtests": [
        {
          "name": "drm, expiration",
          "status": "FAIL",
          "message": "assert_approx_equals: expiration attribute should equal provided expiration time expected 1478108459450 +/- 4000 but got NaN"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-generate-request-disallowed-input.html",
      "subtests": [
        {
          "name": "drm, temporary, cenc, initData longer than 64Kb characters",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, temporary, keyids, initData longer than 64Kb characters",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, temporary, cenc, invalid initdata (invalid pssh)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, temporary, cenc, invalid initdata (not pssh)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, temporary, keyids, invalid initdata (too short key ID)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, temporary, keyids, invalid initdata (too long key ID)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-invalid-license.html",
      "subtests": [
        {
          "name": "Update with invalid Clear Key license",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-keystatuses-multiple-sessions.html",
      "subtests": [
        {
          "name": "drm, temporary, keystatuses, multiple sessions",
          "status": "FAIL",
          "message": "assert_true: keystatuses should have the expected keys expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-keystatuses.html",
      "subtests": [
        {
          "name": "drm, temporary, keystatuses",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'Symbol.iterator'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-onencrypted.html",
      "subtests": [
        {
          "name": "encrypted fired on encrypted media file.",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "drm, persistent-license, mp4, playback, destroy and acknowledge",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-persistent-license-events.html",
      "subtests": [
        {
          "name": "drm, persistent-license, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-persistent-license.html",
      "subtests": [
        {
          "name": "drm, persistent-license, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-persistent-usage-record-events.html",
      "subtests": [
        {
          "name": "drm, persistent-usage-record, mp4, playback, check events",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'then'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-retrieve-persistent-usage-record.html",
      "subtests": [
        {
          "name": "drm, persistent-usage-record, mp4, playback, retrieve in new window",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'then'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-clear-encrypted.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, encrypted and clear sources",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-encrypted-clear.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-expired.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, expired license",
          "status": "FAIL",
          "message": "assert_approx_equals: expiration attribute should equal provided expiration time expected 1478108382630 +/- 2000 but got NaN"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-multikey.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, multikey audio/video",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-multisession.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback with multiple sessions, multikey video",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-setMediaKeys-after-src.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, setMediaKeys after setting video.src",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-setMediaKeys-after-update.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, setMediaKeys after updating session",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-setMediaKeys-immediately.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, setMediaKeys first",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-setMediaKeys-onencrypted.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, setMediaKeys in encrypted event",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-two-videos.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback two videos",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-waitingforkey.html",
      "subtests": [
        {
          "name": "drm, successful playback, temporary, mp4, waitingforkey event, 1 key",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "ERROR",
      "message": "Error: assert_equals: expected 1 but got 0"
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, single key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-reset-src-after-setmediakeys.html",
      "subtests": [
        {
          "name": "Reset src after setMediaKeys().",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-again-after-playback.html",
      "subtests": [
        {
          "name": "drm, setmediakeys again after playback",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-again-after-resetting-src.html",
      "subtests": [
        {
          "name": "drm, setmediakeys again after resetting src",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-at-same-time.html",
      "subtests": [
        {
          "name": "drm, setmediakeys at same time",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-multiple-times-with-different-mediakeys.html",
      "subtests": [
        {
          "name": "drm, setmediakeys multiple times with different mediakeys",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-multiple-times-with-the-same-mediakeys.html",
      "subtests": [
        {
          "name": "drm, setmediakeys multiple times with the same mediakeys",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys-to-multiple-video-elements.html",
      "subtests": [
        {
          "name": "drm, setMediaKeys to multiple video elements",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-setmediakeys.html",
      "subtests": [
        {
          "name": "drm, setMediaKeys",
          "status": "FAIL",
          "message": "assert_unreached: Error: assert_equals: setMediaKeys should return a TypeError when setting to wrong kind of object (Date) expected \"TypeError\" but got \"InvalidAccessError\" Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-syntax-mediakeys.html",
      "subtests": [
        {
          "name": "drm test MediaKeys attribute syntax",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeys setServerCertificate() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk) {\r\n                return mk.setServerCertificate('');\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeys setServerCertificate() syntax with non-empty certificate.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-syntax-mediakeysession.html",
      "subtests": [
        {
          "name": "drm test MediaKeySession generateRequest() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk2, type) {\r\n                return mk2.createSession().generateRequest(type, '');\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeySession load() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk3) {\r\n                return mk3.createSession('temporary').load('');\r\n            }\" expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm test if MediaKeySession generateRequest() resolves for various sessions",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession update() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (s) {\r\n                return s.update(undefined);\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeySession close() exceptions.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession remove() exceptions.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession attribute syntax.",
          "status": "FAIL",
          "message": "assert_equals: expected \"object\" but got \"undefined\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-syntax-mediakeysystemaccess.html",
      "subtests": [
        {
          "name": "drm test requestMediaKeySystemAccess() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function () {\r\n                return navigator.requestMediaKeySystemAccess('', [{}]);\r\n            }\" expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm test MediaKeySystemAccess attribute syntax.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-unique-origin.html",
      "subtests": [
        {
          "name": "Unique origin is unable to create MediaKeys",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-waiting-for-a-key.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/encrypted-media/drm-not-callable-after-createsession.html",
      "subtests": [
        {
          "name": "drm, temporary, update() immediately after createSession()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, temporary, close() immediately after createSession()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, temporary, remove() immediately after createSession()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-temporary-license-type.html",
      "subtests": [
        {
          "name": "drm, cannot load persistent license into temporary session",
          "status": "FAIL",
          "message": "assert_unreached: Update with incorrect license type should fail Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/idlharness.html",
      "subtests": [
        {
          "name": "Navigator interface: operation requestMediaKeySystemAccess(DOMString,[object Object])",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "HTMLMediaElement interface: attribute mediaKeys",
          "status": "PASS",
          "message": null
        },
        {
          "name": "HTMLMediaElement interface: attribute onencrypted",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "HTMLMediaElement interface: attribute onwaitingforkey",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onwaitingforkey\" expected true got false"
        },
        {
          "name": "HTMLMediaElement interface: operation setMediaKeys(MediaKeys)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeySystemAccess interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaKeySystemAccess interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface: attribute keySystem",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface: operation getConfiguration()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySystemAccess interface: operation createMediaKeys()",
          "status": "FAIL",
          "message": "assert_unreached: Throws \"TypeError: Invalid calling object\" instead of rejecting promise Reached unreachable code"
        },
        {
          "name": "MediaKeys interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeys interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaKeys interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeys interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeys interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeys interface: operation createSession(MediaKeySessionType)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeys interface: operation setServerCertificate(BufferSource)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeySession interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of MediaKeySession is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "MediaKeySession interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaKeySession interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: attribute sessionId",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: attribute expiration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: attribute closed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: attribute keyStatuses",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeySession interface: attribute onkeystatuseschange",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onkeystatuseschange\" expected true got false"
        },
        {
          "name": "MediaKeySession interface: attribute onmessage",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onmessage\" expected true got false"
        },
        {
          "name": "MediaKeySession interface: operation generateRequest(DOMString,BufferSource)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "MediaKeySession interface: operation load(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeySession interface: operation update(BufferSource)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeySession interface: operation close()",
          "status": "FAIL",
          "message": "assert_unreached: Throws \"TypeError: Invalid calling object\" instead of rejecting promise Reached unreachable code"
        },
        {
          "name": "MediaKeySession interface: operation remove()",
          "status": "FAIL",
          "message": "assert_unreached: Throws \"TypeError: Invalid calling object\" instead of rejecting promise Reached unreachable code"
        },
        {
          "name": "MediaKeyStatusMap interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyStatusMap interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaKeyStatusMap interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyStatusMap interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyStatusMap interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyStatusMap interface: attribute size",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyStatusMap interface: operation has(BufferSource)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeyStatusMap interface: operation get(BufferSource)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "MediaKeyMessageEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of MediaKeyMessageEvent is not Event expected function \"function Event() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "MediaKeyMessageEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaKeyMessageEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyMessageEvent interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyMessageEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyMessageEvent interface: attribute messageType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaKeyMessageEvent interface: attribute message",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaEncryptedEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of MediaEncryptedEvent is not Event expected function \"function Event() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "MediaEncryptedEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "MediaEncryptedEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaEncryptedEvent interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaEncryptedEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaEncryptedEvent interface: attribute initDataType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "MediaEncryptedEvent interface: attribute initData",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback, encrypted and clear sources",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-multikey-sequential-readyState.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, successful playback, temporary, mp4, multiple keys, sequential, readyState",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-multikey-sequential.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, successful playback, temporary, mp4, multiple keys, sequential",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-playback-temporary-two-videos.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, temporary, mp4, playback two videos",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/clearkey-mp4-requestmediakeysystemaccess.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Empty Key System should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unsupported Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Key System ending in \".\" should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Capitalized Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Non-ASCII Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Root domain of Key System alone should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Root domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Domain of Key System along should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Child of Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Prefixed Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Missing characters in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Missing characters at end of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Leading space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Extra space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Trailing space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Leading dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Extra dot in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Trailing dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Key System name is case sensitive should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Empty supportedConfigurations should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Empty configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Basic supported configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Partially supported configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Supported audio codec",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "ContentType formatting must be preserved",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unsupported audio codec ('audio/webm; codecs=fake') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unsupported video codec () should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=mp4a','audio/webm; codecs=mp4a.40.2') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Video codec specified in audio field ('video/mp4;codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Audio codec specified in video field ('audio/mp4;codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=avc1','audio/webm; codecs=avc1.42e01e') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/mp4; codecs=vorbis') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, one supported",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Two configurations, both supported",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (webm) ('audio/webm; codecs=\"vp8,vorbis\"','audio/webm; codecs=\"vorbis, vp8\"','audio/webm; codecs=\"vp8\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (mp4) ('audio/mp4; codecs=\"avc1\"','audio/mp4; codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (webm) ('video/webm; codecs=\"vp8,vorbis\"','video/webm; codecs=\"vorbis, vp8\"','video/webm; codecs=\"vorbis\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (mp4) ('video/mp4; codecs=\"mp4a\"','video/mp4; codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: WebM audio does not support AVC1/AAC ('audio/webm; codecs=\"aac\"','audio/webm; codecs=\"avc1\"','audio/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: WebM video does not support AVC1/AAC ('video/webm; codecs=\"aac\"','video/webm; codecs=\"avc1\"','video/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Leading space in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space before ; in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Trailing space in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space at start of codecs parameter",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space at end of codecs parameter",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Video/",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Codecs=",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Upper case MIME type",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "CODECS=",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with webm ('video/webm; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with mp4 ('video/mp4; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with codecs ('video/mp4;codecs=\"avc1.4d401e\"; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'audio/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\"AVC1.4D401E\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\",avc1.4d401e\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-persistent-usage-record.html",
      "subtests": [
        {
          "name": "drm, persistent-usage-record, mp4playback",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'then'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-retrieve-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "drm, persistent-license, mp4, playback, retrieve, playback and destroy",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-retrieve-persistent-license.html",
      "subtests": [
        {
          "name": "drm, persistent-license, mp4, playback, retrieve, playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, playback, encrypted and clear sources",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-events.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-expired.html",
      "subtests": [
        {
          "name": "drm, temporary, mp4, expired license",
          "status": "FAIL",
          "message": "assert_approx_equals: expiration attribute should equal provided expiration time expected 1478108484756 +/- 2000 but got NaN"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-multikey-sequential-readyState.html",
      "subtests": [
        {
          "name": "drm, successful playback, temporary, mp4, multiple keys, sequential, readyState",
          "status": "FAIL",
          "message": "assert_unreached: Error: Media source error Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-playback-temporary-multikey-sequential.html",
      "subtests": [
        {
          "name": "drm, successful playback, temporary, mp4, multiple keys, sequential",
          "status": "FAIL",
          "message": "assert_unreached: Error: Media source error Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/drm-mp4-requestmediakeysystemaccess.html",
      "subtests": [
        {
          "name": "drm, requestMediaKeySystemAccess: Empty Key System should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unsupported Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Key System ending in \".\" should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Capitalized Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Non-ASCII Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Root domain of Key System alone should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Root domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Domain of Key System along should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Child of Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Prefixed Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Missing characters in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Missing characters at end of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Leading space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Extra space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Trailing space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Leading dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Extra dot in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Trailing dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Key System name is case sensitive should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Empty supportedConfigurations should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Empty configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Basic supported configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Partially supported configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Supported audio codec",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ContentType formatting must be preserved",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unsupported audio codec ('audio/webm; codecs=fake') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unsupported video codec () should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=mp4a','audio/webm; codecs=mp4a.40.2') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Video codec specified in audio field ('video/mp4;codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Audio codec specified in video field ('audio/mp4;codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=avc1','audio/webm; codecs=avc1.42e01e') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/mp4; codecs=vorbis') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, one supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, both supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (webm) ('audio/webm; codecs=\"vp8,vorbis\"','audio/webm; codecs=\"vorbis, vp8\"','audio/webm; codecs=\"vp8\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (mp4) ('audio/mp4; codecs=\"avc1\"','audio/mp4; codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (webm) ('video/webm; codecs=\"vp8,vorbis\"','video/webm; codecs=\"vorbis, vp8\"','video/webm; codecs=\"vorbis\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (mp4) ('video/mp4; codecs=\"mp4a\"','video/mp4; codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: WebM audio does not support AVC1/AAC ('audio/webm; codecs=\"aac\"','audio/webm; codecs=\"avc1\"','audio/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: WebM video does not support AVC1/AAC ('video/webm; codecs=\"aac\"','video/webm; codecs=\"avc1\"','video/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Leading space in contentType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space before ; in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Trailing space in contentType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space at start of codecs parameter",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space at end of codecs parameter",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Video/",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Codecs=",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Upper case MIME type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "CODECS=",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unrecognized foo with webm ('video/webm; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unrecognized foo with mp4 ('video/mp4; foo=\"bar\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: Unrecognized foo with codecs ('video/mp4;codecs=\"avc1.4d401e\"; foo=\"bar\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: contentType: 'fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: contentType: 'audio/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: contentType: 'video/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\"AVC1.4D401E\"' should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "drm, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\",avc1.4d401e\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-check-initdata-type.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey support for \"webm\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey support for \"cenc\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey support for \"keyids\".",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-events-session-closed-event.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey test MediaKeySession closed event.",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-events.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-generate-request-disallowed-input.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-invalid-license.html",
      "subtests": [
        {
          "name": "Update with invalid Clear Key license",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-keystatuses-multiple-sessions.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-keystatuses.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-license, mp4, playback, destroy and acknowledge",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-persistent-license-events.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-license, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-license, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-persistent-usage-record-events.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-usage-record, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-persistent-usage-record.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-usage-record, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-retrieve-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-license, mp4, playback, retrieve, playback and destroy",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-retrieve-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-license, mp4, playback, retrieve and playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-retrieve-persistent-usage-record.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, persistent-usage-record, mp4, playback, retrieve in new window",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-clear-encrypted.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, encrypted and clear sources",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-encrypted-clear.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, single key, encrypted then clear content",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-events.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-multikey-sequential-readyState.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, successful playback, temporary, mp4, multiple keys, sequential, readyState",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-multikey-sequential.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, successful playback, temporary, mp4, multiple keys, sequential",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-multikey.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, multikey audio/video",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-multisession.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback with multiple sessions, multikey video",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-setMediaKeys-after-src.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, setMediaKeys after setting video.src",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-setMediaKeys-after-update.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, setMediaKeys after updating session",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-setMediaKeys-immediately.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, setMediaKeys first",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-setMediaKeys-onencrypted.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, setMediaKeys in encrypted event",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-two-videos.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback two videos",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary-waitingforkey.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, successful playback, temporary, mp4, waitingforkey event, 1 key",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-playback-temporary.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, mp4, playback, single key",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-requestmediakeysystemaccess.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Empty Key System should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unsupported Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Key System ending in \".\" should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Capitalized Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Non-ASCII Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Root domain of Key System alone should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Root domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Domain of Key System along should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Child of Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Prefixed Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Missing characters in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Missing characters at end of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Leading space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Extra space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Trailing space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Leading dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Extra dot in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Trailing dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Key System name is case sensitive should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Empty supportedConfigurations should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Empty configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Basic supported configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Partially supported configuration",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Supported audio codec",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "ContentType formatting must be preserved",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unsupported audio codec ('audio/webm; codecs=fake') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unsupported video codec () should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=mp4a','audio/webm; codecs=mp4a.40.2') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Video codec specified in audio field ('video/mp4;codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Audio codec specified in video field ('audio/mp4;codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=avc1','audio/webm; codecs=avc1.42e01e') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/mp4; codecs=vorbis') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, one supported",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Two configurations, both supported",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (webm) ('audio/webm; codecs=\"vp8,vorbis\"','audio/webm; codecs=\"vorbis, vp8\"','audio/webm; codecs=\"vp8\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (mp4) ('audio/mp4; codecs=\"avc1\"','audio/mp4; codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (webm) ('video/webm; codecs=\"vp8,vorbis\"','video/webm; codecs=\"vorbis, vp8\"','video/webm; codecs=\"vorbis\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (mp4) ('video/mp4; codecs=\"mp4a\"','video/mp4; codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: WebM audio does not support AVC1/AAC ('audio/webm; codecs=\"aac\"','audio/webm; codecs=\"avc1\"','audio/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: WebM video does not support AVC1/AAC ('video/webm; codecs=\"aac\"','video/webm; codecs=\"avc1\"','video/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Leading space in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space before ; in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Trailing space in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space at start of codecs parameter",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Space at end of codecs parameter",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Video/",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Codecs=",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Upper case MIME type",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "CODECS=",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with webm ('video/webm; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with mp4 ('video/mp4; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: Unrecognized foo with codecs ('video/mp4;codecs=\"avc1.4d401e\"; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'audio/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\"AVC1.4D401E\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: org.w3.clearkey, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\",avc1.4d401e\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-reset-src-after-setmediakeys.html",
      "subtests": [
        {
          "name": "Reset src after setMediaKeys().",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-again-after-playback.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys again after playback",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-again-after-resetting-src.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys again after resetting src",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-at-same-time.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-multiple-times-with-different-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys multiple times with different mediakeys",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-multiple-times-with-the-same-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey, setmediakeys multiple times with the same mediakeys",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys-to-multiple-video-elements.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-setmediakeys.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-syntax-mediakeys.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test MediaKeys attribute syntax",
          "status": "FAIL",
          "message": "assert_true: initDataType should be supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeys setServerCertificate() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeys setServerCertificate() syntax with non-empty certificate.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-syntax-mediakeysession.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test MediaKeySession generateRequest() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession load() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test if MediaKeySession generateRequest() resolves for various sessions",
          "status": "FAIL",
          "message": "assert_true: initDataType should be supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession update() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession close() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession remove() exceptions.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        },
        {
          "name": "org.w3.clearkey test MediaKeySession attribute syntax.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-syntax-mediakeysystemaccess.html",
      "subtests": [
        {
          "name": "org.w3.clearkey test requestMediaKeySystemAccess() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function () {\r\n                return navigator.requestMediaKeySystemAccess();\r\n            }\" expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "org.w3.clearkey test MediaKeySystemAccess attribute syntax.",
          "status": "FAIL",
          "message": "assert_true: initDataType not supported expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-unique-origin.html",
      "subtests": [
        {
          "name": "Unique origin is unable to create MediaKeys",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-update-disallowed-input.html",
      "subtests": [
        {
          "name": "update() with invalid response (longer than 64Kb characters) should fail.",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-mp4-waiting-for-a-key.html",
      "subtests": [
        {
          "name": "Waiting for a key.",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-not-callable-after-createsession.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey, temporary, update() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, temporary, close() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "polyfill: org.w3.clearkey, temporary, remove() immediately after createSession()",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/clearkey-update-non-ascii-input.html",
      "subtests": [
        {
          "name": "polyfill: org.w3.clearkey test handling of non-ASCII responses for update()",
          "status": "FAIL",
          "message": "assert_unreached: Error: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-check-initdata-type.html",
      "subtests": [
        {
          "name": "polyfill: drm support for \"webm\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm support for \"cenc\".",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm support for \"keyids\".",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-events-session-closed-event.html",
      "subtests": [
        {
          "name": "polyfill: drm test MediaKeySession closed event.",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-events.html",
      "subtests": [
        {
          "name": "polyfill: drm, basic events",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-expiration.html",
      "subtests": [],
      "status": "ERROR",
      "message": "Syntax error"
    },
    {
      "test": "/encrypted-media/polyfill/drm-generate-request-disallowed-input.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, cenc, initData longer than 64Kb characters",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, temporary, keyids, initData longer than 64Kb characters",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, temporary, cenc, invalid initdata (invalid pssh)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, temporary, cenc, invalid initdata (not pssh)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, temporary, keyids, invalid initdata (too short key ID)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, temporary, keyids, invalid initdata (too long key ID)",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-invalid-license.html",
      "subtests": [
        {
          "name": "Update with invalid Clear Key license",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-keystatuses-multiple-sessions.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, keystatuses, multiple sessions",
          "status": "FAIL",
          "message": "assert_unreached: InvalidStateError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-keystatuses.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, keystatuses",
          "status": "FAIL",
          "message": "assert_equals: expected 0 but got 2"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-onencrypted.html",
      "subtests": [
        {
          "name": "encrypted fired on encrypted media file.",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-license, mp4, playback, destroy and acknowledge",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-persistent-license-events.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-license, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-license, mp4playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-persistent-usage-record-events.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-usage-record, mp4, playback, check events",
          "status": "FAIL",
          "message": "Invalid calling object"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-persistent-usage-record.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-usage-record, mp4playback",
          "status": "FAIL",
          "message": "Invalid calling object"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-retrieve-destroy-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-license, mp4, playback, retrieve, playback and destroy",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-retrieve-persistent-license.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-license, mp4, playback, retrieve, playback",
          "status": "FAIL",
          "message": "assert_unreached: NotSupportedError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-retrieve-persistent-usage-record.html",
      "subtests": [
        {
          "name": "polyfill: drm, persistent-usage-record, mp4, playback, retrieve in new window",
          "status": "FAIL",
          "message": "Invalid calling object"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-clear-encrypted.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-encrypted-clear-sources.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, encrypted and clear sources",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-encrypted-clear.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, single key, clear then encrypted content",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-events.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, check events",
          "status": "FAIL",
          "message": "assert_equals: Expected 1st event to be 'generaterequest' expected \"generaterequest\" but got \"license-request\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-expired.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, expired license",
          "status": "FAIL",
          "message": "assert_approx_equals: expiration attribute should equal provided expiration time expected 1478108617367 +/- 2000 but got NaN"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-multikey-sequential-readyState.html",
      "subtests": [
        {
          "name": "polyfill: drm, successful playback, temporary, mp4, multiple keys, sequential, readyState",
          "status": "FAIL",
          "message": "assert_unreached: Error: Media source error Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-multikey-sequential.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-multikey.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, multikey audio/video",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-multisession.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback with multiple sessions, multikey video",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-setMediaKeys-after-src.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, setMediaKeys after setting video.src",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-setMediaKeys-after-update.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, setMediaKeys after updating session",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-setMediaKeys-immediately.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, setMediaKeys first",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-setMediaKeys-onencrypted.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, setMediaKeys in encrypted event",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-two-videos.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback two videos",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary-waitingforkey.html",
      "subtests": [
        {
          "name": "polyfill: drm, successful playback, temporary, mp4, waitingforkey event, 1 key",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "ERROR",
      "message": "Error: assert_equals: expected 1 but got 0"
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-playback-temporary.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, mp4, playback, single key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-requestmediakeysystemaccess.html",
      "subtests": [
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Empty Key System should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unsupported Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Key System ending in \".\" should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Capitalized Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Non-ASCII Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Root domain of Key System alone should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Root domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Domain of Key System along should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Domain of Key System, with dot should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Child of Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Prefixed Key System should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Missing characters in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Missing characters at end of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Leading space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Extra space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Trailing space in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Leading dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Extra dot in middle of Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Trailing dot in Key System name should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Key System name is case sensitive should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Empty supportedConfigurations should result in TypeError",
          "status": "FAIL",
          "message": "assert_equals: expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Empty configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Basic supported configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Partially supported configuration",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Supported audio codec",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ContentType formatting must be preserved",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unsupported audio codec ('audio/webm; codecs=fake') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unsupported video codec () should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=mp4a','audio/webm; codecs=mp4a.40.2') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Video codec specified in audio field ('video/mp4;codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Audio codec specified in video field ('audio/mp4;codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/webm; codecs=avc1','audio/webm; codecs=avc1.42e01e') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Mismatched audio container/codec ('audio/mp4; codecs=vorbis') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, one supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Two configurations, both supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (webm) ('audio/webm; codecs=\"vp8,vorbis\"','audio/webm; codecs=\"vorbis, vp8\"','audio/webm; codecs=\"vp8\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Audio MIME type does not support video codecs (mp4) ('audio/mp4; codecs=\"avc1\"','audio/mp4; codecs=\"avc1.4d401e\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (webm) ('video/webm; codecs=\"vp8,vorbis\"','video/webm; codecs=\"vorbis, vp8\"','video/webm; codecs=\"vorbis\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Video MIME type does not support audio codecs (mp4) ('video/mp4; codecs=\"mp4a\"','video/mp4; codecs=\"mp4a.40.2\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: WebM audio does not support AVC1/AAC ('audio/webm; codecs=\"aac\"','audio/webm; codecs=\"avc1\"','audio/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: WebM video does not support AVC1/AAC ('video/webm; codecs=\"aac\"','video/webm; codecs=\"avc1\"','video/webm; codecs=\"vp8,aac\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Leading space in contentType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space before ; in contentType",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"NotSupportedError\""
        },
        {
          "name": "Trailing space in contentType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space at start of codecs parameter",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Space at end of codecs parameter",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Video/",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Codecs=",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Upper case MIME type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "CODECS=",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unrecognized foo with webm ('video/webm; foo=\"bar\"') should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unrecognized foo with mp4 ('video/mp4; foo=\"bar\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: Unrecognized foo with codecs ('video/mp4;codecs=\"avc1.4d401e\"; foo=\"bar\"') should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: contentType: 'fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: contentType: 'audio/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: contentType: 'video/fake' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\"AVC1.4D401E\"' should result in NotSupportedError",
          "status": "FAIL",
          "message": "assert_unreached: Unexpected requestMediaKeySystemAccess() success. Reached unreachable code"
        },
        {
          "name": "polyfill: drm, requestMediaKeySystemAccess: contentType: 'video/mp4;codecs=\",avc1.4d401e\"' should result in NotSupportedError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-reset-src-after-setmediakeys.html",
      "subtests": [
        {
          "name": "Reset src after setMediaKeys().",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-again-after-playback.html",
      "subtests": [
        {
          "name": "drm, setmediakeys again after playback",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-again-after-resetting-src.html",
      "subtests": [
        {
          "name": "drm, setmediakeys again after resetting src",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-at-same-time.html",
      "subtests": [
        {
          "name": "drm, setmediakeys at same time",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-multiple-times-with-different-mediakeys.html",
      "subtests": [
        {
          "name": "drm, setmediakeys multiple times with different mediakeys",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-multiple-times-with-the-same-mediakeys.html",
      "subtests": [
        {
          "name": "drm, setmediakeys multiple times with the same mediakeys",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys-to-multiple-video-elements.html",
      "subtests": [
        {
          "name": "drm, setMediaKeys to multiple video elements",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-setmediakeys.html",
      "subtests": [
        {
          "name": "drm, setMediaKeys",
          "status": "FAIL",
          "message": "assert_unreached: Error: assert_equals: setMediaKeys should return a TypeError when setting to wrong kind of object (Date) expected \"TypeError\" but got \"InvalidAccessError\" Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-syntax-mediakeys.html",
      "subtests": [
        {
          "name": "drm test MediaKeys attribute syntax",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeys setServerCertificate() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk) {\r\n                return mk.setServerCertificate('');\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeys setServerCertificate() syntax with non-empty certificate.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-syntax-mediakeysession.html",
      "subtests": [
        {
          "name": "drm test MediaKeySession generateRequest() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk2, type) {\r\n                return mk2.createSession().generateRequest(type, '');\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeySession load() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (mk3) {\r\n                return mk3.createSession('temporary').load('');\r\n            }\" expected \"TypeError\" but got \"InvalidAccessError\""
        },
        {
          "name": "drm test if MediaKeySession generateRequest() resolves for various sessions",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession update() exceptions.",
          "status": "FAIL",
          "message": "assert_equals: function \"function (s) {\r\n                return s.update(1);\r\n            }\" expected \"TypeError\" but got \"Error\""
        },
        {
          "name": "drm test MediaKeySession close() exceptions.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession remove() exceptions.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "drm test MediaKeySession attribute syntax.",
          "status": "FAIL",
          "message": "assert_equals: expected \"object\" but got \"undefined\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-syntax-mediakeysystemaccess.html",
      "subtests": [
        {
          "name": "drm test requestMediaKeySystemAccess() exceptions.",
          "status": "FAIL",
          "message": "assert_unreached: function \"function () {\r\n                return navigator.requestMediaKeySystemAccess(keysystem, [{}, 6]);\r\n            }\" Reached unreachable code"
        },
        {
          "name": "drm test MediaKeySystemAccess attribute syntax.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-unique-origin.html",
      "subtests": [
        {
          "name": "Unique origin is unable to create MediaKeys",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-mp4-waiting-for-a-key.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/encrypted-media/polyfill/drm-not-callable-after-createsession.html",
      "subtests": [
        {
          "name": "polyfill: drm, temporary, update() immediately after createSession()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, temporary, close() immediately after createSession()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "polyfill: drm, temporary, remove() immediately after createSession()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/drm-temporary-license-type.html",
      "subtests": [
        {
          "name": "polyfill: drm, cannot load persistent license into temporary session",
          "status": "FAIL",
          "message": "assert_unreached: Update with incorrect license type should fail Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/encrypted-media/polyfill/idlharness.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": null
    }
  ]
}