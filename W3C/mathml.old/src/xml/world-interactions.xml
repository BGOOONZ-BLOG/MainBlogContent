<div1 id="world-interactions" role="chapter6">
<head>Interactions with the Host Environment</head>
<!-- $Id: world-interactions.xml,v 1.88 2015/04/09 19:47:19 dcarlis Exp $ -->


<!--
Principal authors
Robert Miner : original clipboard text
Paul Libbrecht: rearranging, intros, generalization of clipboard-formats' text
Stephen Watt: mixing with other formats(?)
-->


<div2 id="world_introduction">
<head>Introduction</head>

<p>To be effective, MathML must work well with a wide variety of
renderers, processors, translators and editors. This chapter raises
some of the interface issues involved in generating and rendering
MathML. Since MathML exists primarily to encode mathematics in Web
documents, perhaps the most important interface issues relate to
embedding MathML in <bibref ref="HTML5" />, <phrase> and
<bibref ref="XHTML"/>, and in any newer HTML 
when it appears</phrase>.</p>

<p>There are three kinds of interface issues that arise in embedding
MathML in other XML documents. First, MathML markup must be recognized
as valid embedded XML
content, and not as an error.  This issue could be seen primarily as a
question of managing namespaces in XML <bibref ref="Namespaces"/>.
</p>

<p>Second, in the case of HTML/XHTML, MathML rendering must be
integrated with browser software.  Some browsers already implement
MathML rendering natively, and one can expect more browsers will do so
in the future.  At the same time, other browsers
have developed infrastructure to facilitate the rendering of MathML
and other embedded XML content by third-party software or other
built-in technology.  Examples of this built-in technology are the
sophisticated CSS rendering engines now available, and the powerful
implementations of JavaScript/ECMAScript that are becoming
common. Using these browser-specific mechanisms generally requires
additional interface markup of some sort to activate them.  In the
case of CSS, there is a special restricted form of MathML3
<bibref ref="MathMLforCSS"/> that is tailored for use with
CSS rendering engines that support CSS 2.1 <bibref ref="CSS21"/>.
This restricted profile of MathML3 does not offer the full
expressiveness of MathML3, but it provides a portable simpler form
that can be rendered acceptably on the screen by modern CSS engines.
</p>

<p>Third, other tools for generating and processing MathML must be
able to communicate.  A number of MathML tools have been or are
being developed, including editors, translators, computer algebra
systems, and other scientific software.  However, since MathML
expressions tend to be lengthy, and prone to error when entered by
hand, special emphasis must be made to ensure that MathML can easily
be generated by user-friendly conversion and authoring tools, and
that these tools work together in a dependable, platform-independent,
and vendor-independent way.</p>

<p>
This chapter applies to both content and presentation markup, and describes
a particular processing model for the <el>semantics</el>, <el>annotation</el>
and <el>annotation-xml</el> elements described in
<specref ref="mixing_semantic_annotations"/>.
</p>

</div2>

<div2 id="world_invoking_processors">
<head>Invoking MathML Processors</head>

<div3 id="world_recognizing_mathml">
<head>Recognizing MathML in XML</head>

<p>Within an XML document supporting namespaces <bibref ref="XML"/>,
<bibref ref="Namespaces"/>, the preferred method to recognize
MathML markup is by the identification of the <el>math</el> element
in the MathML namespace by the use of the MathML namespace 
URI <code>http://www.w3.org/1998/Math/MathML</code>.</p>

<p>The MathML namespace URI is the recommended method to embed MathML
within <bibref ref="XHTML"/> documents.  However, some user-agents may
require supplementary information to be available to allow them to invoke
specific extensions to process the MathML markup.</p>

<p>Markup-language specifications that wish to embed MathML may require
special conditions to recognize MathML markup that are independent of
this recommendation.  The conditions should be similar to those expressed
in this recommendation, and the local names of the MathML elements should
remain the same as those defined in this recommendation.</p>

</div3>

<div3 id="world_recognizing_mathml_html">
<head>Recognizing MathML in HTML</head>
<p>HTML does not allow arbitrary namespaces, but has built in knowledge of the MathML namespace.
The <el>math</el> element and its descendants will be placed in the  <code>http://www.w3.org/1998/Math/MathML</code>
namespace by the HTML parser, and will appear to applications as if the input had been XHTML with the namespace declared
as in the previous section. See <specref ref="interf_html"/> for detailed rules of the HTML parser's handling of MathML.</p>
</div3>


<div3 id="world_resource_types">
<head>Resource Types for MathML Documents</head>

<p>Although rendering MathML expressions often takes place in
a Web browser, other MathML processing functions take place more
naturally in other applications.  Particularly common tasks include
opening a MathML expression in an equation editor or computer algebra
system.  It is important therefore to specify the encoding names
by which MathML fragments should be identified.</p>

<p>Outside of those environments where XML namespaces are recognized,
media types <bibref ref="RFC2045" />, <bibref ref="RFC2046" /> should
be used if possible to ensure the invocation of a MathML processor.
For those environments where media types are not appropriate, such as
clipboard formats on some platforms, the encoding names described
in the next section should be used.</p>
  
</div3>

<div3 id="encoding-names">
<head>Names of MathML Encodings</head>

<p>MathML contains two distinct vocabularies:  one for encoding visual
presentation, defined in <specref ref="presm"/>, and one for encoding
computational structure, defined in <specref ref="contm"/>.  Some MathML
applications may import and export only one of these two vocabularies,
while others may produce and consume each in a different way, and still
others may process both without any distinction between the two.  The
following encoding names may be used to distinguish between content
and presentation MathML markup when needed.</p>

<ulist>

  <item><p><emph>MathML-Presentation</emph>:
    The instance contains presentation MathML markup only.</p>
    <ulist>
      <item><p>Media Type: <code>application/mathml-presentation+xml</code></p></item>
      <item><p>Windows Clipboard Flavor: <code>MathML Presentation</code></p></item>
      <item><p>Universal Type Identifier: <code>public.mathml.presentation</code></p></item>
    </ulist>
  </item>

  <item><p><emph>MathML-Content</emph>:
    The instance contains content MathML markup only.</p>
    <ulist>
      <item><p>Media Type: <code>application/mathml-content+xml</code></p></item>
      <item><p>Windows Clipboard Flavor: <code>MathML Content</code></p></item>
      <item><p>Universal Type Identifier: <code>public.mathml.content</code></p></item>
    </ulist>
  </item>

  <item><p><emph>MathML</emph> (generic):
    The instance may contain presentation MathML markup, content MathML markup,
    or a mixture of the two.</p>
    <ulist>
      <item><p>File name extension: <code>.mml</code></p></item>
      <item><p>Media Type: <code>application/mathml+xml</code></p></item> 
      <item><p>Windows Clipboard Flavor: <code>MathML</code></p></item>
      <item><p>Universal Type Identifier: <code>public.mathml</code></p></item>
    </ulist></item>

</ulist>

<p>See <specref ref="media-types-reg"/> for more details about each of these 
encoding names.</p>

<p>MathML 2 specified the predefined encoding values <code>MathML</code>,
<code>MathML-Content</code>, and <code>MathML-Presentation</code> for the
<att>encoding</att> attribute on the <el>annotation-xml</el> element.
These values may be used as an alternative to the media type for backward
compatibility.  See <specref ref="mixing_alternate_representations"/> and
<specref ref="mixing_content_equiv"/> for details.
Moreover, MathML 1.0 suggested the media-type <code>text/mathml</code>,
which has been superseded by <bibref ref="RFC3023"/>.</p>

</div3>

</div2>

<div2 id="world-int-transfers"><head>Transferring MathML</head>

<p>MathML expressions are often exchanged between applications using the
familiar copy-and-paste or drag-and-drop paradigms and are often stored
in files or exchanged over the HTTP protocol.  This section provides
recommended ways to process MathML during these transfers.</p>
  
<p>The transfers of MathML fragments described in this section occur between
the contexts of two applications by making the MathML data available in
several flavors, often called <emph>media types</emph>, <emph>clipboard
formats</emph>, or <emph>data flavors</emph>.  These flavors are typically
ordered by preference by the producing application, and are typically
examined in preference order by the consuming application.  The
copy-and-paste paradigm allows an application to <emph>place</emph>
content in a central <emph>clipboard</emph>, with one data stream per
<emph>clipboard format</emph>; a consuming application negotiates by
choosing to read the data of the format it prefers.  The drag-and-drop
paradigm allows an application to <emph>offer</emph> content by declaring
the available formats; a potential recipient accepts or rejects a drop
based on the list of available formats, and the drop action allows the
receiving application to request the delivery of the data in one of the
indicated formats.  An HTTP GET transfer, as in <bibref ref="HTTP11"/>,
allows a client to submit a list of acceptable media types; the server
then delivers the data using the one of the indicated media types.
An HTTP POST transfer, as in <bibref ref="HTTP11"/>, allows a client
to submit data labelled with a media type that is acceptable to the
server application.</p>
  
<p>Current desktop platforms offer copy-and-paste and drag-and-drop
transfers using similar architectures, but with varying naming schemes
depending on the platform.  HTTP transfers are all based on media types.
This section specifies what transfer types applications should provide,
how they should be named, and how they should handle the special
<el>semantics</el>, <el>annotation</el>, and <el>annotation-xml</el>
elements.</p>
  
<p>To summarize the three negotiation mechanisms, the following paragraphs
will describe transfer <emph>flavors</emph>, each with a <emph>name</emph>
(a character string) and <emph>content</emph> (a stream of binary data), 
which are <emph>offered</emph>, <emph>accepted</emph>, and/or
<emph>exported</emph>.</p>

<div3 id="world-int-transf-flavors">
<head>Basic Transfer Flavor Names and Contents</head>

<p>The names listed in <specref ref="encoding-names"/> are the exact
strings that should be used to identify the transfer flavors that
correspond to the MathML encodings.  On operating systems that allow
such, an application should register their support for these flavor
names (e.g. on Windows, a call to RegisterClipboardFormat, or, on the
Macintosh platform, declaration of support for the universal type
identifier in the application descriptor).</p>  

<p>When transferring MathML, an application MUST ensure the content
of the data transfer is a 
<loc href="http://www.w3.org/TR/2004/REC-xml-20040204/#dt-wellformed">well-formed</loc>
XML instance of a MathML document type.  Specifically:

<olist>
  <item><p>The instance MAY begin with an XML declaration,
    e.g. <![CDATA[<?xml version="1.0">]]></p></item>

  <item><p>The instance MUST contain exactly one root <el>math</el> element.</p></item>

  <item><p>The instance MUST declare the MathML namespace
    on the root <el>math</el> element.</p></item>

  <item><p>The instance MAY use a <att>schemaLocation</att> attribute
    on the <el>math</el> element to indicate the location of the MathML
    schema that describes the MathML document type to which the instance
    conforms.  The presence of the <att>schemaLocation</att> attribute
    does not require a consumer of the MathML instance to obtain or use
    the referenced schema.</p></item>

  <item><p>The instance SHOULD use numeric character references
    (e.g. &amp;#x03b1;) rather than character entity names
    (e.g. &amp;alpha;) for greater interoperability.</p></item>

  <item><p>The instance MUST specify the character encoding, if it uses an
    encoding other than UTF-8, either in the XML declaration, or by the use
    of a byte-order mark (BOM) for UTF-16-encoded data.</p></item>
</olist>
</p>

</div3>

<div3 id="world-int-transf-recommend">
<head>Recommended Behaviors when Transferring</head>

<p>An application that transfers MathML markup SHOULD adhere to the following
conventions:</p>

<olist>

<item><p>An application that supports pure presentation markup and/or pure
content markup SHOULD offer as many of these flavors as it has available.
</p></item>

<item><p>An application that only exports one MathML flavor SHOULD name it
<code>MathML</code> if it is unable to determine a more specific flavor.
</p></item>

<item><p>
If an application is able to determine a more specific flavor, it SHOULD
offer both the generic and specific transfer flavors, but it SHOULD only
deliver the specific flavor if it knows that the recipient supports it.
For an HTTP GET transfer, for example, the specific transfer types for
content and presentation markup should only be returned if they are
included in the the HTTP <code>Accept</code> header sent by the client.
</p></item>

<item><p>
An application that exports the two specific transfer flavors SHOULD
export both the content and presentation transfer flavors, as well as
the generic flavor, which SHOULD combine the other two flavors using
a top-level MathML <el>semantics</el> element
(see <specref ref="mixing_top_level"/>).</p></item>

<item><p>
When an application exports a MathML fragment whose only child of the
root element is a <el>semantics</el> element, it SHOULD offer, after
the above flavors, a transfer flavor for each <el>annotation</el> or
<el>annotation-xml</el> element, provided the transfer flavor can be
recognized and named based on the <att>encoding</att> attribute value,
and provided the annotation key is (the default)
<symbolref cd="mathmlkeys" name="alternate-representation" />.
The transfer content for each annotation should contain the character data
in the specified encoding (for an <el>annotation</el> element), or a
well-formed XML fragment (for an <el>annotation-xml</el> element), or
the data that results by requesting the URL given by the <att>src</att>
attribute (for an annotation reference).</p></item>

<item><p>As a final fallback, an application MAY export a version of
the data in a plain-text flavor (such as <code>text/plain</code>,
<code>CF_UNICODETEXT</code>, <code>UnicodeText</code>, or
<code>NSStringPboardType</code>).  When an application has multiple
versions of an expression available, it may choose the version to
export as text at its discretion.  Since some older MathML processors
expect MathML instances transferred as plain text to begin with a
<el>math</el> element, the text version SHOULD generally omit the XML 
declaration, DOCTYPE declaration, and other XML prolog material that
would appear before the <el>math</el> element.  The Unicode
text version of the data SHOULD always be the last flavor exported,
following the principle that exported flavors should be ordered with
the most specific flavor first and the least specific flavor last.
</p></item>  

</olist>
</div3>

<div3 id="world-int-transf-discuss">
<head>Discussion</head>

<p>To determine whether a MathML instance is pure content markup or
pure presentation markup, the <el>math</el>, <el>semantics</el>,
<el>annotation</el> and <el>annotation-xml</el> elements should be
regarded as belonging to both the presentation and content markup
vocabularies.  The <el>math</el> element is treated in this way
because it is required as the root element in any MathML transfer.
The <el>semantics</el> element and its child annotation elements
comprise an arbitrary annotation mechanism within MathML, and are
not tied to either presentation or content markup.  Consequently,
an application that consumes MathML should always process these four
elements, even if it only implements one of the two vocabularies.</p>
  
<p>It is worth noting that the above recommendations allow agents
that produce MathML to provide binary data for the clipboard, for
example in an image or other application-specific format.  The sole
method to do so is to reference the binary data using the <att>src</att>
attribute of an annotation, since XML character data does not allow
for the transfer of arbitrary byte-stream data.</p>

<p>While the above recommendations are intended to improve
interoperability between MathML-aware applications that use these
transfer paradigms, it should be noted that they do not guarantee
interoperability.  For example, references to external resources
(e.g. stylesheets, etc.) in MathML data can cause interoperability
problems if the consumer of the data is unable to locate them,
as can happen when cutting and pasting HTML or other data types.
An application that makes use of references to external resources
is encouraged to make users aware of potential problems and provide
alternate ways to obtain the referenced resources.  In general,
consumers of MathML data that contains references they cannot
resolve or do not understand should ignore the external references.
</p>

</div3>

<div3 id="world-int-transf-exa">
<head>Examples</head>

<div4><head>Example 1</head>

<p>An e-Learning application has a database of quiz questions, some of
  which contain MathML.  The MathML comes from multiple sources, and the
  e-Learning application merely passes the data on for display, but does
  not have sophisticated MathML analysis capabilities.  Consequently,
  the application is not aware whether a given MathML instance is pure
  presentation or pure content markup, nor does it know whether the
  instance is valid with respect to a particular version of the MathML schema.  It therefore
  places the following data formats on the clipboard:</p>

  
<table id="table-flavor-a" border="1">
  <thead><tr><td>Flavor Name</td><td>Flavor Content</td></tr></thead>
  <tbody>
    <tr>
      <td><code>MathML</code></td>
      <td><eg role="mathml-fragment"><![CDATA[
<math xmlns="http://www.w3.org/1998/Math/MathML">...</math>]]></eg></td>
    </tr>
    <tr>
      <td><code>Unicode Text</code></td>
      <td><eg role="mathml-fragment"><![CDATA[<math xmlns="http://www.w3.org/1998/Math/MathML">...</math>]]></eg></td>
    </tr>
  </tbody>
</table>
</div4>

<div4><head>Example 2</head>

<p>An equation editor on the Windows platform is able to generate pure presentation markup,
    valid with respect to MathML 3.  Consequently, it
    exports the following flavors:</p>

<table  id="table-flavor-b" border="1">
  <thead><tr><td>Flavor Name</td><td>Flavor Content</td></tr></thead>
<tbody>
  <tr>
  <td><code>MathML Presentation</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<math xmlns="http://www.w3.org/1998/Math/MathML">...</math>]]></eg></td>
  </tr>
  <tr>
  <td><code>Tiff</code></td>
  <td>(a rendering sample)</td>
  </tr>
  <tr><td><code>Unicode Text</code></td>
    <td><eg role="mathml-fragment"><![CDATA[<math xmlns="http://www.w3.org/1998/Math/MathML">...</math>]]></eg></td>
  </tr>
</tbody></table>
</div4>

<div4><head>Example 3</head>

<p>A schema-based content management system on the Mac OS X platform contains multiple MathML 
  representations of a collection of mathematical expressions, including mixed 
  markup from authors, pure content markup for interfacing to symbolic computation 
  engines, and pure presentation markup for print publication. Due to the system's 
  use of schemata, markup is stored with a namespace prefix. 
  The system therefore can transfer the following data:</p>

<table  id="table-flavor-c" border="1">
  <thead><tr><td>Flavor Name</td><td>Flavor Content</td></tr></thead>
<tbody>
<tr>
  <td><code>public.mathml.presentation</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
  ...
  <]]><![CDATA[mrow>
</]]><![CDATA[math>]]></eg></td>
</tr>
<tr>
  <td><code>public.mathml.content</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[apply>
  ...
  <]]><![CDATA[apply>
</]]><![CDATA[math>]]></eg></td>
</tr>

<tr><td><code>public.mathml</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
    <]]><![CDATA[apply>
       ... content markup within presentation markup ...
    </]]><![CDATA[apply>
    ...
  </]]><![CDATA[mrow>
</]]><![CDATA[math> ]]></eg></td>
</tr>
  
<tr><td><code>public.plain-text.tex</code></td>
  <td><eg role="TeX"><![CDATA[{x \over x-1}]]></eg></td>
</tr>

<tr><td><code>public.plain-text</code></td>
  <td><eg role="mathml-fragment"><![CDATA[<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
  ...
  <]]><![CDATA[mrow>
</]]><![CDATA[math>]]></eg></td>
</tr>
</tbody></table>
</div4>

<div4><head>Example 4</head>
<p>A similar content management system is web-based and delivers MathML
  representations of mathematical expressions. The system is able to produce
  MathML-Presentation, MathML-Content, TeX and pictures in TIFF format.
  In web-pages being browsed, it could produce a MathML fragment such as the following:
  
<eg role="mathml-fragment"><![CDATA[<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML">
  <]]><![CDATA[semantics>
    <]]><![CDATA[mrow>...</]]><![CDATA[mrow>
    <]]><![CDATA[annotation-xml encoding="MathML-Content">...</]]><![CDATA[annotation-xml>
    <]]><![CDATA[annotation encoding="TeX">{1 \over x}</]]><![CDATA[annotation>
    <]]><![CDATA[annotation encoding="image/tiff" src="formula3848.tiff"/>
  </]]><![CDATA[semantics>
</]]><![CDATA[math>
]]></eg>
</p>


<p>A web-browser on the Windows platform that receives such a fragment and tries to export it as part of
  a drag-and-drop action, can offer the following flavors:</p>

<table  id="table-flavor-d" border="1">
  <thead><tr><td>Flavor Name</td><td>Flavor Content</td></tr></thead>
<tbody>
<tr>
  <td><code>MathML Presentation</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
  ...
  <]]><![CDATA[mrow>
</]]><![CDATA[math>]]></eg></td>
</tr>
<tr>
  <td><code>MathML Content</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[apply>
  ...
  <]]><![CDATA[apply>
</]]><![CDATA[math>]]></eg></td>
</tr>

<tr><td><code>MathML</code></td>
  <td><eg role="mathml-fragment"><![CDATA[
<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
    <]]><![CDATA[apply>
       ... content markup within presentation markup ...
    </]]><![CDATA[apply>
    ...
  </]]><![CDATA[mrow>
</]]><![CDATA[math> ]]></eg></td>
</tr>

<tr><td><code>TeX</code></td>
  <td><eg role="TeX"><![CDATA[{x \over x-1}]]></eg></td>
</tr>

<tr><td><code>CF_TIFF</code></td>
  <td>(the content of the picture file, requested from formula3848.tiff)</td></tr>

<tr><td><code>CF_UNICODETEXT</code></td>
  <td><eg role="mathml-fragment"><![CDATA[<]]><![CDATA[math xmlns]]><![CDATA[="http://www.w3.org/1998/Math/MathML"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation=
             "http://www.w3.org/Math/XMLSchema/mathml4/mathml4.xsd">
  <]]><![CDATA[mrow>
  ...
  <]]><![CDATA[mrow>
</]]><![CDATA[math>]]></eg></td>
</tr>
</tbody></table>
</div4>
</div3>
  
</div2>

<div2 id="world-int-combine-other">
<head>Combining MathML and Other Formats</head>

<p>MathML is usually used in combination with other markup languages.
The most typical case is perhaps the use of MathML within a
document-level markup language, such as <phrase >HTML</phrase> or DocBook.  It is also
common that other object-level markup languages are also included in a
compound document format, such as <phrase>MathML and SVG in HTML5</phrase>.
Other common use cases include mixing other markup within
MathML.  For example, an authoring tool might insert an element
representing a cursor position or other state information within
MathML markup, so that an author can pick up editing where
<phrase>it was broken</phrase> off.</p>

<p>Most document markup languages have some concept of an inline
equation, (or graphic, object, etc.) so there is a typically a natural
 way to incorporate MathML instances into the content
model.  However, in the other direction, embedding of markup within
MathML is not so clear cut, since in many MathML elements, the role of
child elements is defined by position.  For example, the first
child of an <el>apply</el> must be an operator, and the second child
of an <el>mfrac</el> is the denominator.  The proper behavior when
foreign markup appears in such contexts is problematic. Even when such
behavior can be defined in a particular context, it presents an
implementation challenge for generic MathML processors.</p>

<p>For this reason, the default MathML schema does not allow
foreign markup elements to be included within MathML
instances.</p>

<p>In the standard schema, elements from other namespaces
are not allowed, but attributes from other namespaces are permitted.
MathML processors that encounter unknown XML markup should behave
as follows:
<olist>
  <item><p>An attribute from a non-MathML namespace should be silently ignored.</p></item>
  <item><p>An element from a non-MathML namespace should be treated
    as an error, except in an <el>annotation-xml</el> element.
    If the element is a child of a presentation element, it should be
    handled as described in <specref ref="presm_merror"/>.
    If the element is a child of a content element, it should be
    handled as described in <specref ref="contm_cerror"/>.</p></item>
</olist>
   
For example, if the second child of an <el>mfrac</el> element is an
unknown element, the fraction should be rendered with a denominator
that indicates the error.
</p>

<p>When designing a compound document format in which MathML is included in a larger document type, the designer may extend the content model of MathML to allow additional elements. For example, a common extension is to extend the MathML schema such that elements from non-MathML namespaces are
allowed in token elements, but not in other elements. MathML processors that
encounter unknown markup should behave as follows:
<olist>
  <item><p>An unrecognized XML attribute should be silently ignored.</p></item>
  <item><p>An unrecognized element in a MathML token element should be silently ignored.</p></item>
  <item><p>An element from a non-MathML namespace should be treated
    as an error, except in an <el>annotation-xml</el> element.
    If the element is a child of a presentation element, it should be
    handled as described in <specref ref="presm_merror"/>.
    If the element is a child of a content element, it should be
    handled as described in <specref ref="contm_cerror"/>.</p></item>
</olist>
</p>
<p>Extending the schema in this way is easily achieved using the Relax NG schema described in <specref ref="parsing"/>, it may be as simple as including the MathML schema whilst overriding the content model of <el>mtext</el>:
<eg>

default namespace m = "http://www.w3.org/1998/Math/MathML"

include "mathml4.rnc" {
mtext = element mtext {mtext.attributes, (token.content|anyElement)*}
}
</eg>
The definition given here would allow any well formed XML that is not in the MathML namespace as a child of <el>mtext</el>. In practice this may be too lax. For example, an XHTML+MathML Schema may just want to allow inline XHTML elements as additional children of <el>mtext</el>. This may be achieved by replacing <code>anyElement</code> by a suitable production from the <phrase>schema</phrase> for the host document type<phrase>, see <specref ref="interf_xhtml"/></phrase>.</p>

<p>Considerations about mixing markup vocabularies in compound
documents arise when a compound document type is first designed.
But once the document type is fixed, it is not generally practical
for specific software tools to further modify the content model to
suit their needs.
However, it is still frequently the case that such tools may need to
<phrase>store</phrase> additional information within a MathML instance. 
Since MathML is most often generated by authoring tools, a particularly common and
important case is where an authoring tool needs to <phrase>store</phrase>
 information about its internal state along with a MathML expression, so an author
can resume editing from a previous state.  For example, placeholders
may be used to indicate incomplete parts of an expression, or a
insertion point within an expression may need to be <phrase>stored</phrase>.</p>

<p>An application that needs to persist private data within a MathML
expression should generally attempt to do so without altering the
underlying content model, even in situations where it is feasible to
do so.  To support this requirement<phrase>, regardless of what may be allowed
by the content model of a particular compound document format</phrase>, MathML
permits the <phrase>storage</phrase>
of private data via the following strategies:</p>

<p><olist>
<item><p><phrase>In a format that permits the use of XML Namespaces,
</phrase>for small amounts of data, attributes from other namespaces
are allowed on all MathML elements.</p></item>
<item><p>For larger amounts of data, applications may use the 
<el>semantics</el> element, as described in
<specref ref="mixing_semantic_annotations"/>.</p></item> 
<item><p>For authoring tools and other applications that need to
associate particular actions with presentation MathML subtrees,
e.g. to mark an incomplete expression to be filled in by an author,
the <el>maction</el> element may be used, as described in
<specref ref="presm_maction"/>.</p></item>
</olist></p>

<div3 id="interf_xhtml">
<head>Mixing MathML and XHTML</head>

<p>To fully integrate MathML into XHTML, it should be possible not only to embed MathML in
XHTML, but also to embed XHTML in MathML.
<phrase>The schema used for the W3C HTML5 validator extends <el>mtext</el> to allow all
inline (phrasing) HTML elements (including <el namespace="svg">svg</el>) to be used within the
content of <el>mtext</el>. See the example in <specref ref="presm_html_insertion"/>. As noted above,
MathML fragments using XHTML elements within <el>mtext</el> will not be valid MathML if extracted
from the document and used in isolation. Editing tools may offer support for removing any HTML
markup from within <el>mtext</el> and replacing it by a text alternative.</phrase></p>

<p>In most cases, XHTML elements (headings, paragraphs, lists, etc.)
either do not apply in mathematical contexts, or MathML already
provides equivalent or improved functionality specifically tailored
to mathematical content (tables, mathematics style changes,
etc.).</p>


<p>Consult the <loc href="http://www.w3.org/Math/">W3C Math Working
Group</loc> home page for compatibility and implementation suggestions
for current browsers and other MathML-aware tools.</p>
</div3>


<div3 id="interf_nonxml">
<head>Mixing MathML and  non-XML contexts</head>


<p>There may be non-XML vocabularies which require markup for mathematical expressions,
where it makes sense to reference this specification. HTML is an important example discussed in the
next section, however other examples exist. It is possible to use a TeX-like syntax such as
<code>\frac{a}{b}</code> rather than explicitly using <el role="starttag">mfrac</el> and <el
role="starttag">mi</el>. If a system parses a specified syntax and produces a tree that may be
validated against the <intref ref="parsing">MathML schema</intref> then it may be viewed as
as a MathML application. Note however that documents using such a system are not valid MathML.
Implementations of such a syntax should, if possible, offer a facility to
output any mathematical expressions as MathML in the XML syntax defined here. Such an application
would then be a MathML-output-conformant processor as described in <specref
ref="fund_mathmlconf"/>.</p>
</div3>

<div3 id="interf_html">
<head>Mixing MathML and HTML</head>

<p>An important example of a non-XML based system is defined in <bibref ref="HTML5"/>. When
considering MathML in HTML there are two separate issues to consider. Firstly the schema is extended
to allow HTML in <el>mtext</el> as described above in the context of XHTML. Secondly an HTML parser
is used rather than an XML parser. The parsing of MathML by an HTML parser is normatively defined in
<bibref ref="HTML5"/>. The description there is aimed at parser implementers and written in terms of
the state transitions of the parser as it parses each character of the input. The
<emph>non-normative</emph> description below aims to give a higher level description and
examples.</p>

<p>XML parsing is completely regular, any XML document may be parsed without reference to the
particular vocabulary being used. HTML parsing differs in that it is a custom parser for the
HTML vocabulary with specific rules for each element. Similarly to XML though, the HTML parser
distinguishes parsing from validation; some input, even if it renders correctly, is classed as a
<emph>parse error</emph>  which may be reported by validators (but typically is not reported by
rendering systems).</p>
<p> The main differences that affect MathML usage
may be summarized as:</p>
<ulist>
<item><p>Attribute values in most cases do not need to be quoted: <code>&lt;mfenced open=(
close=)></code> would parse correctly.</p></item>
<item><p>End tags may in many cases be omitted.</p></item>
<item><p>HTML does not support namespaces other than the three built in ones for HTML, MathML and SVG, and
does not support namespace prefixes. Thus you can not use a prefix form like <code>&lt;mml:math
xmlns:mml="http://www.w3.org/1998/Math/MathML"></code> and while you may use  <code>&lt;math
xmlns="http://www.w3.org/1998/Math/MathML"></code>, the namespace declaration is essentially ignored
and the input is treated as <code>&lt;math&gt;</code>. In either case the <el>math</el> element and its
descendants are placed in the MathML namespace. As noted in <specref ref="mixing"/> the lack of
namespace support limits some of the possibilities for annotating MathML with markup from other
vocabularies when used in HTML.</p></item>
<item><p>Unlike the XML parser, the HTML parser is defined to accept <emph>any</emph> input string
and produce a defined result (which may be classified as non-conforming. The extreme example
 <code><![CDATA[<math></<><z =5>]]></code>
for example would be flagged as a parse error by validators but would return a tree corresponding to
a math element containing a comment <code>&lt;</code> and an element <code>z</code> with an attribute
that could not be expressed in XML with name <code>=5</code> and value <code>""</code>.</p></item>
<item><p>Unless inside the token elements <el role="starttag">mtext</el>, <el role="starttag">mo</el>, <el role="starttag">mn</el>, <el role="starttag">mi</el>,
<el role="starttag">ms</el>, or inside an <el role="starttag">annotation-xml</el> with <att>encoding</att> attribute
<attval>text/html</attval> or <attval>annotation/xhtml+xml</attval>, the presence of an HTML element
will <emph role="bold">terminate</emph> the math expression by closing all open MathML elements, so
that the HTML element is interpreted as being in the outer HTML context. Any following MathML
elements are then not contained in <el role="starttag">math</el> so will be parsed as invalid HTML elements and not
rendered as MathML. See for example the example given in <specref ref="html_annotation_xml"/>.</p></item>
</ulist>
<p>In the interests of compatibility with existing MathML applications authors and editing systems
<emph>should</emph> use MathML fragments that are well formed XML, even when embedded in an HTML
document. Also as noted above, although applications accepting MathML in HTML documents must accept
MathML making use of these HTML parser features, they should offer a way to export MathML in a
portable XML syntax.</p>
</div3>




<div3 id="interf_link">
<head>Linking</head>

<p>In MathML 3, an element is designated as a link by the presence of
the <att>href</att> attribute.  MathML has no element that corresponds
to the HTML/XHTML anchor element <var>a</var>. </p>

<p>MathML allows the <att>href</att> attribute on all
elements. 
<phrase>However, most user agents have no way
to implement nested links or links on elements with no visible rendering;
such links may have no effect.</phrase>
</p>

<p>The list of presentation markup elements that do not ordinarily
have a visual rendering, and thus should not be used as linking
elements, is given in the table below.

<table  id="table-nolink" width="75%">
<thead>
<tr><td colspan="2">MathML elements that should not be linking elements</td></tr>
</thead>
<tbody>
<tr>
<td><el>mprescripts</el></td>
<td><el>none</el></td>
</tr>
<tr>
<td><el>malignmark</el></td>
<td><el>maligngroup</el></td>
</tr>
</tbody>
</table>
</p>

<p>For compound document formats that support linking mechanisms, the
<att>id</att> attribute should
be used to specify the location for a link into a MathML expression.  The
<att>id</att> attribute is allowed on all MathML elements, and its value
must be unique within a document, making it ideal for this purpose.</p>

<p>Note that MathML 2 has no direct support for linking; it refers to
the W3C Recommendation "XML Linking Language" <bibref ref="XLink"/> in
defining links in compound document contexts by using an <att>xlink:href</att> attribute.
As mentioned above, MathML 3 adds an <att>href</att>
attribute for linking so that <att>xlink:href</att> is no longer needed.
However, <att>xlink:href</att> is still allowed because MathML permits the use of attributes
from non-MathML namespaces. It is recommended that new compound document
formats use the MathML 3 <att>href</att> attribute for linking. When user agents
encounter MathML elements with both <att>href</att> and <att>xlink:href</att> attributes, the
<att>href</att> attribute should take precedence. To support backward
compatibility, user agents that implement XML Linking
in compound documents containing MathML 2 should continue to support
the use of the <att>xlink:href</att> attribute in addition to supporting the <att>href</att> attribute.
</p>

</div3>

<div3 id="interf_graphics"><head>MathML and Graphical Markup</head>

<p>Apart from the introduction of new glyphs, many of the situations
where one might be inclined to use an image amount to displaying
labeled diagrams. For example, knot diagrams, Venn diagrams, Dynkin
diagrams, Feynman diagrams and commutative diagrams all fall into this
category. As such, their content would be better encoded via some
combination of structured graphics and MathML markup.  However, at the
time of this writing, it is beyond the scope of the W3C Math Activity
to define a markup language to encode such a general concept as
<quote>labeled diagrams.</quote> (See <loc
href="http://www.w3.org/Math/">http://www.w3.org/Math</loc> for
current W3C activity in mathematics and <loc
href="http://www.w3.org/Graphics/">http://www.w3.org/Graphics</loc>
for the W3C graphics activity.)</p>

<p>One mechanism for embedding additional graphical content is via the
<el>semantics</el> element, as in the following example:
<eg><![CDATA[<semantics>
  <apply>
    <intersect/>
    <ci>A</ci>
    <ci>B</ci>
  </apply>
  <annotation-xml encoding="image/svg+xml">
    <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 290 180">
      <clipPath id="a">
      <circle cy="90" cx="100" r="60"/>
      </clipPath>
      <circle fill="#AAAAAA" cy="90" cx="190"
              r="60" style="clip-path:url(#a)"/>
      <circle stroke="black" fill="none" cy="90" cx="100" r="60"/>
      <circle stroke="black" fill="none" cy="90" cx="190" r="60"/>
    </svg>
  </annotation-xml>
  <annotation-xml encoding="application/xhtml+xml">
    <img xmlns="http://www.w3.org/1999/xhtml"
         src="intersect.gif" alt="A intersect B"/>
  </annotation-xml>
</semantics>]]></eg>
   Here, the <el>annotation-xml</el> elements are used to indicate alternative
   representations of the MathML-Content depiction of the
   intersection of two sets.
   The first one is in the <quote>Scalable Vector
     Graphics</quote> format <bibref ref="SVG1.1"/>
   (see <bibref ref="XHTML-MathML-SVG"/> for the definition of an XHTML profile integrating MathML and SVG), the second one uses the
   XHTML <el namespace="xhtml">img</el> element embedded as an XHTML fragment.
   In this situation, a MathML processor can use any of these
   representations for display,  perhaps producing a graphical format
   such as the image below.</p>

  <graphic role="display" source="image/intersect.gif" alt="\includegraphics{image/intersect}"/>

  <p>Note that the semantics representation of this example is given
  in  MathML-Content markup, as the first child of the
  <el>semantics</el> element.  In this regard, it is the
  representation most analogous to the <att>alt</att> attribute of the
  <el namespace="xhtml">img</el> element in XHTML, and would likely be
  the best choice for non-visual rendering.</p>
</div3>

</div2>

<div2 id="world-int-style">
<head>Using CSS with MathML</head>

<p>When MathML is rendered in an environment that supports CSS <bibref ref="CSS21"/>,
controlling mathematics style properties with a CSS style sheet is desirable,
but not as simple as it might first appear, because the formatting of MathML layout schemata
is quite different from the CSS visual formatting model and many of the style parameters that affect
mathematics layout have no direct textual analogs.
Even in cases where there are analogous properties, the sensible values for
these properties may not correspond. 
Because of this difference, applications that support MathML natively may choose to 
restrict the CSS properties applicable to MathML layout schemata to those 
properties that do not affect layout.
</p>

<p>Generally speaking, the model for CSS interaction with the math
style attributes runs as follows.  A CSS style sheet might provide a style
rule such as:</p>

<eg><![CDATA[
math *.[mathsize="small"] {
  font-size: 80%
}
]]></eg>

<p>This rule sets the CSS font-size <phrase>property</phrase> for all children of the
<el>math</el> element that have the <att>mathsize</att> attribute set to small.  
A MathML renderer
would then query the style engine for the CSS environment, and use the
values returned as input to its own layout algorithms.  MathML does
not specify the mechanism by which style information is inherited from
the environment.  However, some suggested rendering rules for the
interaction between properties of the ambient style environment and
MathML-specific rendering rules are discussed in <specref
ref="presm_commatt"/>, and more generally throughout <specref
ref="presm"/>.</p>

<p>It should be stressed, however, that some caution is required in
writing CSS stylesheets for MathML.  Because changing typographic
properties of mathematics symbols can change the meaning of an equation,
stylesheets should be written in a way such that changes to document-wide
typographic styles do not affect embedded MathML expressions.</p>

<p>Another pitfall to be avoided is using CSS to provide
typographic style information necessary to the proper understanding of
an expression.
Expressions dependent on CSS for meaning will not be
portable to non-CSS environments such as computer algebra systems.  By
using the logical values of the new MathML 3.0 mathematics style attributes
as selectors for CSS rules, it can be assured that style information
necessary to the sense of an expression is encoded directly in the
MathML.</p>

<p>MathML 3.0 does not specify how a user agent should process style
information, because there are many non-CSS MathML environments, and
because different users agents and renderers have widely varying
degrees of access to CSS information.</p>


<div3>
<head>Order of processing attributes versus style sheets</head>

<p>CSS or analogous style sheets can specify changes to rendering
properties of selected MathML elements.  Since rendering properties
can also be changed by attributes on an element, or be changed
automatically by the renderer, it is necessary to specify the order in
which changes requested by various sources should occur.
The order is defined by <bibref ref="CSS21"/> cascading order taking into account 
precedence of non-CSS presentational hints.
</p>


</div3>



</div2>




</div1>

<!-- LocalWords:  xml RegisterClipboardFormat schemaLocation UTF BOM src prolog
-->
<!-- LocalWords:  mfrac maction href mprescripts malignmark maligngroup xlink
-->
<!-- LocalWords:  Dynkin img mathsize
-->
