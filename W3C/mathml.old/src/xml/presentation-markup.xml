<div1 id="presm" role="chapter3"><head>Presentation Markup</head>
<!-- $Id: presentation-markup.xml,v 1.386 2014-11-21 21:54:37 dcarlis Exp $ -->

<!-- 
Principal Authors
Neil Soiffer: overall design; organization and original text of documentation.
Bruce Smith: most precise details of design and documentation;
much additional text of documentation.

Contributors
Robert Miner: original <mfenced> and <maction> designs.
Paul Topping: original alignment element design.
Various members of the W3C Math WG: various design details.

Editors
Patrick Ion & Robert Miner.
-->

<div2 id="presm_intro"><head>Introduction</head>

<p>This chapter specifies the <quote>presentation</quote> elements of
MathML, which can be used to describe the layout structure of mathematical
notation.</p>

<div3><head>What Presentation Elements Represent</head>

<p>Presentation elements correspond to the <quote>constructors</quote>
of traditional mathematical notation &#x2014;  that is, to the basic
kinds of symbols and expression-building structures out of which any
particular piece of traditional mathematical notation is built.
Because of the importance of traditional visual notation, the
descriptions of the notational constructs the elements represent are
usually given here in visual terms.  However, the elements are
medium-independent in the sense that they have been designed to
contain enough information for good spoken renderings as well.  Some
attributes of these elements may make sense only for visual media, but
most attributes can be treated in an analogous way in audio as well
(for example, by a correspondence between time duration and horizontal
extent).</p>

<p>MathML presentation elements only suggest (i.e. do not require)
specific ways of rendering in order to allow for medium-dependent
rendering and for individual preferences of style.  This specification
describes suggested visual rendering rules in some detail, but a
particular MathML renderer is free to use its own rules as long as its
renderings are intelligible.</p>

<p>The presentation elements are meant to express the syntactic
structure of mathematical notation in much the same way as titles, sections,
and paragraphs capture the higher-level syntactic structure of a
textual document. Because of this, a single row of identifiers and operators
will often be represented by multiple nested <el>mrow</el> elements rather than
a single <el>mrow</el>.  For example, <quote><var>x</var> + <var>a</var> /
<var>b</var></quote> typically is represented as:
<eg role="mathml"><![CDATA[
<mrow>
  <mi> x </mi>
  <mo> + </mo>
  <mrow>
    <mi> a </mi>
    <mo> / </mo>
    <mi> b </mi>
  </mrow>
</mrow>
]]></eg>
</p>

<p>Similarly, superscripts are attached to the full expression constituting 
their base rather than to the just preceding character.  This
structure permits better-quality rendering of mathematics, especially when
details of the rendering environment, such as display widths, are not
known ahead of time to the document author. It also greatly eases automatic
interpretation of the represented mathematical structures.</p>

<p>Certain characters are used
to name identifiers or operators that in traditional notation render the
same as other symbols or usually rendered invisibly.  For example, the entities
<kw role="entity">DifferentialD</kw>, <kw role="entity">ExponentialE</kw>, and 
<kw role="entity">ImaginaryI</kw> denote notational symbols semantically distinct from visually 
identical letters used as simple variables.
Likewise, the entities
<kw role="entity">InvisibleTimes</kw>, 
<kw role="entity">ApplyFunction</kw>, 
<kw role="entity">InvisibleComma</kw> <phrase>and the character U+2064 
(INVISIBLE PLUS)</phrase> usually render invisibly but represent significant information.  
These entities have distinct spoken renderings, may influence visual linebreaking and spacing,
and may effect the evaluation or meaning of particular expressions.
Accordingly, authors should use these entities wherever they are applicable.
For instance, the expression represented visually as
<quote><var>f</var>(<var>x</var>)</quote> would usually be spoken in English as
<quote><var>f</var> of <var>x</var></quote> rather than just
<quote><var>f</var> <var>x</var></quote>.  MathML conveys this meaning by using 
the <kw role="entity">ApplyFunction</kw> operator after the
<quote><var>f</var></quote>, which, in this case, can be aurally rendered as
<quote>of</quote>.</p>

<p>The complete list of MathML entities is described in <bibref ref="Entities"/>.</p>
</div3>

<div3><head>Terminology Used In This Chapter</head>


<p>It is strongly recommended that, before reading the present
chapter, one read <specref ref="fund_syntax"/> on MathML syntax and
grammar, which contains important information on MathML notations and
conventions.  In particular, in this chapter it is assumed that the
reader has an understanding of basic XML terminology described in
<specref ref="fund_xmlsyntax"/>, and the attribute value notations and
conventions described in <specref ref="fund_attval"/>.</p>

<p>The remainder of this section introduces MathML-specific
terminology and conventions used in this chapter.</p>

<div4><head>Types of presentation elements</head>

<p>The presentation elements are divided into two classes.
<intref ref="presm_tokel"><emph>Token elements</emph></intref>
represent individual symbols, names, numbers, labels, etc. 
<emph>Layout schemata</emph> build expressions out of parts and can have
only elements as content (except for whitespace, which they ignore).
These are subdivided into 
<intref ref="presm_genlayout">General Layout</intref>,
<intref ref="presm_scrlim">Script and Limit</intref>,
<intref ref="presm_tabmat">Tabular Math</intref> and
<intref ref="presm_elementary">Elementary Math</intref> schemata.
 There
are also a few empty elements used only in conjunction with certain layout
schemata.</p>

<p>All individual <quote>symbols</quote> in a mathematical expression should be
represented by MathML token elements. The primary MathML token element
types are identifiers (e.g. variables or function names), numbers, and
operators (including fences, such as parentheses, and separators, such
as commas). There are also token elements used to represent text or
whitespace that has more aesthetic than mathematical significance
and other elements representing <quote>string literals</quote> for compatibility with
computer algebra systems. Note that although a token element
represents a single meaningful <quote>symbol</quote> (name, number, label,
mathematical symbol, etc.), such symbols may be comprised of more than
one character.  For example <code>sin</code> and <code>24</code> are
represented by the single tokens <code>&lt;mi&gt;sin&lt;/mi&gt;</code>
and <code>&lt;mn&gt;24&lt;/mn&gt;</code> respectively.</p>

<p>In traditional mathematical notation, expressions are recursively
constructed out of smaller expressions, and ultimately out of single
symbols, with the parts grouped and positioned using one of a small
set of notational structures, which can be thought of as <quote>expression
constructors</quote>. In MathML, expressions are constructed in the same way,
with the layout schemata playing the role of the expression
constructors. The layout schemata specify the way in which
sub-expressions are built into larger expressions. The terminology
derives from the fact that each layout schema corresponds to a
different way of <quote>laying out</quote> its sub-expressions to form a larger
expression in traditional mathematical typesetting.</p>
</div4>

<div4><head>Terminology for other classes of elements and their relationships</head>

<p>The terminology used in this chapter for special classes of elements, and for
relationships between elements, is as follows: The <emph>presentation elements</emph> are
the MathML elements defined in this chapter.
These elements are listed in <specref ref="presm_summary"/>.
The <emph>content elements</emph> are the MathML elements defined
in <specref ref="contm"/>.</p>

<p>A MathML <emph>expression</emph> is a single instance of any of the
presentation elements with the exception of the empty elements
<el>none</el> or <el>mprescripts</el>,
or is a single instance of any of the content elements which are allowed as
content of presentation elements (described in <specref ref="mixing_cminpm"/>).
A <emph>sub-expression</emph> of an expression
<var>E</var> is any MathML expression that is part of the content of
<var>E</var>, whether <emph>directly</emph> or <emph>indirectly</emph>,
i.e. whether it is a <quote>child</quote> of <var>E</var> or not.</p>

<p>Since layout schemata attach special meaning to the number and/or
positions of their children, a child of a layout schema is also called
an <emph>argument</emph> of that element.  As a consequence of the
above definitions, the content of a layout schema consists exactly of
a sequence of zero or more elements that are its
arguments. </p> 
</div4> 
</div3>

<div3 id="presm_reqarg"><head>Required Arguments</head>

<p>Many of the elements described herein require a specific number of
arguments (always 1, 2, or 3).  In the detailed descriptions of
element syntax given below, the number of required arguments is
implicitly indicated by giving names for the arguments at various
positions.  A few elements have additional requirements on the number
or type of arguments, which are described with the individual
element. For example, some elements accept sequences of zero or more
arguments &#x2014; that is, they are allowed to occur with no arguments
at all.</p>

<p>Note that MathML elements encoding rendered space <emph>do</emph>
count as arguments of the elements in which they appear.
See <specref ref="presm_mspace"/> for a discussion of the proper use of such
space-like elements.</p>

<div4 id="presm_inferredmrow"><head>Inferred <el role="starttag">mrow</el>s</head>

<p>The elements listed in the following table as requiring 1*
argument (<el>msqrt</el>, <el>mstyle</el>, <el>merror</el>,
 <el>mpadded</el>, <el>mphantom</el>, <el>menclose</el>,
<el>mtd</el>, <el>mscarry</el>,
and <el>math</el>) 
conceptually accept a single argument,
but actually accept any number of children.
If the number of children is 0 or is more than 1, they treat their contents
as a single <emph>inferred</emph> <el>mrow</el> formed from all their children,
and treat this <el>mrow</el> as the argument.
</p>

<p>For example,
<eg role="mathml-fragment"><![CDATA[
<mtd>
</mtd>
]]></eg>
is treated as if it were
<eg role="mathml-fragment"><![CDATA[
<mtd>
  <mrow>
  </mrow>
</mtd>
]]></eg>
and
<eg role="mathml"><![CDATA[
<msqrt>
  <mo> - </mo>
  <mn> 1 </mn>
</msqrt>
]]></eg>
is treated as if it were
<eg role="mathml"><![CDATA[
<msqrt>
  <mrow>
    <mo> - </mo>
    <mn> 1 </mn>
  </mrow>
</msqrt>
]]></eg>
</p>

<p>This feature allows MathML data not to contain (and its authors to
leave out)  many <el>mrow</el> elements that would otherwise be
necessary.</p>
</div4>

<div4><head>Table of argument requirements</head>

<p>For convenience, here is a table of each element's argument count
requirements and the roles of individual arguments when these are
distinguished.  An argument count of 1* indicates an inferred <el>mrow</el> as described above. 
Although the <el>math</el> element is
not a presentation element, it is listed below for completeness.
<table id="presm_table-reqarg" border="1">
<thead>
<tr>
<td>Element</td>
<td>Required argument count</td>
<td>Argument roles (when these differ by position)</td>
</tr>
</thead>
<tbody>
<tr>
<td><intref ref="presm_mrow"><el>mrow</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mfrac"><el>mfrac</el></intref></td> 
<td>2</td>
<td><emph>numerator</emph> <emph>denominator</emph></td>
</tr>
<tr>
<td><intref ref="presm_mroot"><el>msqrt</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mroot"><el>mroot</el></intref></td> 
<td>2</td>
<td><emph>base</emph> <emph>index</emph></td>
</tr>
<tr>
<td><intref ref="presm_mstyle"><el>mstyle</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_merror"><el>merror</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mpadded"><el>mpadded</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mphantom"><el>mphantom</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mfenced"><el>mfenced</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_menclose"><el>menclose</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_msub"><el>msub</el></intref></td> 
<td>2</td>
<td><emph>base</emph> <emph>subscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_msup"><el>msup</el></intref></td> 
<td>2</td>
<td><emph>base</emph> <emph>superscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_msubsup"><el>msubsup</el></intref></td> 
<td>3</td>
<td><emph>base</emph> <emph>subscript</emph> <emph>superscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_munder"><el>munder</el></intref></td> 
<td>2</td>
<td><emph>base</emph> <emph>underscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_mover"><el>mover</el></intref></td> 
<td>2</td>
<td><emph>base</emph> <emph>overscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_munderover"><el>munderover</el></intref></td> 
<td>3</td>
<td><emph>base</emph> <emph>underscript</emph> <emph>overscript</emph></td>
</tr>
<tr>
<td><intref ref="presm_mmultiscripts"><el>mmultiscripts</el></intref></td> 
<td>1 or more</td>
<td><emph>base</emph>
    (<emph>subscript</emph> <emph>superscript</emph>)*
    [<el role="emptytag">mprescripts</el>
     (<emph>presubscript</emph> <emph>presuperscript</emph>)*]</td>
</tr>
<tr>
<td><intref ref="presm_mtable"><el>mtable</el></intref></td> 
<td>0 or more rows</td>
<td>0 or more <el>mtr</el> or <el>mlabeledtr</el> elements</td> 
</tr>
<tr>
<td><intref ref="presm_mlabeledtr"><el>mlabeledtr</el></intref></td> 
<td>1 or more</td>
<td>a label and 0 or more <el>mtd</el> elements</td>
</tr>
<tr>
<td><intref ref="presm_mtr"><el>mtr</el></intref></td> 
<td>0 or more</td>
<td>0 or more <el>mtd</el> elements</td>
</tr>
<tr>
<td><intref ref="presm_mtd"><el>mtd</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mstack"><el>mstack</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mlongdiv"><el>mlongdiv</el></intref></td> 
<td>3 or more</td>
<td><emph>divisor</emph> <emph>result</emph>  <emph>dividend</emph> (<emph>msrow</emph> |
    <emph>msgroup</emph> | <emph>mscarries</emph> | <emph>msline</emph>)*</td>
</tr>
<tr>
<td><intref ref="presm_msgroup"><el>msgroup</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_msrow"><el>msrow</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mscarries"><el>mscarries</el></intref></td> 
<td>0 or more</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_mscarry"><el>mscarry</el></intref></td> 
<td>1*</td>
<td/>
</tr>
<tr>
<td><intref ref="presm_maction"><el>maction</el></intref></td> 
<td>1 or more</td>
<td>depend on <att>actiontype</att> attribute</td>
</tr>
<tr>
<td><intref ref="interf_toplevel"><el>math</el></intref></td> 
<td>1*</td>
<td/>
</tr>
</tbody>
</table>
</p>
</div4>
</div3>

<div3><head>Elements with Special Behaviors</head>

<p>Certain MathML presentation elements exhibit special behaviors in
certain contexts. Such special behaviors are discussed in the
detailed element descriptions below. However, for convenience, some
of the most important classes of special behavior are listed here.</p>

<p>Certain elements are considered space-like; these are defined in
<specref ref="presm_mspace"/>. This definition affects some of the suggested rendering
rules for <el>mo</el> elements (<specref ref="presm_mo"/>).</p>

<p>Certain elements, e.g. <el>msup</el>, are able to
embellish operators that are their first argument. These elements are
listed in <specref ref="presm_mo"/>, which precisely defines an <quote>embellished
operator</quote> and explains how this affects the suggested rendering rules
for stretchy operators.</p>

</div3>

<div3 id="presm_bidi"><head>Directionality</head>

<p>
In the notations familiar to most readers,
both the overall layout and the textual symbols are arranged
from left to right (LTR).  Yet, as alluded to in the introduction,
mathematics written in Hebrew or in locales such
as  Morocco or Persia, the overall layout is used unchanged, but
the embedded symbols (often Hebrew or Arabic) are written right to left (RTL).
Moreover, in most of the Arabic speaking world, the notation
is arranged entirely RTL; thus a superscript is still raised,
but it follows the base on the left rather than the right.</p>

<p>MathML 3.0 therefore recognizes two distinct directionalities:
the directionality of the text and symbols within token elements
and the overall directionality represented by Layout Schemata.
These two facets are discussed below.</p>

<div4 id="presm_bidi_math"><head>Overall Directionality of Mathematics Formulas</head>

<p>
The overall directionality for a formula, basically
the direction of the Layout Schemata, is specified by
the <att>dir</att> attribute on the containing <el>math</el> element
(see <specref ref="interf_toplevel"/>).
The default is <att>ltr</att>.  When <att>dir</att>=<attval>rtl</attval>
is used, the layout is simply the mirror image of the conventional
European layout.  That is, shifts up or down are unchanged,
but the progression in laying out is from right to left.</p>
<p>For example, in a RTL layout, sub- and superscripts appear to the left of the base;
the surd for a root appears at the right, with the bar continuing over
the base to the left.
The layout details for elements whose behaviour depends on directionality
are given in the discussion of the element.  In those discussions, the
terms leading and trailing are used to specify a side of an object
when which side to use depends on the directionality; ie. leading
means left in LTR but right in RTL.
The terms left and right may otherwise be safely assumed to mean left and right.
</p>

<p>
The overall directionality is usually set on the <el>math</el>, but
may also be switched for individual subformula by using the <att>dir</att>
attribute on <el>mrow</el> or <el>mstyle</el> elements.
When not specified, all elements inherit the directionality of their container.
</p>
</div4>

<div4 id="presm_bidi_token"><head>Bidirectional Layout in Token Elements</head>

<p>The text directionality comes into play for the MathML token elements
that can contain text (<el>mtext</el>, <el>mo</el>, <el>mi</el>, <el>mn</el>
and <el>ms</el>) and is determined by the Unicode properties of that text.
A token element containing exclusively LTR or RTL characters
is displayed straightforwardly in the given direction.
When a mixture of directions is involved used, such as RTL Arabic
and LTR numbers, the Unicode bidirectional algorithm <bibref ref="Bidi"/>
is applied.  This algorithm specifies how runs of characters
with the same direction are processed and how the runs are (re)ordered.
The base, or initial, direction is given by the overall directionality
described above (<specref ref="presm_bidi_math"/>) and affects
how weakly directional characters are treated and how runs are nested.
(The <att>dir</att> <phrase>attribute</phrase> is thus allowed on token elements to specify
the initial directionality that may be needed in rare cases.)
Any <el>mglyph</el> or <el>malignmark</el> elements appearing within
a token element are effectively <emph>neutral</emph> and have no effect
on ordering.</p>

<p>The important thing to notice is that the bidirectional algorithm
is applied independently to the contents of each token element;
each token element is an independent run of characters.
</p>

<p>Other features of Unicode and scripts that should be respected
are &#x2018;mirroring&#x2019; and &#x2018;glyph shaping&#x2019;.
Some Unicode characters are marked as being mirrored when presented in a RTL context;
that is, the character is drawn as if it were mirrored or replaced by a corresponding character.
Thus an opening parenthesis, &#x2018;(&#x2019;, in RTL will display as &#x2018;)&#x2019;.
Conversely, the solidus (/ U+002F) is <emph>not</emph> marked
as mirrored. Thus, an Arabic author that desires the slash to be reversed
in an inline division should explicitly use reverse solidus (\ U+005C)
or an alternative such as the mirroring DIVISION SLASH (U+2215).</p>

<p>Additionally, calligraphic scripts such as Arabic blend, or connect
sequences of characters together, changing their appearance.
As this can have an significant impact on readability, as well as aesthetics,
it is important to apply such shaping if possible.  Glyph shaping,
like directionality, applies to each token element's contents individually.</p>

<issue role="closed" id="bidi-unicode-properties">
    <head>Check Unicode additions and properties for bidirectionality</head>
    <p>We need to check on the status of various characters added to support
Arabic, and also check that the directionality and mirroring properties are correct.
(e.g. summation and similar)</p> 
</issue>

<p>Please note that for the transfinite cardinals represented
by Hebrew characters, the code points U+2135-U+2138 (ALEF SYMBOL,
BET SYMBOL, GIMEL SYMBOL, DALET SYMBOL) should be used.
These are strong left-to-right.</p>
</div4>

</div3>

<div3 id="presm_scriptlevel"><head>Displaystyle and Scriptlevel</head>

<p>So-called &#x2018;displayed&#x2019; formulas, those appearing on a line by themselves,
typically make more generous use of vertical space than inline formulas,
which should blend into the adjacent text without intruding into
neighboring lines. For example, in a displayed summation, the limits
are placed above and below the summation symbol, while when it appears inline
the limits would appear in the sub and superscript position.
For similar reasons, sub- and superscripts,
nested fractions and other constructs typically display in a
smaller size than the main part of the formula.
MathML implicitly associates with every presentation node
a <att>displaystyle</att> and <att>scriptlevel</att> reflecting whether
a more expansive vertical layout applies and the level of scripting
in the current context.  </p>

<p>These values are 
initialized by the <intref ref="interf_toplevel"><el>math</el></intref> element
according to the <att>display</att> attribute.
They are automatically adjusted by the 
various <intref ref="presm_scrlim">script and limit schemata</intref> elements,
and the elements
<intref ref="presm_mfrac"><el>mfrac</el></intref> and
<intref ref="presm_mroot"><el>mroot</el></intref>, 
which typically set <att>displaystyle</att> false and increment <att>scriptlevel</att>
for some or all of their arguments.
(See the description for each element for the specific rules used.)
They also may be set explicitly via the <att>displaystyle</att> and <att>scriptlevel</att>
attributes on the <intref ref="presm_mstyle"><el>mstyle</el></intref> element
or the <att>displaystyle</att> attribute of <intref ref="presm_mtable"><el>mtable</el></intref>.
In all other cases, they are inherited from the node's parent.</p>

<p>The <att>displaystyle</att> affects the amount of vertical space used to lay out a formula: 
when true, the more spacious layout of displayed equations is used,
whereas when false a more compact layout of inline formula is used.
This primarily affects the interpretation
of the <att>largeop</att> and <att>movablelimits</att> attributes of
the <intref ref="presm_mo"><el>mo</el></intref> element.
However, more sophisticated renderers are free to use
this attribute to render more or less compactly.
</p>

<p>The main effect of <att>scriptlevel</att> is to control the font size.
Typically, the higher the <att>scriptlevel</att>, the smaller the font size.
(Non-visual renderers can respond to the font size in an analogous way for their medium.)
Whenever the <att>scriptlevel</att> is changed, whether automatically or explicitly,
the current font size is multiplied by the value of
<att>scriptsizemultiplier</att> to the power of the <emph>change</emph> in <att>scriptlevel</att>.
However, changes to the font size due to <att>scriptlevel</att> changes should
never reduce the size below <att>scriptminsize</att> to prevent scripts
becoming unreadably small.
The default <att>scriptsizemultiplier</att> is approximately the square root of 1/2
whereas <att>scriptminsize</att> defaults to 8 points;
these values may be changed on <el>mstyle</el>; see  <specref ref="presm_mstyle"/>.
Note that the <att>scriptlevel</att> attribute of <el>mstyle</el> allows arbitrary
values of <att>scriptlevel</att> to be obtained, including negative values which
result in increased font sizes.
</p>

<p>The changes to the font size due to <att>scriptlevel</att> should be viewed
as being imposed from &#x2018;outside&#x2019; the node.
This means that the effect of <att>scriptlevel</att> is applied 
before an explicit <att>mathsize</att> (see <specref ref="presm_commatt"/>)
on a token child of <el>mfrac</el>.
Thus, the <att>mathsize</att>  effectively overrides the effect of <att>scriptlevel</att>.
However, that change to <att>scriptlevel</att> changes the current font size,
which affects the meaning of an <attval>em</attval> length
(see <specref ref="fund_units"/>)
and so the <att>scriptlevel</att> still may have an effect in such cases.
Note also that since <att>mathsize</att> is not constrained by <att>scriptminsize</att>,
such direct changes to font size can result in scripts smaller than <att>scriptminsize</att>.
</p>

<p>Note that direct changes to current font size, whether by
CSS or by the <att>mathsize</att> attribute (See <specref ref="presm_commatt"/>),
have no effect on the value of <att>scriptlevel</att>.
</p>

<p>T<sub>E</sub>X's \displaystyle, \textstyle, \scriptstyle, and \scriptscriptstyle 
correspond to  <att>displaystyle</att> and <att>scriptlevel</att>
as
<attval>true</attval> and <attval>0</attval>,
<attval>false</attval> and <attval>0</attval>,
<attval>false</attval> and <attval>1</attval>,
and <attval>false</attval> and <attval>2</attval>, respectively.
Thus,  <intref ref="interf_toplevel"><el>math</el></intref>'s
<att>display</att>=<attval>block</attval> corresponds to \displaystyle,
while <att>display</att>=<attval>inline</attval> corresponds to \textstyle.
</p>

</div3>

<div3 id="presm_linebreaking"><head>Linebreaking of Expressions</head>
<div4><head>Control of Linebreaks</head>
<p>MathML provides support for both automatic and manual (forced)
linebreaking of  expressions to break excessively long
expressions into several lines. 
All such linebreaks take place within <el>mrow</el>
(including inferred <el>mrow</el>; see <specref ref="presm_inferredmrow"/>)
or <el>mfenced</el>.
<phrase>The breaks typically take place at <el>mo</el> elements
and also, for backwards compatibility, at <el>mspace</el>.</phrase>
<phrase>Renderers may also choose to place automatic linebreaks at other points
such as between adjacent <el>mi</el> elements or even within a token element
such as a very long <el>mn</el> element. MathML does not provide a means to
specify such linebreaks, but if a render chooses to linebreak at such a point,
it should indent the following line according to the
<intref ref="presm_lbindent_attrs">indentation attributes</intref>
that are in effect at that point.</phrase>
</p>
<p>
Automatic linebreaking occurs when the containing <el>math</el> element
has <att>overflow</att>=<attval>linebreak</attval>
and the display engine determines that there is not enough space available to
display the entire formula.  The available width must therefore be known
to the renderer. Like font properties, one is assumed to be inherited from the environment in
which the MathML element lives. If no width can be determined, an
infinite width should be assumed. Inside of a <el>mtable</el>,
each column has some width. This width may be specified as an attribute
or determined by the contents. This width should be used as the
line wrapping width for linebreaking, and each entry in an <el>mtable</el>
is linewrapped as needed. </p>

<p>Forced linebreaks are specified by using
<att>linebreak</att>=<attval>newline</attval>
on a <el>mo</el> or <el>mspace</el> element.
Both automatic and manual linebreaking can occur within the same formula.
</p>

<p>Automatic linebreaking of subexpressions of <el>mfrac</el>, <el>msqrt</el>, <el>mroot</el>
and <el>menclose</el> and the various script elements is not required.
Renderers are free to ignore forced breaks within those elements if they choose.</p>

<p>Attributes on <el>mo</el> and possibly on <el>mspace</el> elements control
linebreaking and indentation of the following line. The aspects of linebreaking
that can be controlled are:</p>
<ulist>
<item><p><emph>Where</emph> &#x2014; attributes determine the desirability of
  a linebreak at a specific operator or space, in particular whether a
  break is required or inhibited.  These can only be set on
 <el>mo</el> and <el>mspace</el> elements.
 (See <specref ref="presm_lbattrs"/>.)</p>
</item>
<item><p><emph>Operator Display/Position</emph> &#x2014; when a linebreak occurs,
  determines whether the operator will appear
  at the end of the line, at the beginning of the next line, or in both positions;
  and how much vertical space should be added after the linebreak.
  These attributes can be set on <el>mo</el> elements or inherited from
  <el>mstyle</el> or  <el>math</el> elements.
 (See <specref ref="presm_lbattrs"/>.)</p></item>
<item><p><emph>Indentation</emph> &#x2014; determines the indentation of the
  line following a linebreak, including indenting so that the next line aligns
  with some point in a previous line.
  These attributes can be set on <el>mo</el> elements or
  inherited from <el>mstyle</el> or <el>math</el> elements.
  (See <specref ref="presm_lbindent_attrs"/>.)
</p></item>
</ulist>
<p>
When a math element appears in an inline context, it may obey whatever paragraph flow rules
are employed by the document's text rendering engine.
Such rules are necessarily outside of the scope of this specification.
Alternatively, it may use the value of the <el>math</el> element's overflow attribute.
(See <specref ref="interf_toplevel_atts"/>.)
</p>

</div4>
<div4 id="presm_lbalgorithm"><head>Automatic Linebreaking Algorithm (Informative)</head>

<p>One method of linebreaking that works reasonably well is sometimes referred
to as a "best-fit" algorithm. It works by computing a "penalty" for
each potential break point on a line. The break point with the smallest
penalty is chosen and the algorithm then works on the next line. Three
useful factors in a penalty calculation are:
<olist>
<item><p>How much of the line width (after subtracting of the indent) is unused?
The more unused, the higher the penalty. </p></item>
<item><p>How deeply nested is the breakpoint in the expression tree? The expression
tree's depth is roughly similar to the nesting depth of <el>mrow</el>s.
The more deeply nested the break point, the higher the penalty. </p></item>
<item><p>Does a linebreak here make layout of the next line difficult?
If the next line is not the last line and if the indentingstyle uses
information about the linebreak point to determine how much to indent,
then the amount of room left for linebreaking on the next line must be considered;
i.e., linebreaks that leave very little room to draw the next line
result in a higher penalty.</p></item>
<item><p>Whether <attval>linebreak</attval> has been specified:
<attval>nobreak</attval> effectively sets the penalty to infinity,
<attval>badbreak</attval> increases the penalty
<attval>goodbreak</attval> decreases the penalty,
and <attval>newline</attval> effectively sets the penalty to 0.</p></item>
</olist></p>
<p>This algorithm takes time proportional to the number of token elements times the number of lines.</p>
</div4>
<div4 id="presm_inline_lbalgorithm">
<head>Linebreaking Algorithm for Inline Expressions (Informative)</head>
<p>
A common method for breaking inline expressions that are too long for the
space remaining on the current line is to pick an appropriate break point
for the expression and place the expression up to that point on the current line
and place the remainder of the expression on the following line.
This can be done by:
<olist>
<item><p>Querying the text processing engine for the
minimum and maximum amount of space available on the current line. </p></item>
<item><p>Using a variation of the automatic linebreaking algorithm
given <intref ref="presm_lbalgorithm">above</intref>),
and/or using hints provided by <intref ref="presm_lbattrs">linebreak attributes</intref>
on <el>mo</el> or <el>mspace</el> elements, to choose a line break.
The goal is that the first part of the formula fits "comfortably" on the current line
while breaking at a point that results in keeping related
parts of an expression on the same line. </p></item>
<item><p>The remainder of the formula begins on the next line,
positioned both vertically and horizontally according
to the paragraph flow;
MathML's <intref ref="presm_lbindent_attrs">indentation attributes</intref>
are ignored in this algorithm.</p></item>
<item><p>If the remainder does not fit on a line,
steps 1 - 3 are repeated for the second and subsequent lines.
Unlike the for the first line,
some part of the expression must be placed these lines so that the algorithm terminates.</p></item>
</olist></p>

</div4>

</div3>
<div3 id="presm_warnfinetuning"><head>Warning about fine-tuning of presentation</head>
<p>Some use-cases require precise control of the math layout and presentation.  
Several MathML elements and attributes expressly support such fine-tuning of the 
rendering.  However, MathML rendering agents exhibit wide variability in their 
presentation of the the same MathML expression due to difference in platforms, 
font availability, and requirements particular to the agent itself
(see <specref ref="presm_intro"/>).  
The overuse of explicit rendering control may yield a &#x2018;perfect&#x2019; layout on one platform,
but give much worse presentation on others.
The following sections clarify the kinds of problems that can occur.</p>

<div4 id="presm_warntweaking"><head>Warning: non-portability of <quote>tweaking</quote></head>

<p>For particular expressions, authors may be tempted to use the 
<intref ref="presm_mpadded"><el>mpadded</el></intref>,
<intref ref="presm_mspace"><el>mspace</el></intref>,
<intref ref="presm_mphantom"><el>mphantom</el></intref>, and
<intref ref="presm_mtext"><el>mtext</el></intref> elements to improve 
(<quote>tweak</quote>) the spacing generated by a specific renderer.</p>

<p>Without explicit spacing rules, various MathML renders may use different spacing 
algorithms.  Consequently, different MathML renderers may position symbols in different 
locations relative to each other.  Say that renderer B, for example, provides improved 
spacing for a particular expression over renderer A.  Authors are strongly warned that 
<quote>tweaking</quote> the layout for renderer A may produce very poor results in renderer B, 
very likely worse than without any explicit adjustment at all.</p>

<p>Even when a specific choice of renderer can be assumed, its spacing
rules may be improved in successive versions, so that the effect of
tweaking in a given MathML document may grow worse with time. Also,
when style sheet mechanisms are extended to MathML, even one version
of a renderer may use different spacing rules for users with different
style sheets.</p>

<p>Therefore, it is suggested that MathML markup never use
<el>mpadded</el> or <el>mspace</el> elements
to tweak the rendering of specific expressions, unless the MathML is
generated solely to be viewed using one specific version of one MathML
renderer, using one specific style sheet (if style sheets are
available in that renderer).</p>

<p>In cases where the temptation to improve spacing proves too strong,
careful use of <el>mpadded</el>,
<el>mphantom</el>, or the alignment elements (<specref ref="presm_malign"/>) may give more portable results than the
direct insertion of extra space using <el>mspace</el> or
<el>mtext</el>. Advice given to the implementers of MathML
renderers might be still more productive, in the long run.</p>
</div4>

<div4 id="presm_warnspacing"><head>Warning: spacing should not be used to convey meaning</head>

<p>MathML elements that permit <quote>negative spacing</quote>, namely
<el>mspace</el>, <el>mpadded</el>, and
<el>mo</el>, could in theory be used to simulate new
notations or <quote>overstruck</quote> characters by the visual overlap of the
renderings of more than one MathML sub-expression.</p>

<p>This practice is <emph>strongly discouraged in all situations</emph>,
for the following reasons:
<ulist>
<item><p>it will give different results in different MathML renderers
(so the warning about <quote>tweaking</quote> applies)<phrase>, especially
if attempts are made to render glyphs outside the bounding box of
the MathML expression</phrase>;
</p>
</item>

<item><p>it is likely to appear much worse than a more standard construct
supported by good renderers;</p>
</item>

<item><p>such expressions are almost certain to be uninterpretable
by audio renderers, computer algebra systems,
text searches for standard symbols,
or other processors of MathML input.</p>
</item>

</ulist>
</p>

<p>More generally, any construct that uses spacing to convey
mathematical meaning, rather than simply as an aid to viewing
expression structure, is discouraged. That is, the constructs that
are discouraged are those that would be interpreted differently by a
human viewer of rendered MathML if all explicit spacing was
removed.</p>

<p>Consider using the <intref ref="presm_mglyph"><el>mglyph</el></intref> element
for cases such as this.  If such spacing constructs are used in spite of this warning, they should
be enclosed in a <el>semantics</el> element that also
provides an additional MathML expression that can be interpreted in a
standard way. See <specref ref="mixing_semantic_annotations"/> for further discussion.
</p>

<!-- Why give examples of what people shouldn't do?
<issue role="closed" id="mpadded-advancewidth">
    <head><el>mpadded</el> advancewidth</head>
    <p>The following examples use advancewidth.</p>
</issue>
<p>For example, the MathML expression
<eg role="mathml"><![CDATA[
<mrow>
  <mi> C </mi>
  <mpadded lspace="+.5em" advancewidth="0em">
    <mtext> | </mtext>
  </mpadded>
</mrow>
]]></eg>
</p>

<p>forms an overstruck symbol in violation of the policy stated above;
it might be intended to represent the set of complex numbers for a
MathML renderer that lacks support for the standard symbol used for
this purpose. This kind of construct should always be avoided in
MathML, for the reasons stated above; indeed, it should never be
necessary for standard symbols, since a MathML renderer with no better
method of rendering them is free to use overstriking internally, so
that it can still support general MathML input.</p>

<p>However, if for whatever reason such a construct is used in MathML,
it should always be enclosed in a <el>semantics</el> element such as
<eg role="mathml"><![CDATA[
<semantics>
    <mrow>
      <mi> C </mi>
        <mpadded lspace="+.5em" advancewidth="0em">
        <mtext> | </mtext>
      </mpadded>
    </mrow>
  <annotation-xml encoding="MathML-Presentation">
    <mi> &Copf; </mi>
  </annotation-xml>
</semantics>
]]></eg>
</p>

<p>which provides an alternative, standard encoding for the desired
symbol, which is much more easily interpreted than the construct using
negative spacing. The alternative encoding in this example uses
MathML presentation elements; the content elements described in
<specref ref="contm"/> should also be considered.</p>
-->
<p>The above warning also applies to most uses of rendering
attributes to alter the meaning conveyed by an expression, with the
exception of attributes on <el>mi</el> (such as <att>mathvariant</att>)
used to distinguish one variable from another.</p>
</div4>

</div3>

<div3 id="presm_summary"><head>Summary of Presentation Elements</head>

<div4><head>Token Elements</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_mi"><el>mi</el></intref></td> 
<td>identifier</td>
</tr>
<tr>
<td><intref ref="presm_mn"><el>mn</el></intref></td> 
<td>number</td>
</tr>
<tr>
<td><intref ref="presm_mo"><el>mo</el></intref></td> 
<td>operator, fence, or  separator</td>
</tr>
<tr>
<td><intref ref="presm_mtext"><el>mtext</el></intref></td> 
<td>text</td>
</tr>
<tr>
<td><intref ref="presm_mspace"><el>mspace</el></intref></td> 
<td>space</td>
</tr>
<tr>
<td><intref ref="presm_ms"><el>ms</el></intref></td> 
<td>string literal</td>
</tr>
</tbody>
</table>
<p>Additionally, the <intref ref="presm_mglyph"><el>mglyph</el></intref> element
may be used within Token elements to represent non-standard symbols as images.</p>
</div4>

<div4><head>General Layout Schemata</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_mrow"><el>mrow</el></intref></td> 
<td>group any number of sub-expressions horizontally</td>
</tr>
<tr>
<td><intref ref="presm_mfrac"><el>mfrac</el></intref></td> 
<td>form a fraction from two sub-expressions</td>
</tr>
<tr>
<td><intref ref="presm_mroot"><el>msqrt</el></intref></td> 
<td>form a square root (radical without an index)</td>
</tr>
<tr>
<td><intref ref="presm_mroot"><el>mroot</el></intref></td> 
<td>form a radical with specified index</td>
</tr>
<tr>
<td><intref ref="presm_mstyle"><el>mstyle</el></intref></td> 
<td>style change</td>
</tr>
<tr>
<td><intref ref="presm_merror"><el>merror</el></intref></td> 
<td>enclose a syntax error message from a preprocessor</td>
</tr>
<tr>
<td><intref ref="presm_mpadded"><el>mpadded</el></intref></td> 
<td>adjust space around content</td>
</tr>
<tr>
<td><intref ref="presm_mphantom"><el>mphantom</el></intref></td> 
<td>make content invisible but preserve its size</td>
</tr>
<tr>
<td><intref ref="presm_mfenced"><el>mfenced</el></intref></td> 
<td>surround content with a pair of fences</td>
</tr>
<tr>
<td><intref ref="presm_menclose"><el>menclose</el></intref></td> 
<td>enclose content with a stretching symbol such as a long division sign.</td>
</tr>
</tbody>
</table>
</div4>

<div4><head>Script and Limit Schemata</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_msub"><el>msub</el></intref></td> 
<td>attach a subscript to a base</td>
</tr>
<tr>
<td><intref ref="presm_msup"><el>msup</el></intref></td> 
<td>attach a superscript to a base</td>
</tr>
<tr>
<td><intref ref="presm_msubsup"><el>msubsup</el></intref></td> 
<td>attach a subscript-superscript pair to a base</td>
</tr>
<tr>
<td><intref ref="presm_munder"><el>munder</el></intref></td> 
<td>attach an underscript to a base</td>
</tr>
<tr>
<td><intref ref="presm_mover"><el>mover</el></intref></td> 
<td>attach an overscript to a base</td>
</tr>
<tr>
<td><intref ref="presm_munderover"><el>munderover</el></intref></td> 
<td>attach an underscript-overscript pair to a base</td>
</tr>
<tr>
<td><intref ref="presm_mmultiscripts"><el>mmultiscripts</el></intref></td> 
<td>attach prescripts and tensor indices to a base</td>
</tr>
</tbody>
</table>
</div4>

<div4><head>Tables and Matrices</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_mtable"><el>mtable</el></intref></td> 
<td>table or matrix</td>
</tr>
<tr>
<td><intref ref="presm_mlabeledtr"><el>mlabeledtr</el></intref></td> 
<td>row in a table or matrix with a label or equation number</td>
</tr>
<tr>
<td><intref ref="presm_mtr"><el>mtr</el></intref></td> 
<td>row in a table or matrix</td>
</tr>
<tr>
<td><intref ref="presm_mtd"><el>mtd</el></intref></td> 
<td>one entry in a table or matrix</td>
</tr>
<tr>
<td>
<intref ref="presm_malign"><el>maligngroup</el></intref> and
<intref ref="presm_malign"><el>malignmark</el></intref></td> 
<td>alignment markers</td>
</tr>
</tbody>
</table>
</div4>

<div4><head>Elementary Math Layout</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_mstack"><el>mstack</el></intref></td> 
<td>columns of aligned characters</td>
</tr>
<tr>
<td><intref ref="presm_mlongdiv"><el>mlongdiv</el></intref></td> 
<td>similar to msgroup, with the addition of a divisor and result</td>
</tr>
<tr>
<td><intref ref="presm_msgroup"><el>msgroup</el></intref></td> 
<td>a group of rows in an mstack that are shifted by similar amounts</td>
</tr>
<tr>
<td><intref ref="presm_msrow"><el>msrow</el></intref></td> 
<td>a row in an mstack</td>
</tr>
<tr>
<td><intref ref="presm_mscarries"><el>mscarries</el></intref></td> 
<td>row in an mstack that whose contents represent carries or borrows</td>
</tr>
<tr>
<td><intref ref="presm_mscarry"><el>mscarry</el></intref></td> 
<td>one entry in an mscarries</td>
</tr>
<tr>
<td><intref ref="presm_msline"><el>msline</el></intref></td> 
<td>horizontal line inside of <el>mstack</el></td>
</tr>
</tbody>
</table>
</div4>

<div4><head>Enlivening Expressions</head>
<table border="1">
<tbody>
<tr>
<td><intref ref="presm_maction"><el>maction</el></intref></td> 
<td>bind actions to a sub-expression</td>
</tr>
</tbody>
</table>
</div4>
</div3>

<div3 id="presm_presatt"><head>Mathematics style attributes common to presentation elements</head> 

<p>In addition to the attributes listed in <specref ref="fund_globatt"/>,
all MathML presentation elements accept the following two attributes:

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">mathcolor</td>
<td><intref ref="type_color"><emph>color</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref ref="mathmltree.p4"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the foreground color to use when drawing the components of this element,
such as the content for token elements or any lines, surds, or other decorations.
It also establishes the default <att>mathcolor</att> used for child elements
when used on a layout element.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">mathbackground</td>
<td><intref ref="type_color"><emph>color</emph></intref> | "transparent"</td>
<td>transparent</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the background color to be used to fill in the bounding box
of the element and its children. The default, "transparent", lets the
background color, if any, used in the current rendering context to show through.
</td>
</tr>
</tbody>
</table>
</p>

<p>These style attributes are primarily intended for visual media.
They are not expected to affect the intended semantics of displayed
expressions, but are for use in highlighting or drawing attention
to the affected subexpressions.  For example, a red "x" is not assumed
to be semantically different than a black "x", in contrast to
variables with different <att>mathvariant</att> (See <specref ref="presm_commatt"/>).</p>

<p>Since MathML expressions are often embedded in a textual data
format such as <phrase>HTML</phrase>,
the MathML renderer should inherit the
foreground color used in the context in which the MathML appears.
Note, however, that MathML  doesn't specify the mechanism by which
style information is inherited from the rendering environment.
<phrase>See <specref ref="presm_commatt"/> for more details.</phrase>
</p>

<p>Note that the suggested MathML visual rendering rules do not define the
precise extent of the region whose background is affected by the
<att>mathbackground</att> attribute,
except that, when the content does not have
negative dimensions and its drawing region is not overlapped by other
drawing due to surrounding negative spacing, this region should lie
behind all the drawing done to render the content, but should not lie behind any of the
drawing done to render surrounding expressions. The effect of overlap
of drawing regions caused by negative spacing on the extent of the
region affected by the <att>mathbackground</att> attribute is not
defined by these rules.</p>
</div3>

</div2>

<div2 id="presm_tokel"><head>Token Elements</head>

<p>Token elements in presentation markup are broadly intended to
represent the smallest units of mathematical notation which carry
meaning.  Tokens are roughly analogous to words in text.  However,
because of the precise, symbolic nature of mathematical notation, the
various categories and properties of token elements figure prominently in
MathML markup.  By contrast, in textual data, individual words rarely
need to be marked up or styled specially.</p>

<p>Frequently, tokens consist of a single character denoting a
mathematical symbol.  Other cases, e.g. function names, involve
multi-character tokens.  Further, because traditional mathematical
notation makes wide use of symbols distinguished by their
typographical properties (e.g. a Fraktur 'g' for a Lie algebra, or a
bold 'x' for a vector), care must be taken to insure that styling
mechanisms respect typographical properties which carry meaning.
Consequently, characters, tokens, and typographical properties of
symbols are closely related to one another in MathML.
</p>
<p>Token elements represent
identifiers (<intref ref="presm_mi"><el>mi</el></intref>),
numbers (<intref ref="presm_mn"><el>mn</el></intref>),
operators (<intref ref="presm_mo"><el>mo</el></intref>),
text (<intref ref="presm_mtext"><el>mtext</el></intref>),
strings (<intref ref="presm_ms"><el>ms</el></intref>)
and spacing (<intref ref="presm_mspace"><el>mspace</el></intref>).
The <intref ref="presm_mglyph"><el>mglyph</el></intref> element
may be used <emph>within</emph> token elements
to represent non-standard symbols by images.
Preceding detailed discussion of the individual elements,
the next two subsections discuss the allowable content of
token elements and the attributes common to them.
</p>

<div3 id="presm_tokenchars">
<head>
<phrase>Token Element Content Characters, <el role="emptytag">mglyph</el></phrase></head>

<p>Character data in MathML markup is only allowed to occur as part of
the content of token elements.  Whitespace between elements is ignored.
With the exception of the empty <intref ref="presm_mspace"><el>mspace</el></intref> element,
token elements can contain any sequence of zero or more Unicode characters,
or <intref ref="presm_mglyph"><el>mglyph</el></intref> or 
<el>malignmark</el> elements.
The <intref ref="presm_mglyph"><el>mglyph</el></intref> element is used
to represent non-standard characters or symbols by images;
the <el>malignmark</el> element establishes an alignment point for use within
table constructs, and is otherwise invisible (See <specref ref="presm_malign"/>).</p>

<p><phrase>Characters</phrase>
can be either represented directly as Unicode character data, or indirectly via numeric or
character entity references.  See <specref ref="chars"/> for a
discussion of the advantages and disadvantages of numeric 
character references versus
entity references, and <bibref ref="Entities"/> for a full list of the entity names available.
Also, see <specref ref="chars_anomalous"/> for a discussion of the
appropriate character content to choose for certain applications.</p>

<p>Token elements (other than <el>mspace</el>) should
be rendered as their content, if any, (i.e. in the visual case, as a
closely-spaced horizontal row of standard glyphs for the characters
or images for the <el>mglyph</el>s in their content).
An <el>mspace</el> element is rendered as a blank space of a width determined by its attributes.
Rendering algorithms should also take into account the
mathematics style attributes as described below, and modify surrounding
spacing by rules or attributes specific to each type of token
element.  The directional characteristics of the content must
also be respected (see <specref ref="presm_bidi_token"/>).
</p>

<div4 id="presm_symbolchars"><head>Alphanumeric symbol characters</head> 

<p>A large class of mathematical symbols are single letter identifiers
typically used as variable names in formulas.  Different font variants
of a letter are treated as separate symbols.  For example, a Fraktur
'g' might denote a Lie algebra, while a Roman 'g' denotes the
corresponding Lie group.  These letter-like symbols are traditionally
typeset differently than the same characters appearing in text, using
different spacing and ligature conventions.  These characters must
also be treated specially by style mechanisms, since arbitrary style
transformations can change meaning in an expression.</p>

<p>For these reasons, <phrase>Unicode contains</phrase>
more than nine hundred Math Alphanumeric Symbol characters
corresponding to letter-like symbols.  These characters are in the
Secondary Multilingual Plane (SMP).  See <bibref ref="Entities"/> for
more information.  As valid Unicode data, these characters are
permitted in MathML <phrase>and,</phrase> as tools and fonts for them become widely
available, we anticipate they will be the predominant way of denoting
letter-like symbols.</p>

<p><phrase>MathML also provides an alternative encoding
for these characters</phrase> using only Basic Multilingual Plane
(BMP) characters together with markup.  MathML defines a
correspondence between token elements with certain combinations of BMP
character data and the <att>mathvariant</att> attribute and tokens
containing SMP Math Alphanumeric Symbol characters.  Processing
applications that accept SMP characters are required to treat the
corresponding BMP and attribute combinations identically.  <phrase>This is particularly important for applications that
support searching and/or equality testing.</phrase></p>

<p>The <att>mathvariant</att> attribute is described in more detail in
<specref ref="presm_commatt"/>,
and a complete technical description of the corresponding characters is given in
<specref ref="chars_BMP-SMP"/>.</p>

</div4>

<div4 id="presm_mglyph"><head><phrase>Using images to represent
 symbols</phrase> <el role="defn emptytag">mglyph</el> <coreref type="no"/></head>

<div5><head>Description</head>

<p>The <el>mglyph</el> element provides a mechanism
for displaying images to represent non-standard symbols.
It may be used within the content of the token elements
<el>mi</el>, <el>mn</el>, <el>mo</el>, <el>mtext</el> or <el>ms</el>
where existing Unicode characters are not adequate.</p>

<p>Unicode defines a large number of characters used in mathematics
<phrase>and,</phrase> in most cases, glyphs representing these characters are widely
available in a variety of fonts.  Although these characters should
meet almost all users needs, MathML recognizes that mathematics is not
static and that new characters and symbols are added when convenient.  Characters
that become well accepted will likely be eventually incorporated by
the Unicode Consortium or other standards bodies, but that is often a
lengthy process.</p>

<p>Note that the glyph's <att>src</att> attribute uniquely identifies the <el>mglyph</el>;
two <el>mglyph</el>s with the same values for <att>src</att> should
be considered identical by applications that must determine whether
two characters/glyphs are identical.</p>
 
</div5>

<div5><head>Attributes</head>
<p>The <el>mglyph</el> element accepts the attributes listed in
<specref ref="presm_presatt"/>, but note that <att>mathcolor</att> has no effect.
The background color, <att>mathbackground</att>, should show through
if the specified image has transparency.
</p>

<p>
<el>mglyph</el> also accepts the additional attributes listed here.</p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">src</td>
<td><intref ref="type_uri"><emph>URI</emph></intref></td>
<td><emph>required</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the location of the image resource;
it may be a URI relative to the base-URI of the source of the MathML, if any.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">width</td>
<td><!-- unsigned--><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>from image</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desired width of the glyph; see <att>height</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">height</td>
<td><!--unsigned--><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>from image</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desired height of the glyph.
If only one of <att>width</att> and <att>height</att> are given,
the image should be scaled to preserve the aspect ratio;
if neither are given, the image should be displayed at its natural size.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">valign</td>
<td><intref ref="type_length"><emph>length</emph></intref> </td>
<td>0ex</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the baseline alignment point of the image with respect to the current baseline.
A positive value shifts the bottom of the image above the current baseline
while a negative value lowers it.
A value of 0 (the default) means that the baseline of the image is at the bottom of the image.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">alt</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><emph>required</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Provides an alternate name for the glyph.  If the specified image can't be found or displayed,
the renderer may use this name in a warning message or some unknown glyph notation.
The name might also be used by an audio renderer or symbol processing
system and should be chosen to be descriptive.
</td>
</tr>
</tbody>
</table>
<p>Note that the <att>src</att> and <att>alt</att> attributes are <emph>required</emph> for correct usage in MathML 3, however this is not enforced by the schema due to the <intref ref="presm_mglyph_deprecated">deprecated usage described below</intref>.</p>

</div5>

<div5><head>Example</head>

<p>The following example illustrates how a researcher might use
the <el>mglyph</el> construct with a set of images to work
with braid group notation.
<eg role="mathml-fragment"><![CDATA[
<mrow>
  <mi><mglyph src="my-braid-23" alt="2 3 braid"/></mi>
  <mo>+</mo>
  <mi><mglyph src="my-braid-132" alt="1 3 2 braid"/></mi>
  <mo>=</mo>
  <mi><mglyph src="my-braid-13" alt="1 3 braid"/></mi>
</mrow>
]]></eg>
This might render as:
<graphic role="display" source="image/f3006.gif" alt="\includegraphics{image/braids}"/> 
</p>

</div5>
<div5 id="presm_mglyph_deprecated"><head>Deprecated Attributes</head>
<p>Originally, <el>mglyph</el> was designed to provide access to non-standard
fonts. Since this functionality was seldom implemented, nor were downloadable
web fonts widely available, this use of <el>mglyph</el> has been deprecated.
For reference, the following attributes were previously defined:
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">fontfamily</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="2" role="attdesc">
the name of a font that may be available to a MathML renderer,
or a CSS font specification; See  <specref ref="world-int-style"/>
and CSS <bibref ref="CSS21"/> for more information.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">index</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="2" role="attdesc">
Specified a position of the desired glyph within the font named
by the <att>fontfamily</att> attribute (see <specref ref="presm_deprecatt"/>).
</td>
</tr>
</tbody>
</table>
In MathML 1 and 2, both were required attributes; they are now optional
and should be ignored unless the <att>src</att> attribute is missing.
</p>
<p>Additionally, in MathML 2, <el>mglyph</el> accepted the attributes described in
<specref ref="presm_commatt"/>
(<att>mathvariant</att> and <att>mathsize</att>, along with the attributes deprecated there);
to make clear that <el>mglyph</el> is <emph>not</emph> a token element, and since
these attributes have no effect in any case, these attributes have been deprecated.
</p>
</div5>
</div4>


</div3>

<div3 id="presm_commatt"><head>Mathematics style attributes common to token elements</head> 

<p>In addition to the attributes defined for all presentation elements
(<specref ref="presm_presatt"/>), MathML includes two  <emph>mathematics style</emph> attributes
as well as a directionality attribute
valid on all presentation token elements,
<phrase>as well as the <el>math</el> and <el>mstyle</el> elements;
<att>dir</att> is also valid on <el>mrow</el> elements.</phrase>
The attributes are:

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">mathvariant</td>
<td>
"normal" | "bold" | "italic" | "bold-italic" | "double-struck" |
"bold-fraktur" | "script" | "bold-script" |
"fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" |
"sans-serif-bold-italic" | "monospace" |
"initial" | "tailed" | "looped" | "stretched"
</td>
<td>normal (<emph>except on</emph> <el role="starttag">mi</el>)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the logical class of the token. Note that this class
is more than styling, it typically conveys semantic intent; see the discussion below.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">mathsize</td>
<td>"small" | "normal" | "big" | <intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the size to display the token content.
The values <attval>small</attval> and <attval>big</attval> choose a size
smaller or larger than the current font size, but leave the exact proportions
unspecified; <attval>normal</attval> is allowed for completeness, but since
it is equivalent to <attval>100%</attval> or <attval>1em</attval>, it has no effect.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">dir</td>
<td>"ltr" | "rtl"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the initial directionality for text within the token:
<code>ltr</code> (Left To Right) or <code>rtl</code> (Right To Left).
This attribute should only be needed in rare cases involving weak or neutral characters;
see <specref ref="presm_bidi_math"/> for further discussion.
<phrase>It has no effect on <el>mspace</el>.</phrase>
</td>
</tr>
</tbody>
</table>
</p>

<p>The <att>mathvariant</att> attribute defines logical classes of token
elements.  Each class provides a collection of typographically-related
symbolic tokens.  Each token has a specific meaning within a given
mathematical expression and, therefore, needs to be visually
distinguished and protected from inadvertent document-wide style
changes which might change its meaning.  Each token is identified
by the combination of the <att>mathvariant</att> attribute value
and the character data in the token element.</p>

<p>When MathML rendering takes place in an environment where CSS is
available, the mathematics style attributes can be viewed as
predefined selectors for CSS style rules.
See <specref ref="world-int-style"/> for discussion of the
interaction of MathML and CSS.
Also, see <bibref ref="MathMLforCSS"/> for discussion of rendering MathML by CSS
and a sample CSS style sheet.
When CSS is not available, it is up to the internal style mechanism of the rendering application
to visually distinguish the different logical classes.
Most MathML renderers will probably want to rely on some degree to additional,
internal style processing algorithms.
In particular, the <att>mathvariant</att> attribute does not follow the CSS inheritance model;
the default value is <attval>normal</attval> (non-slanted)
for all tokens except for <el>mi</el> with single-character content.
See <specref ref="presm_mi"/> for details.</p>

<p><phrase>Renderers</phrase> have complete freedom in
mapping mathematics style attributes to specific rendering properties.
However, in practice, the mathematics style attribute names and values
suggest obvious typographical properties, and renderers should attempt
to respect these natural interpretations as far as possible.  For
example, it is reasonable to render a token with the
<att>mathvariant</att> attribute set to <attval>sans-serif</attval> in
Helvetica or Arial.  However, rendering the token in a Times Roman
font could be seriously misleading and should be avoided. </p>

<p>In principle, any <att>mathvariant</att> value may be used with any
character data to define a specific symbolic token.  In practice,
only certain combinations of character data and <att>mathvariant</att>
values will be visually distinguished by a given renderer.  For example,
there is no clear-cut rendering for a "fraktur alpha" or a "bold italic
Kanji" character, and the <att>mathvariant</att> values "initial",
"tailed", "looped", and "stretched" are appropriate only for Arabic
characters.</p>

<p>Certain combinations of character data and <att>mathvariant</att>
values are equivalent to assigned Unicode code points that encode
mathematical alphanumeric symbols.  These Unicode code points are
the ones in the
 <loc href="http://www.unicode.org/charts/PDF/U1EE00.pdf">Arabic Mathematical Alphabetic Symbols</loc> block U+1EE00 to U+1EEFF,
 <loc href="http://www.unicode.org/charts/PDF/U1D400.pdf">Mathematical Alphanumeric Symbols</loc> block U+1D400 to U+1D7FF,
listed in the Unicode standard, and the ones in the
<loc href="http://www.unicode.org/charts/PDF/U2100.pdf">Letterlike
Symbols</loc> range U+2100 to U+214F that represent "holes" in the
alphabets in the SMP, listed in <specref ref="chars_BMP-SMP"/>.
These characters are described in detail in section 2.2 of
<loc href="http://www.unicode.org/reports/tr25/">UTR #25</loc>.
The description of each such character in the Unicode standard
provides an unstyled character to which it would be equivalent
except for a font change that corresponds to a <att>mathvariant</att>
value.  A token element that uses the unstyled character in combination
with the corresponding <att>mathvariant</att> value is equivalent to a
token element that uses the mathematical alphanumeric symbol character
without the <att>mathvariant</att> attribute.  Note that the appearance
of a mathematical alphanumeric symbol character should not be altered
by surrounding <att>mathvariant</att> or other style declarations.</p>

<p>Renderers should support those combinations of character data and
<att>mathvariant</att> values that correspond to Unicode characters,
and that they can visually distinguish using available font characters.
Renderers may ignore or support those combinations of character data
and <att>mathvariant</att> values that do not correspond to an assigned
Unicode code point, and authors should recognize that support for
mathematical symbols that do not correspond to assigned Unicode code
points may vary widely from one renderer to another.</p>

<p>Since MathML expressions are often embedded in a textual data
format such as XHTML, the surrounding text and the MathML must share
rendering attributes such as font size, so that the renderings will be
compatible in style. For this reason, most attribute values affecting
text rendering are inherited from the rendering environment, as shown
in the <quote>default</quote> column in the table above. (In
cases where the surrounding text and the MathML are being rendered by
separate software, e.g. a browser and a plug-in, it is also important
for the rendering environment to provide the MathML renderer with
additional information, such as the baseline position of surrounding
text, which is not specified by any MathML attributes.)
Note, however, that MathML  doesn't specify the mechanism by which
style information is inherited from the rendering environment.
<!--
For example, one browser plug-in might choose to rely
completely on the CSS inheritance mechanism and use the fully resolved
CSS properties for rendering, while another application might only consult
a style environment at the root node, and then use its own internal style
inheritance rules.
-->
</p>

<p>If the requested <att>mathsize</att> of the current font is not available, the
renderer should approximate it in the manner likely to lead to the
most intelligible, highest quality rendering.
Note that many MathML elements automatically change the font size
in some of their children; see the discussion in <specref ref="presm_scriptlevel"/>.</p>

<div4 id="presm_deprecatt"><head>Deprecated style attributes on token elements <coreref type="no"/></head> 

<p>The MathML 1.01 style attributes listed below
are <intref ref="interf_deprec">deprecated</intref> in MathML 2 and 3.  
These attributes were aligned to CSS <phrase>but,</phrase> in rendering environments that support CSS,
it is preferable to use CSS directly to control the rendering properties
corresponding to these attributes, rather than the attributes themselves.
However as explained above, direct manipulation of these
rendering properties by whatever means should usually be avoided.
As a general rule, whenever there is a conflict between these
deprecated attributes and the corresponding attributes (<specref ref="presm_commatt"/>),
the former attributes should be ignored.</p>

<p>The deprecated attributes are:

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">fontfamily</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Should be the name of a font that may be available to a MathML renderer,
or a CSS font specification; See  <specref ref="world-int-style"/>
and CSS <bibref ref="CSS21"/> for more information.
Deprecated in favor of <att>mathvariant</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">fontweight</td>
<td>"normal" | "bold"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specified the font weight for the token.
Deprecated in favor of <att>mathvariant</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">fontstyle</td>
<td>"normal" | "italic"</td>
<td>normal (<emph>except on</emph> <el role="starttag">mi</el>)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specified the font style to use for the token.
Deprecated in favor of <att>mathvariant</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">fontsize</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specified the size for the token.
Deprecated in favor of <att>mathsize</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">color</td>
<td><intref ref="type_color"><emph>color</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specified the color for the token.
Deprecated in favor of <att>mathcolor</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">background</td>
<td><intref ref="type_color"><emph>color</emph></intref> | "transparent"</td>
<td>transparent</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specified the background color to be used to fill in the bounding box
of the element and its children. Deprecated in favor of <att>mathbackground</att>.
</td>
</tr>
</tbody>
</table>
</p>
</div4>

<div4 id="presm_html_insertion"><head>Embedding HTML in MathML</head>
<p>MathML can be combined with other formats as described in
<specref ref="world-int-combine-other"/>.
The recommendation is to embed other formats in MathML by extending the MathML
schema to allow additional elements to be children of the <el>mtext</el> element or
other leaf elements as appropriate to the role they serve in the expression
(see  <specref ref="presm_mixtextmath"/>).
The directionality, font size, and other font attributes should inherit from
those that would be used for characters of the containing leaf element
(see <specref ref="presm_commatt"/>).
</p>
<p>Here is an example of embedding SVG inside of mtext in an HTML context:</p>
<eg role="mathml"><![CDATA[
<mtable>
  <mtr>
    <mtd>
      <mtext><input type="text" placeholder="what shape is this?"/></mtext>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mtext>
        <svg xmlns="http://www.w3.org/2000/svg"
             width="4cm" height="4cm" viewBox="0 0 400 400">
          <rect x="1" y="1" width="398" height="398"
                style="fill:none; stroke:blue"/>
          <path d="M 100 100 L 300 100 L 200 300 z"
                style="fill:red; stroke:blue; stroke-width:3"/>
        </svg>
      </mtext>
    </mtd>
  </mtr>
</mtable>]]>
</eg>
</div4>
</div3>

<div3 id="presm_mi"><head>Identifier <el role="defn starttag">mi</el> <coreref ref="mi"/></head>

<div4><head>Description</head>

<p>An <el>mi</el> element represents a symbolic name or
arbitrary text that should be rendered as an identifier. Identifiers
can include variables, function names, and symbolic constants.
A typical graphical renderer would render an <el>mi</el> element
as its content (See <specref ref="presm_tokenchars"/>),
with no extra spacing around it (except spacing associated with
neighboring elements).</p>

<p>Not all <quote>mathematical identifiers</quote> are represented by
<el>mi</el> elements &#x2014; for example, subscripted or primed
variables should be represented using <el>msub</el> or
<el>msup</el> respectively. Conversely, arbitrary text
playing the role of a <quote>term</quote> (such as an ellipsis in a summed series)
can be represented using an <el>mi</el> element, as shown
in an example in <specref ref="presm_mixtextmath"/>.</p>

<p>It should be stressed that <el>mi</el> is a
presentation element, and as such, it only indicates that its content
should be rendered as an identifier. In the majority of cases, the
contents of an <el>mi</el> will actually represent a
mathematical identifier such as a variable or function name. However,
as the preceding paragraph indicates, the correspondence between
notations that should render as identifiers and notations that are
actually intended to represent mathematical identifiers is not
perfect. For an element whose semantics is guaranteed to be that of an
identifier, see the description of <el>ci</el> in 
<specref ref="contm"/>.</p>
</div4>

<div4><head>Attributes</head>
<p><el>mi</el> elements accept the attributes listed in
<specref ref="presm_commatt"/>, but in one case with a different default value:
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">mathvariant</td>
<td>"normal" | "bold" | "italic" | "bold-italic" | "double-struck" |
  "bold-fraktur" | "script" | "bold-script" |
"fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" |
"sans-serif-bold-italic" | "monospace" |
"initial" | "tailed" | "looped" | "stretched"
</td>
<td><emph>(depends on content; described below)</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">

Specifies the logical class of the token.
The default is <attval>normal</attval> (non-slanted) unless the content
is a single character, in which case it would be <attval>italic</attval>.
</td>
</tr>
<!--
<tr>
<td>fontstyle (<intref ref="interf_deprec">deprecated</intref>)</td>
<td>normal | italic</td>
<td><emph>(depends on content; described below)</emph></td>
</tr>
-->
</tbody>
</table>
</p>

<p>Note that the deprecated <att>fontstyle</att> attribute
defaults in the same way as <att>mathvariant</att>, depending on the content.</p> 

<p>Note that for purposes of determining equivalences of Math
Alphanumeric Symbol
characters (See <specref ref="chars_BMP-SMP"/> and <specref ref="presm_symbolchars"/>)
the value of the <att>mathvariant</att> attribute should be resolved first,
including the special defaulting behavior described above.
</p>
</div4>

<div4 id="presm_mi_examples" diff="chg"><head>Examples</head>
<eg role="mathml"><![CDATA[<mi>x</mi>]]></eg>
<eg role="mathml"><![CDATA[<mi>D</mi>]]></eg>
<eg role="mathml"><![CDATA[<mi>sin</mi>]]></eg>
<eg role="mathml"><![CDATA[<mi mathvariant='script'>L</mi>]]></eg>
<eg role="mathml"><![CDATA[<mi></mi>]]></eg>


<p>An <el>mi</el> element with no content is allowed;
<code>&lt;mi&gt;&lt;/mi&gt;</code> might, for example, be used by an
<quote>expression editor</quote> to represent a location in a MathML expression
which requires a <quote>term</quote> (according to conventional syntax for
mathematics) but does not yet contain one.</p>

<p>Identifiers include function names such as
<quote>sin</quote>. Expressions such as <quote>sin <var>x</var></quote>
should be written using the character U+2061 
(which also has the entity names <kw role="entity">af</kw> and <kw role="entity">ApplyFunction</kw>) as shown below;
see also the discussion of invisible operators in <specref ref="presm_mo"/>.
<eg role="mathml"><![CDATA[
<mrow>
  <mi> sin </mi>
  <mo> &ApplyFunction; </mo>
  <mi> x </mi>
</mrow>
]]></eg>
</p>

<p>Miscellaneous text that should be treated as a <quote>term</quote> can also be
represented by an <el>mi</el> element, as in:
<eg role="mathml"><![CDATA[
<mrow>
  <mn> 1 </mn>
  <mo> + </mo>
  <mi> &hellip; </mi>
  <mo> + </mo>
  <mi> n </mi>
</mrow>
]]></eg>
</p>

<p>When an <el>mi</el> is used in such exceptional
situations, explicitly setting the <att>mathvariant</att> attribute
may give better results than the default behavior of some
renderers.</p>

<p>The names of symbolic constants should be represented as
<el>mi</el> elements:
<eg role="mathml"><![CDATA[
<mi> &pi; </mi>
<mi> &ImaginaryI; </mi>
<mi> &ExponentialE; </mi>
]]></eg>
</p>

</div4>
</div3>

<div3 id="presm_mn"><head>Number <el role="defn starttag">mn</el> <coreref ref="mn"/></head>

<div4><head>Description</head>

<p>An <el>mn</el> element represents a <quote>numeric
literal</quote> or other data that should be rendered as a numeric
literal. Generally speaking, a numeric literal is a sequence of digits,
perhaps including a decimal point, representing an unsigned integer or real
number.
A typical graphical renderer would render an <el>mn</el> element as
its content (See <specref ref="presm_tokenchars"/>), with no extra spacing around them
(except spacing from neighboring elements such as <el>mo</el>).
<el>mn</el> elements are typically rendered in an unslanted font.
</p>

<p>The mathematical concept of a <quote>number</quote> can be quite 
subtle and involved, depending on the context. As a consequence, not all
mathematical numbers should be represented using <el>mn</el>; examples of mathematical numbers that should be
represented differently are shown below, and include 
complex numbers, ratios of numbers shown as fractions, and names of numeric
constants.</p>

<p>Conversely, since <el>mn</el> is a presentation
element, there are a few situations where it may <phrase>be</phrase> desirable to include
arbitrary text in the content of an <el>mn</el> that
should merely render as a numeric literal, even though that content
may not be unambiguously interpretable as a number according to any
particular standard encoding of numbers as character sequences. As a
general rule, however, the <el>mn</el> element should be
reserved for situations where its content is actually intended to
represent a numeric quantity in some fashion.  For an element whose
semantics are guaranteed to be that of a particular kind of
mathematical number, see the description of <el>cn</el> in
<specref ref="contm"/>.</p>
</div4>

<div4><head>Attributes</head>

<p><el>mn</el> elements accept the attributes listed in <specref ref="presm_commatt"/>.</p>
</div4>

<div4 id="presm_mn_examples" diff="chg"><head>Examples</head>
<eg role="mathml"><![CDATA[<mn> 2 </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> 0.123 </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> 1,000,000 </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> 2.1e10 </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> 0xFFEF </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> MCMLXIX </mn>]]></eg>
<eg role="mathml"><![CDATA[<mn> twenty one </mn>]]></eg>
</div4>

<div4 id="presm_not_single_mn"><head>Numbers that should <emph>not</emph> be written 
using <el role="starttag">mn</el> alone</head>

<p>Many mathematical numbers should be represented using presentation
elements other than <el>mn</el> alone; this includes
complex numbers, <phrase diff="add">negative numbers, </phrase>ratios of numbers shown as fractions, and 
names of numeric constants. Examples of MathML representations of
such numbers include:
<eg role="mathml"><![CDATA[
<mrow>
  <mn> 2 </mn>
  <mo> + </mo>
  <mrow>
    <mn> 3 </mn>
    <mo> &InvisibleTimes; </mo>
    <mi> &ImaginaryI; </mi>
  </mrow>
</mrow>
]]></eg>
<eg role="mathml"><![CDATA[<mfrac> <mn> 1 </mn> <mn> 2 </mn> </mfrac>]]></eg>
<eg diff="add" role="mathml"><![CDATA[<mrow><mo>-</mo><mn>2</mn></mrow>]]></eg>
<eg role="mathml"><![CDATA[<mi> &pi; </mi>]]></eg>
<eg role="mathml"><![CDATA[<mi> &ExponentialE; </mi>]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_mo"><head>Operator, Fence, Separator or Accent
  <el role="defn starttag">mo</el> <coreref ref="mo"/></head>

<div4><head>Description</head>

<p>An <el>mo</el> element represents an operator or
anything that should be rendered as an operator. In general, the
notational conventions for mathematical operators are quite
complicated, and therefore MathML provides a relatively sophisticated
mechanism for specifying the rendering behavior of an
<el>mo</el> element.  As a consequence, in MathML the list
of things that should <quote>render as an operator</quote> includes a number of
notations that are not mathematical operators in the ordinary
sense. Besides ordinary operators with infix, prefix, or postfix
forms, these include fence characters such as braces, parentheses, and
<quote>absolute value</quote> bars<phrase>;</phrase> separators 
such as comma and semicolon<phrase>;</phrase> and
mathematical accents such as a bar or tilde over a symbol.
We will use the term "operator" in this chapter to refer to operators in this broad sense.</p>

<p>Typical graphical renderers show all <el>mo</el>
elements as the content (See <specref ref="presm_tokenchars"/>),
with additional spacing around the element determined by its attributes and
further described below. 
Renderers without access to complete fonts for the MathML character
set may choose  to render an <el>mo</el> element as
<phrase>not</phrase> precisely the characters in its content in some cases. For example,
<code><![CDATA[<mo> &le; </mo>]]></code> might be rendered as
<code>&lt;=</code> to a terminal.  However, as a general rule,
renderers should attempt to render the content of an
<el>mo</el> element as literally as possible.
That is,
<code><![CDATA[<mo> &le; </mo>]]></code> and
<code><![CDATA[<mo> &lt;= </mo>]]></code> should render differently.
The first one should render as a single character
representing a less-than-or-equal-to sign, and the second one as the
two-character sequence <code>&lt;=</code>.</p>

<p><phrase>All o</phrase>perators, in the general sense used here, 
are subject to essentially the same rendering
attributes and rules<phrase>. S</phrase>ubtle distinctions in the 
rendering of these classes of symbols,
when they exist, are supported using the Boolean attributes <att>fence</att>,
 <att>separator</att> and <att>accent</att>, which can be used to distinguish these cases.</p>

<p>A key feature of the <el>mo</el> element is that its
default attribute values are set on a case-by-case basis from an
<quote>operator dictionary</quote> as explained below. In particular, default
values for <att>fence</att>, <att>separator</att> and
<att>accent</att> can usually be found in the operator dictionary
and therefore need not be specified on each <el>mo</el>
element.</p>

<p>Note that some mathematical operators are represented not by <el>mo</el> elements alone, but by <el>mo</el>
elements <quote>embellished</quote> with (for example) surrounding
superscripts; this is further described below. Conversely, as presentation
elements, <el>mo</el> elements can contain arbitrary text,
even when that text has no standard interpretation as an operator; for an
example, see the discussion <quote>Mixing text and mathematics</quote> in
<specref ref="presm_mtext"/>. See also <specref ref="contm"/> for
definitions of MathML content elements that are guaranteed to have the
semantics of specific mathematical operators.</p>

<p>Note also that linebreaking, as discussed in
<specref ref="presm_linebreaking"/>, usually takes place at operators
(either before or after, depending on local conventions).
Thus, <el>mo</el> accepts attributes to encode the desirability
of breaking at a particular operator, as well as attributes
describing the treatment of the operator and indentation in case
the a linebreak is made at that operator.</p>
</div4>

<div4 id="presm_mo_attrs"><head>Attributes</head>

<p><el>mo</el> elements accept
  the attributes listed in <specref ref="presm_commatt"/>
  and the additional attributes listed here.
  Since the display of operators is so critical in mathematics,
  the <el>mo</el> element accepts a large number of attributes;
  these are described in the next three subsections.
</p><p>
Most attributes get their default values from an enclosing
<el>mstyle</el> element, <el>math</el> element,
<phrase> from the containing document,</phrase>
or from the
<specref ref="presm_opdict"/>. 
When a value that is listed as <quote>inherited</quote> is not explicitly given on an 
<el>mo</el>,  <el>mstyle</el> element, <el>math</el> element, or found in the operator
dictionary for a given <el>mo</el> element, the default value shown in
parentheses is used.
</p>

<div5 id="presm_mo_dict_attrs"><head>Dictionary-based attributes</head>
<table border="1" id="presm_table-mo" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">form</td>
<td>"prefix" | "infix" | "postfix"</td>
<td><emph>set by position of operator in an</emph> <el>mrow</el></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the role of the operator in the enclosing expression.
This role and the operator content affect the lookup of the operator in the operator dictionary
which affects the spacing and other default properties;
see <specref ref="presm_formdefval"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">fence</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the operator represents a &#x2018;fence&#x2019;, such as a parenthesis.
This attribute generally has no direct effect on the visual rendering,
but may be useful in specific cases, such as non-visual renderers.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">separator</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the operator represents a &#x2018;separator&#x2019;, or punctuation.
This attribute generally has no direct effect on the visual rendering,
but may be useful in specific cases, such as non-visual renderers.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">lspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>set by dictionary</emph> (thickmathspace)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the leading space appearing before the operator;
see <specref ref="presm_opspacing"/>.
(Note that before is on the right in a RTL context; see <specref ref="presm_bidi"/>).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>set by dictionary</emph> (thickmathspace)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the trailing space appearing after the operator;
see <specref ref="presm_opspacing"/>.
(Note that after is on the left in a RTL context; see <specref ref="presm_bidi"/>).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">stretchy</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the operator should stretch to the size of adjacent material;
see <specref ref="presm_op_stretch"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">symmetric</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the operator should be kept symmetric around the math 
<intref ref="dt-axis">axis</intref> when stretchy.
Note this property only applies to vertically stretched symbols.
See <specref ref="presm_op_stretch"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">maxsize</td>
<td> <intref ref="type_length"><emph>length</emph></intref> | "infinity"</td>
<td><emph>set by dictionary</emph> (infinity)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the maximum size of the operator when stretchy;
see <specref ref="presm_op_stretch"/>.
<phrase>Unitless or percentage values indicate a multiple
of the reference size, being the size of the unstretched glyph.</phrase>
</td>
</tr>
<tr>
<td rowspan="2" role="attname">minsize</td>
<td> <intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>set by dictionary</emph> <phrase>(100%)</phrase></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum size of the operator when stretchy;
see <specref ref="presm_op_stretch"/>.
<phrase>Unitless or percentage values indicate a multiple
of the reference size, being the size of the unstretched glyph.</phrase>
</td>
</tr>
<tr>
<td rowspan="2" role="attname">largeop</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the operator is considered a &#x2018;large&#x2019; operator,
that is, whether it should be drawn larger than normal when
<att>displaystyle</att>=<attval>true</attval>
(similar to using T<sub>E</sub>X's <kw>\displaystyle</kw>).
 Examples of large operators include <kw role="entity">int</kw>
and <kw role="entity">prod</kw>.
See <specref ref="presm_scriptlevel"/> for more discussion.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">movablelimits</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether under- and overscripts attached to
this operator &#x2018;move&#x2019; to the more compact sub- and superscript positions
when <att>displaystyle</att> is false.
Examples of operators that typically have <att>movablelimits</att>=<attval>true</attval>
are <kw role="entity">sum</kw>, <kw role="entity">prod</kw>, and <kw>lim</kw>.
See <specref ref="presm_scriptlevel"/> for more discussion.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">accent</td>
<td>"true" | "false"</td>
<td><emph>set by dictionary</emph> (false)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether this operator should be treated as an accent (diacritical mark)
when used as an underscript or overscript;
see <intref ref="presm_munder"><el>munder</el></intref>,
<intref ref="presm_mover"><el>mover</el></intref>
and <intref ref="presm_munderover"><el>munderover</el></intref>.
</td>
</tr>
</tbody>
</table>

</div5>

<div5 id="presm_lbattrs"><head>Linebreaking attributes</head>
<p>The following attributes affect when a linebreak does or does not occur,
and the appearance of the linebreak when it does occur.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td> Name </td>
<td> values </td>
<td> default </td>
<td>Core</td>
</tr></thead>
<tbody>
<tr>
<td rowspan="2" role="attname">linebreak</td>
<td>"auto" | "newline" | "nobreak" | "goodbreak" | "badbreak"</td>
<td>auto</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desirability of a linebreak occurring at this operator:
the default <attval>auto</attval> indicates the renderer should use its default
linebreaking algorithm to determine whether to break;
<attval>newline</attval> is used to force a linebreak;
For automatic linebreaking, <attval>nobreak</attval> forbids a break;
<attval>goodbreak</attval> suggests a good position;
<attval>badbreak</attval> suggests a poor position.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">lineleading </td>
<td> <intref ref="type_length"><emph>length</emph></intref> </td>
<td><emph>inherited</emph> (100%) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the amount of vertical space to use after a linebreak.
For tall lines, it is often clearer to use more leading at linebreaks.
Rendering agents are free to choose an appropriate default.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">linebreakstyle</td>
<td> "before" | "after" | "duplicate"
    | "infixlinebreakstyle"</td>
<td><emph>set by dictionary</emph> (before) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether a linebreak occurs &#x2018;before&#x2019; or &#x2018;after&#x2019; the operator
when a linebreaks occur on this operator; or whether the operator is duplicated.
<attval>before</attval> causes the operator to appears at the beginning of the new line
(but possibly indented);
<attval>after</attval> causes it to appear at the end of the line before the break.
<attval>duplicate</attval> places the operator at both positions.
<attval>infixlinebreakstyle</attval> uses the value  that has been specified for
infix operators; This value (one of <attval>before</attval>,
<attval>after</attval> or <attval>duplicate</attval>) can be specified by
the application or bound by <intref ref="presm_mstyle"><el>mstyle</el></intref>
(<attval>before</attval> corresponds to the most common style of linebreaking).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">linebreakmultchar</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><emph>inherited</emph> (&amp;InvisibleTimes;) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the character used to make an &amp;InvisibleTimes; operator visible at a linebreak.
For example, <att>linebreakmultchar</att>="&amp;#xB7;"  would make the
multiplication visible as a center dot.
</td>
</tr>
</tbody>
</table>
<p>
<att>linebreak</att> values on adjacent <el>mo</el> and <el>mspace</el>elements do
not interact; <att>linebreak</att>=<attval>nobreak</attval> on a <el>mo</el> does
not, in itself, inhibit a break on a preceding or following (possibly nested)
<el>mo</el> or <el>mspace</el> element and does not interact with the <att>linebreakstyle</att>
attribute value of the preceding or following <el>mo</el> element.
It does prevent breaks from occurring on either side of the <el>mo</el> element in all other situations.
</p>

</div5>

<div5 id="presm_lbindent_attrs"><head>Indentation attributes</head>
<p>The following attributes affect indentation of the lines making up a formula.
Primarily these <phrase>attributes</phrase> control the positioning of new lines following a linebreak,
whether automatic or manual. However, <att>indentalignfirst</att> and <att>indentshiftfirst</att>
also control the positioning of single line formula without any linebreaks.
When these attributes appear on <el>mo</el> or <el>mspace</el> they apply if a linebreak occurs
at that element.
When they appear on <el>mstyle</el> or <el>math</el> elements, they determine
defaults for the style to be used for any linebreaks occurring within.
Note that except for cases where heavily marked-up manual linebreaking is desired,
many of these attributes are most useful when bound on an
<el>mstyle</el> or <el>math</el> element.
</p>

<p>Note that since the rendering context, such as <phrase>the
 available width</phrase> and current font,
is not always available to the author of the MathML, 
a render may ignore the values of these attributes if they result in a line in which
the remaining width is too small to usefully display the expression or if they result in a line in
which the remaining width exceeds the available linewrapping width. </p>

<table border="1" role="attributes">
<thead><tr>
<td> Name   </td>
<td> values </td>
<td> default </td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">indentalign</td>
<td>"left" | "center" | "right" | "auto" | "id"</td>
<td><emph>inherited</emph> (auto)       </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the positioning of lines when linebreaking takes place within an <el>mrow</el>;
see below for discussion of the attribute values.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indentshift      </td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>inherited</emph> (0) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies an additional indentation offset relative to the position determined
by <att>indentalign</att>.
<phrase>When the value is a percentage value or number without unit,
the value is relative to the
horizontal space that a MathML renderer has available, this is the current target width as used for
linebreaking as specified in <specref ref="presm_linebreaking"/></phrase>
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indenttarget</td>
<td><intref ref="type_idref"><emph>idref</emph></intref></td>
<td><emph> inherited (none)</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the <intref ref="type_id">id</intref> of another element
whose horizontal position determines the position of indented lines
when <att>indentalign</att>=<attval>id</attval>.
Note that the identified element may be outside of the current
<el>math</el> element, allowing for inter-expression alignment,
or may be within invisible content such as <el>mphantom</el>;
it must appear <emph>before</emph> being referenced, however.
This may lead to an id being unavailable to a given renderer
<phrase>or in a position that does not allow for alignment</phrase>.
In such cases, the <att>indentalign</att> should revert to <attval>auto</attval>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indentalignfirst  </td>
<td>"left" | "center" | "right" | "auto" | "id" | "indentalign"</td>
<td><emph>inherited</emph> (indentalign) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the indentation style to use for the first line of a formula;
the value <attval>indentalign</attval> (the default) means
to indent the same way as used for the general line.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indentshiftfirst </td>
<td><intref ref="type_length"><emph>length</emph></intref> | "indentshift"  </td>
<td><emph>inherited</emph> (indentshift) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the offset to use for the first line of a formula;
the value <attval>indentshift</attval> (the default) means 
to use the same offset as used for the general line.
<phrase>Percentage values and numbers without unit are interpreted as described for <att>indentshift</att></phrase>
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indentalignlast   </td>
<td>"left" | "center" | "right" | "auto" | "id" | "indentalign"</td>
<td><emph>inherited</emph> (indentalign) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the indentation style to use for the last line when a linebreak
occurs within a given <el>mrow</el>;
the value <attval>indentalign</attval> (the default) means 
to indent the same way as used for the general line.
When there are exactly two lines, the value of this attribute should
be used for the second line in preference to <att>indentalign</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">indentshiftlast  </td>
<td><intref ref="type_length"><emph>length</emph></intref> | "indentshift" </td>
<td><emph>inherited</emph> (indentshift) </td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the offset to use for the last line when a linebreak
occurs within a given <el>mrow</el>;
the value <attval>indentshift</attval> (the default) means
to indent the same way as used for the general line.
When there are exactly two lines, the value of this attribute should
be used for the second line in preference to <att>indentshift</att>.
<phrase>Percentage values and numbers without unit are interpreted as described for <att>indentshift</att></phrase>
</td>
</tr>
</tbody></table>

<p>The legal values of indentalign are:
<table id="presm_table-indentalign" border="1"><thead><tr>
<td> Value   </td>
<td> Meaning</td>
</tr>
</thead>
<tbody>
<tr>
<td> left         </td>
<td> Align the left side of the next line to the left side of the line wrapping width </td>
</tr>
<tr>
<td> center       </td>
<td> Align the center of the next line to the center of the line wrapping width </td>
</tr>
<tr>
<td> right        </td>
<td> Align the right side of the next line to the right side of the line wrapping width </td>
</tr>
<tr>
<td> auto         </td>
<td>
(default) indent using the renderer's default indenting style; this may
be a fixed amount or one that varies with the depth of the element in
the mrow nesting or some other similar method. </td>
</tr>
<tr>
<td> id           </td>
<td> Align the left side of the next line to the left side of the element
referenced by the <intref ref="type_idref"><emph>idref</emph></intref>
(given by <att>indenttarget</att>);
if no such element exists, use <attval>auto</attval> as the <att>indentalign</att> value</td>
</tr>
</tbody></table></p>

</div5>
</div4>

<div4><head>Examples with ordinary operators</head>

<eg role="mathml"><![CDATA[<mo> + </mo>]]>                    </eg>
<eg role="mathml"><![CDATA[<mo> &lt; </mo>]]>                 </eg>
<eg role="mathml"><![CDATA[<mo> &le; </mo>]]> </eg>
<eg role="mathml"><![CDATA[<mo> &lt;= </mo>]]>                </eg>
<eg role="mathml"><![CDATA[<mo> ++ </mo>]]>                   </eg>
<eg role="mathml"><![CDATA[<mo> &sum; </mo>]]> </eg>
<eg role="mathml"><![CDATA[<mo> .NOT. </mo>]]>                </eg>
<eg role="mathml"><![CDATA[<mo> and </mo>]]>                  </eg>
<eg role="mathml"><![CDATA[<mo> &InvisibleTimes; </mo>]]> </eg>
<eg role="mathml"><![CDATA[<mo mathvariant='bold'> + </mo>]]> </eg>

</div4>

<div4><head>Examples with fences and separators</head>

<p>Note that the <el>mo</el> elements in these examples
don't need explicit <att>fence</att> or <att>separator</att> attributes,
since these can be found using the
operator dictionary as described below. Some of these examples could also
be encoded using the <el>mfenced</el> element described in
<specref ref="presm_mfenced"/>.</p>

<p>(<var>a</var>+<var>b</var>)
<eg role="mathml"><![CDATA[
<mrow>
  <mo> ( </mo>
  <mrow>
    <mi> a </mi>
    <mo> + </mo>
    <mi> b </mi>
  </mrow>
  <mo> ) </mo>
</mrow>
]]></eg>
</p>

<p>[0,1)
<eg role="mathml"><![CDATA[
<mrow>
  <mo> [ </mo>
  <mrow>
    <mn> 0 </mn>
    <mo> , </mo>
    <mn> 1 </mn>
  </mrow>
  <mo> ) </mo>
</mrow>
]]></eg>
</p>

<p><var>f</var>(<var>x</var>,<var>y</var>)
<eg role="mathml"><![CDATA[
<mrow>
  <mi> f </mi>
  <mo> &ApplyFunction; </mo>
  <mrow>
    <mo> ( </mo>
    <mrow>
      <mi> x </mi>
      <mo> , </mo>
      <mi> y </mi>
    </mrow>
    <mo> ) </mo>
  </mrow>
</mrow>
]]></eg>
</p>
</div4>


<div4 id="presm_invisibleops"><head>Invisible operators</head>

<p>Certain operators that are <quote>invisible</quote> in traditional
mathematical notation should be represented using specific entity
references within <el>mo</el> elements, rather than simply
by nothing. The characters used for these <quote>invisible
operators</quote> are:
<table border="1">
<thead>
<tr>
<td>Character</td>
<td>Entity name</td>
<td>Short name</td>
<td>Examples of use</td>
</tr>
</thead>
<tbody>
<tr>
<td>U+2061</td>
<td><kw role="entity">ApplyFunction</kw></td>
<td><kw role="entity">af</kw></td>
<td><var>f</var>(<var>x</var>) sin <var>x</var></td> 
</tr>
<tr>
<td>U+2062</td>
<td><kw role="entity">InvisibleTimes</kw></td>
<td><kw role="entity">it</kw></td>
<td><var>x</var><var>y</var></td>
</tr>
<tr>
<td>U+2063</td>
<td><kw role="entity">InvisibleComma</kw></td>
<td><kw role="entity">ic</kw></td>
<td><var>m</var><sub>12</sub></td>
</tr>
<tr>
<td>U+2064</td>
<td></td>
<td></td>
<td>2&#xbe;</td>
</tr>
</tbody>
</table>
</p>

<p>The MathML representations of the examples in the above table are:
<eg role="mathml"><![CDATA[
<mrow>
  <mi> f </mi>
  <mo> &ApplyFunction; </mo>
  <mrow>
    <mo> ( </mo>
    <mi> x </mi>
    <mo> ) </mo>
  </mrow>
</mrow>
]]></eg>

<eg role="mathml"><![CDATA[
<mrow>
  <mi> sin </mi>
  <mo> &ApplyFunction; </mo>
  <mi> x </mi>
</mrow>
]]></eg>

<eg role="mathml"><![CDATA[
<mrow>
  <mi> x </mi>
  <mo> &InvisibleTimes; </mo>
  <mi> y </mi>
</mrow>
]]></eg>

<eg role="mathml"><![CDATA[
<msub>
  <mi> m </mi>
  <mrow>
    <mn> 1 </mn>
    <mo> &InvisibleComma; </mo>
    <mn> 2 </mn>
  </mrow>
</msub>
]]></eg>

<eg role="mathml"><![CDATA[
<mrow>
  <mn> 2 </mn>
  <mo> &#x2064; </mo>
  <mfrac>
    <mn> 3 </mn>
    <mn> 4 </mn>
  </mfrac>
</mrow>
]]></eg>
</p>

<p>The reasons for using specific <el>mo</el> elements for
invisible operators include:
<ulist>
<item><p>such operators should often have specific effects on visual
rendering (particularly spacing and linebreaking rules) that are not
the same as either the lack of any operator, or spacing represented by
<el>mspace</el> or <el>mtext</el>
elements;</p> 
</item>

<item><p>these operators should often have specific audio renderings
different than that of the lack of any operator;</p>
</item>

<item><p>automatic semantic interpretation of MathML presentation elements
is made easier by the explicit specification of such operators.</p>
</item>
</ulist>
</p>

<p>For example, an audio renderer might render <var>f</var>(<var>x</var>)
(represented as in the above examples) by speaking <quote>f of x</quote>, but use
the word <quote>times</quote> in its rendering of <var>x</var><var>y</var>.
Although its rendering must still be different depending on the structure
of neighboring elements (sometimes leaving out <quote>of</quote> or
<quote>times</quote> entirely), its task is made much easier by the use of
a different <el>mo</el> element for each invisible
operator.</p>
</div4>

<div4><head>Names for other special operators</head>

<p>MathML also includes <kw role="entity">DifferentialD</kw> (U+2146) for use
in an <el>mo</el> element representing the differential
operator symbol usually denoted by <quote>d</quote>.  The reasons for
explicitly using this special character are similar to those for using
the special characters for invisible operators described in the
preceding section.  </p>

</div4>

<div4><head>Detailed rendering rules for <el role="starttag">mo</el> elements</head>

<p>Typical visual rendering behaviors for <el>mo</el>
elements are more complex than for the other MathML token elements, so
the rules for rendering them are described in this separate
subsection.</p>

<p>Note that, like all rendering rules in MathML, these rules are
suggestions rather than requirements.  Furthermore, no attempt is made
to specify the rendering completely; rather, enough information is
given to make the intended effect of the various rendering attributes
as clear as possible.</p>

<div5 id="presm_opdict"><head>The operator dictionary</head>

<p>Many mathematical symbols, such as an integral sign, a plus sign,
or a parenthesis, have a well-established, predictable, traditional
notational usage. Typically, this usage amounts to certain default
attribute values for <el>mo</el> elements with specific
contents and a specific <att>form</att> attribute. Since these
defaults vary from symbol to symbol, MathML anticipates that renderers
will have an <quote>operator dictionary</quote> of default attributes for
<el>mo</el> elements (see <specref ref="oper-dict"/>) indexed by each
<el>mo</el> element's content and <att>form</att>
attribute.  If an <el>mo</el> element is not listed in the
dictionary, the default values shown in parentheses in the table of
attributes for <el>mo</el> should be used, since these
values are typically acceptable for a generic operator.</p>

<p>Some operators are <quote>overloaded</quote>, in the sense that they can occur
in more than one form (prefix, infix, or postfix), with possibly
different rendering properties for each form. For example, <quote>+</quote> can be
either a prefix or an infix operator. Typically, a visual renderer
would add space around both sides of an infix operator, while only in
front of a prefix operator. The <att>form</att> attribute allows
specification of which form to use, in case more than one form is
possible according to the operator dictionary and the default value
described below is not suitable.</p>
</div5>

<div5 id="presm_formdefval"><head>Default value of the <att>form</att> attribute</head>

<p>The <att>form</att> attribute does not usually have to be
specified explicitly, since there are effective heuristic rules for
inferring the value of the <att>form</att> attribute from the
context. If it is not specified, and there is more than one possible
form in the dictionary for an <el>mo</el> element with
given content, the renderer should choose which form to use as follows
(but see the exception for embellished operators, described later):
<ulist>
<item><p>If the operator is the first argument in an <el>mrow</el>
<phrase>with more than one argument</phrase>
(ignoring all space-like arguments (see <specref ref="presm_mspace"/>) in the
determination of both the length and the first argument), the prefix form
is used;</p>
</item>

<item><p>if it is the last argument in an <el>mrow</el> <phrase>with more than one argument</phrase>
(ignoring all space-like arguments), the postfix
form is used;</p>
</item>

<item><p>if it is the only element in an implicit or explicit <el>mrow</el>
and if it is in a script position of one of the elements listed in <specref ref="presm_scrlim"/>,
the postfix form is used;</p>
</item>

<item><p>in all other cases, including when the operator is not part of an
<el>mrow</el>, the infix form is used.</p>
</item>
</ulist>
</p>

<p>Note that the <el>mrow</el> discussed above may be <emph>inferred</emph>;
See <specref ref="presm_inferredmrow"/>.</p>

<p>Opening fences should have  <att>form</att><code>="prefix"</code>,
and closing fences should have <att>form</att><code>="postfix"</code>;
separators are usually <quote>infix</quote>, but not always,
depending on their surroundings. As with ordinary operators,
these values do not usually need to be specified explicitly.</p>

<p>If the operator does not occur in the dictionary with the specified
form, the renderer should use one of the forms that is available
there, in the order of preference: infix, postfix, prefix; if no forms
are available for the given <el>mo</el> element content, the
renderer should use the defaults given in parentheses in the table of
attributes for <el>mo</el>.</p>
</div5>

<div5><head>Exception for embellished operators</head>

<p>There is one exception to the above rules for choosing an <el>mo</el> element's default <att>form</att>
attribute. An <el>mo</el> element that is
<quote>embellished</quote> by one or more nested subscripts, superscripts,
surrounding text or whitespace, or style changes behaves differently. It is
the embellished operator as a whole (this is defined precisely, below)
whose position in an <el>mrow</el> is examined by the above
rules and whose surrounding spacing is affected by its form, not the <el>mo</el> element at its core; however, the attributes
influencing this surrounding spacing are taken from the <el>mo</el> element at the core (or from that element's
dictionary entry).</p>

<p>For example, the <quote>+<sub>4</sub></quote> in 
<var>a</var>+<sub>4</sub><var>b</var>
should be considered an infix operator as a whole, due to its position
in the middle of an <el>mrow</el>, but its rendering
attributes should be taken from the <el>mo</el> element
representing the <quote>+</quote>, or when those are not specified explicitly,
from the operator dictionary entry for <code>&lt;mo form="infix"&gt; +
&lt;/mo&gt;</code>.
The precise definition of an <quote>embellished operator</quote> is: 
<ulist>
<item><p>an <el>mo</el> element;</p>
</item>

<item><p>or one of the elements
<el>msub</el>,
<el>msup</el>,
<el>msubsup</el>,
<el>munder</el>,
<el>mover</el>,
<el>munderover</el>,
<el>mmultiscripts</el>,
<el>mfrac</el>, or
<el>semantics</el>
(<specref ref="mixing_semantic_annotations"/>), whose first argument exists and is an embellished
operator;</p>
</item>

<item><p>or one of the elements
<el>mstyle</el>,
<el>mphantom</el>, or
<el>mpadded</el>,
such that an <el>mrow</el> containing the same
arguments would be an embellished operator;</p>
</item>

<item><p>or an <el>maction</el> element whose selected
sub-expression exists and is an embellished operator;</p> </item>

<item><p>or an <el>mrow</el> whose arguments consist (in any order)
of one embellished operator and zero or more space-like elements.</p>
</item> 
</ulist>
Note that this definition permits nested embellishment only when
there are no intervening enclosing elements not in the above list.</p>

<p>The above rules for choosing operator forms and defining
embellished operators are chosen so that in all ordinary cases it will
not be necessary for the author to specify a <att>form</att>
attribute.</p>
</div5>

<div5><head>Rationale for definition of embellished operators</head>

<p>The following notes are included as a rationale for certain aspects
of the above definitions, but should not be important for most users
of MathML.</p>

<p>An <el>mfrac</el> is included as an
<quote>embellisher</quote> because of the common notation for a
differential operator:
<eg role="mathml"><![CDATA[
<mfrac>
  <mo> &DifferentialD; </mo>
  <mrow>
    <mo> &DifferentialD; </mo>
    <mi> x </mi>
  </mrow>
</mfrac>
]]></eg>
</p>

<p>Since the definition of embellished operator affects the use of the
attributes related to stretching, it is important that it includes
embellished fences as well as ordinary operators; thus it applies to
any <el>mo</el> element.</p>

<p>Note that an <el>mrow</el> containing a single argument
is an embellished operator if and only if its argument is an embellished
operator. This is because an <el>mrow</el> with a single
argument must be equivalent in all respects to that argument alone (as
discussed in <specref ref="presm_mrow"/>).
This means that an <el>mo</el> element that is the sole argument of an <el>mrow</el>
will determine its default <att>form</att> attribute based on that
<el>mrow</el>'s position in a surrounding, perhaps inferred,
<el>mrow</el> (if there is one), rather than based on its own
position in the <el>mrow</el> in which it is the sole argument.</p> 

<p>Note that the above definition defines every
<el>mo</el> element to be <quote>embellished</quote> &#x2014; that is,
<quote>embellished operator</quote> can be considered (and implemented in
renderers) as a special class of MathML expressions, of which
<el>mo</el> is a specific case.</p>
</div5>

<div5 id="presm_opspacing"><head>Spacing around an operator</head>

<p>The amount of horizontal space added around an operator (or embellished operator),
when it occurs in an <el>mrow</el>, can be directly
specified by the <att>lspace</att> and <att>rspace</att>
attributes. <phrase>Note that <att>lspace</att> and <att>rspace</att> should
be interpreted as leading and trailing space, in the case of RTL direction.</phrase>
By convention, operators that tend to bind tightly to their
arguments have smaller values for spacing than operators that tend to bind
less tightly. This convention should be followed in the operator dictionary
included with a MathML renderer.</p>

<p>Some renderers may choose to use no space around most operators
appearing within subscripts or superscripts, as is done in T<sub>E</sub>X.</p>

<p>Non-graphical renderers should treat spacing attributes, and other
rendering attributes described here, in analogous ways for their
rendering medium.  For example, more space might translate into a
longer pause in an audio rendering.</p>

</div5>
</div4>

<div4 id="presm_op_stretch"><head>Stretching of operators, fences and accents</head>

<p>Four attributes govern whether and how an operator (perhaps embellished)
stretches so that it matches the size of other elements: <att>stretchy</att>, <att>symmetric</att>, <att>maxsize</att>, and <att>minsize</att>. If an
operator has the attribute <att>stretchy</att>=<attval>true</attval>, then it (that is, each character in its content)
obeys the stretching rules listed below, given the constraints imposed by
the fonts and font rendering system. In practice, typical renderers will
only be able to stretch a small set of characters, and quite possibly will
only be able to generate a discrete set of character sizes.</p>

<p>There is no provision in MathML for specifying in which direction
(horizontal or vertical) to stretch a specific character or operator;
rather, when <att>stretchy</att>=<attval>true</attval> it
should be stretched in each direction for which stretching is possible
and reasonable for that character.
It is up to the renderer to know in which directions it is reasonable to
stretch a character, if it can stretch the character.
Most characters can be stretched in at most one direction
by typical renderers, but some renderers may be able to stretch certain
characters, such as diagonal arrows, in both directions independently.</p>

<p>The <att>minsize</att> and <att>maxsize</att>
attributes limit the amount of stretching (in either direction). These two
attributes are given as multipliers of the operator's normal size in the
direction or directions of stretching, or as absolute sizes using units.
For example, if a character has <att>maxsize</att>=<attval>300%</attval>, then it
can grow to be no more than three times its normal (unstretched) size.</p>

<p>The <att>symmetric</att> attribute governs whether the
height and 
depth above and below the <termref def="dt-axis">axis</termref> of the
character are forced to be equal  
(by forcing both height and depth to become the maximum of the two).
An example of a situation where one might set
<att>symmetric</att>=<attval>false</attval> 
arises with parentheses around a matrix not aligned on the <termref def="dt-axis">axis</termref>, which
frequently occurs when multiplying non-square matrices. In this case, one
wants the parentheses to stretch to cover the matrix, whereas stretching
the parentheses symmetrically would cause them to protrude beyond one edge
of the matrix. The <att>symmetric</att> attribute only applies
to characters that stretch vertically (otherwise it is ignored).</p>

<p>If a stretchy <el>mo</el> element is embellished (as defined
earlier in this section), the <el>mo</el> element at its core is
stretched to a size based on the context of the embellished operator
as a whole, i.e. to the same size as if the embellishments were not
present. For example, the parentheses in the following example (which
would typically be set to be stretchy by the operator dictionary) will be
stretched to the same size as each other, and the same size they would
have if they were not underlined and overlined, and furthermore will
cover the same vertical interval:
<eg role="mathml"><![CDATA[
<mrow>
  <munder>
    <mo> ( </mo>
    <mo> &UnderBar; </mo>
  </munder>
  <mfrac>
    <mi> a </mi>
    <mi> b </mi>
  </mfrac>
  <mover>
    <mo> ) </mo>
    <mo> &OverBar; </mo>
  </mover>
</mrow>
]]></eg>
</p>

<p>Note that this means that the stretching rules given below must
refer to the context of the embellished operator as a whole, not just
to the <el>mo</el> element itself.</p>

<div5><head>Example of stretchy attributes</head>

<p>This shows one way to set the maximum size of a parenthesis so that
it does not grow, even though its default value is
<att>stretchy</att>=<attval>true</attval>.
<eg role="mathml"><![CDATA[
<mrow>
  <mo maxsize="1]]><phrase>00%</phrase><![CDATA["> ( </mo>
  <mfrac>
    <mi> a </mi> <mi> b </mi>
  </mfrac>
  <mo maxsize="1]]><phrase>00%</phrase><![CDATA["> ) </mo>
</mrow>
]]></eg>
</p>

<p>The above should render as 
<graphic role="inline" source="image/f3001.gif" alt="(\frac{a}{b})"/> 
as opposed to the default rendering
<graphic role="inline" source="image/f3002.gif" alt="\left(\frac{a}{b}\right)"/>.</p>

<p>Note that each parenthesis is sized independently; if only one of
them had <att>maxsize</att>=<attval>100%</attval>, they would render with different
sizes.</p>
</div5>

<div5><head>Vertical Stretching Rules</head>
<p>The general rules governing stretchy operators are:</p>
<ulist>
<item><p>If a stretchy operator is a direct sub-expression of an <el>mrow</el> element, or is the sole direct sub-expression of an
<el>mtd</el> element in some row of a table, then it should
stretch to cover the height and depth (above and below the <phrase>axis</phrase>) of the <emph>non</emph>-stretchy direct sub-expressions in the
<el>mrow</el> element or table row, unless stretching is
constrained by <att>minsize</att> or <att>maxsize</att> attributes.</p>
</item>

<item><p>In the case of an embellished stretchy operator, the preceding
rule applies to the stretchy operator at its core.</p>
</item>

<item><p>The preceding rules also apply in situations where the <el>mrow</el> element is inferred.</p>
</item>

<item><p>The rules for symmetric stretching only apply if
<att>symmetric</att>=<attval>true</attval> and if the stretching occurs in an <el>mrow</el>
or in an <el>mtr</el> whose <att>rowalign</att> value is either <attval>baseline</attval>
or <attval>axis</attval>.</p>
</item>
</ulist>

<p>The following algorithm specifies the height and depth of vertically stretched characters:
</p>
<olist>
<item><p>Let <code>maxheight</code> and <code>maxdepth</code> be the maximum height and depth of the
<emph>non</emph>-stretchy siblings within the same <el>mrow</el> or <el>mtr</el>.
Let axis be the height of the math axis above the baseline.</p>
<p>Note that even if a <att>minsize</att> or <att>maxsize</att> value is set on a stretchy operator,
it is <emph>not</emph> used in the initial calculation of the maximum height and depth of an <el>mrow</el>.</p>
</item>
<item><p>
If <att>symmetric</att>=<attval>true</attval>, then the computed height
and depth of the stretchy operator are:
<eg role="algorithm"><![CDATA[
   height=max(maxheight-axis, maxdepth+axis) + axis
   depth =max(maxheight-axis, maxdepth+axis) - axis
]]></eg>
Otherwise the height and depth are:
<eg role="algorithm"><![CDATA[
   height= maxheight
   depth = maxdepth
]]></eg>
</p>
</item>
<item><p>
If the total size = height+depth is less than minsize
or greater than maxsize, increase or decrease both
height and depth proportionately so that the effective
size meets the constraint.
</p>
</item>
</olist>




<p>By default, most vertical arrows, along with most opening and closing fences are defined in the operator
dictionary to stretch by default.  </p>

<p>In the case of a stretchy operator in a table cell (i.e. within an
<el>mtd</el> element), the above rules assume each cell of
the table row containing the stretchy operator covers exactly one row.
(Equivalently, the value of the <att>rowspan</att> attribute is
assumed to be 1 for all the table cells in the table row, including
the cell containing the operator.)  When this is not the case, the
operator should only be stretched vertically to cover those table
cells that are entirely within the set of table rows that the
operator's cell covers. Table cells that extend into rows not covered
by the stretchy operator's table cell should be ignored.  See 
<specref ref="presm_mtdatts"/> for details about the <att>rowspan</att> attribute. 

</p>
</div5>

<div5 id="presm_horiz_stretch_rules"><head>Horizontal Stretching Rules</head>
<ulist>
<item><p>If a stretchy operator, or an embellished stretchy operator,
is a direct sub-expression of an <el>munder</el>,
<el>mover</el>, or <el>munderover</el> element, 
or if it is the sole direct sub-expression of an <el>mtd</el> element in some
column of a table (see <el>mtable</el>), then it, or the <el>mo</el> element at its core, should stretch to cover
the width of the other direct sub-expressions in the given element (or
in the same table column), given the constraints mentioned above.</p>
</item>

<item><p>In the case of an embellished stretchy operator, the preceding
rule applies to the stretchy operator at its core.</p>
</item>

</ulist>

<p>By default, most horizontal arrows and some accents stretch
horizontally.</p>

<p>In the case of a stretchy operator in a table cell (i.e. within an
<el>mtd</el> element), the above rules assume each cell of
the table column containing the stretchy operator covers exactly one
column.  (Equivalently, the value of the <att>columnspan</att>
attribute is assumed to be 1 for all the table cells in the table row,
including the cell containing the operator.)  When this is not the
case, the operator should only be stretched horizontally to cover
those table cells that are entirely within the set of table columns
that the operator's cell covers. Table cells that extend into columns
not covered by the stretchy operator's table cell should be
ignored.  See <specref ref="presm_mtdatts"/> for details about the <att>rowspan</att> attribute. </p>

<p>The rules for horizontal stretching include <el>mtd</el>
elements to allow arrows to stretch for use in commutative diagrams
laid out using <el>mtable</el>. The rules for the horizontal
stretchiness include scripts to make examples such as the following
work:
<eg role="mathml"><![CDATA[
<mrow>
  <mi> x </mi>
  <munder>
    <mo> &RightArrow; </mo>
    <mtext> maps to </mtext>
  </munder>
  <mi> y </mi>
</mrow>
]]></eg>
</p>

<p>This displays as 
<graphic role="inline" source="image/f3003.gif" alt="x \widearrow{\mathrm{maps~to}} y"/>.</p>
</div5>

<div5><head>Rules Common to both Vertical and Horizontal Stretching</head>

<p>If a stretchy operator is not required to stretch (i.e. if it is
not in one of the locations mentioned above, or if there are no other
expressions whose size it should stretch to match), then it has the
standard (unstretched) size determined by the font and current
<att>mathsize</att>.</p>

<p>If a stretchy operator is required to stretch, but all other expressions
in the containing element (as described above) are also stretchy,
all elements that can stretch should grow to the maximum of the normal
unstretched sizes of all elements in the containing object, if they can
grow that large. If the value of <att>minsize</att> or <att>maxsize</att> prevents 
<phrase>that, then the specified</phrase> (min or max) size is
used.</p>

<p>For example, in an <el>mrow</el> containing nothing but
vertically stretchy operators, each of the operators should stretch to
the maximum of all of their normal unstretched sizes, provided no
other attributes are set that override this behavior. Of course,
limitations in fonts or font rendering may result in the final,
stretched sizes being only approximately the same.</p>
</div5>
</div4>

<div4 id="presm_mo_linebreaks"> <head>Examples of Linebreaking</head>
<p>The following example demonstrates forced linebreaks and forced alignment:</p>
<eg role="mathml"><![CDATA[
 <mrow>
  <mrow>  <mi>f</mi> <mo>&ApplyFunction;</mo> <mo>(</mo> <mi>x</mi> <mo>)</mo>  </mrow>

  <mo id='eq1-equals'>=</mo>
  <mrow>
   <msup>
    <mrow> <mo>(</mo> <mrow> <mi>x</mi> <mo>+</mo> <mn>1</mn> </mrow> <mo>)</mo> </mrow>
    <mn>4</mn>
   </msup>
   <mo linebreak='newline' linebreakstyle='before'
                     indentalign='id' indenttarget='eq1-equals'>=</mo>
   <mrow>
    <msup> <mi>x</mi> <mn>4</mn> </msup>
    <mo id='eq1-plus'>+</mo>
    <mrow>  <mn>4</mn> <mo>&InvisibleTimes;</mo> <msup> <mi>x</mi> <mn>3</mn> </msup>  </mrow>
    <mo>+</mo>
    <mrow>  <mn>6</mn> <mo>&InvisibleTimes;</mo> <msup> <mi>x</mi> <mn>2</mn> </msup>  </mrow>

    <mo linebreak='newline' linebreakstyle='before'
                      indentalignlast='id' indenttarget='eq1-plus'>+</mo>
    <mrow>  <mn>4</mn> <mo>&InvisibleTimes;</mo> <mi>x</mi>  </mrow>
    <mo>+</mo>
    <mn>1</mn>
   </mrow>
  </mrow>
 </mrow>
]]></eg>
<p>This displays as </p>
<p><graphic source="image/linebreak-example1.png" alt="example with equal and plus signs aligned"/>
</p>
<p>Note that because <att>indentalignlast</att> defaults to <attval>indentalign</attval>,
in the above example <att>indentalign</att> could have been used in place of
<att>indentalignlast</att>.  Also, the specifying <code>linebreakstyle='before'</code>
is not needed because that is the default value.  </p>
</div4>

</div3>

<div3 id="presm_mtext"><head>Text <el role="defn starttag">mtext</el> <coreref ref="mtext"/></head>

<div4><head>Description</head>

<p>An <el>mtext</el> element is used to represent
arbitrary text that should be rendered as itself. In general, the
<el>mtext</el> element is intended to denote commentary
text.</p>

<p>Note that some text with a clearly defined notational role might be
more appropriately marked up using <el>mi</el> or
<el>mo</el>; this is discussed further below.</p>

<p>An <el>mtext</el> element can be used to contain
<quote>renderable whitespace</quote>, i.e. invisible characters that are
intended to alter the positioning of surrounding elements. In non-graphical
media, such characters are intended to have an analogous effect, such as
introducing positive or negative time delays or affecting rhythm in an
audio renderer. This is not related to any whitespace in the source MathML
consisting of blanks, newlines, tabs, or carriage returns; whitespace
present directly in the source is trimmed and collapsed, as described in
<specref ref="fund_collapse"/>. Whitespace that is intended to be rendered
as part of an element's content must be represented by entity references
or <el>mspace</el> elements
(unless it consists only of single blanks between non-whitespace
characters).</p>

</div4>

<div4><head>Attributes</head>
<p><el>mtext</el> elements accept the attributes listed in
<specref ref="presm_commatt"/>.</p>

<p>See also the warnings about the legal grouping of <quote>space-like elements</quote>
in <specref ref="presm_mspace"/>, and about the use of
such elements for <quote>tweaking</quote> in <specref ref="presm_warnfinetuning"/>.</p>
</div4>

<div4><head>Examples</head>
<eg role="mathml"><![CDATA[
<mtext> Theorem 1: </mtext>
<mtext> &ThinSpace; </mtext>
<mtext> &ThickSpace;&ThickSpace; </mtext>
<mtext> /* a comment */ </mtext>
]]></eg>
</div4>

<div4 id="presm_mixtextmath"><head>Mixing text and mathematics</head>

<p>In some cases, text embedded in mathematics could be more appropriately
represented using <el>mo</el> or <el>mi</el> elements.
For example, the expression 'there exists
<graphic role="inline" source="image/f3004.gif" alt="\delta&gt;0"/>
such that <var>f</var>(<var>x</var>) &lt;1' is equivalent to
<graphic role="inline" source="image/f3005.gif" alt="\exists \delta&gt;0 \backepsilon f(x)&lt;1"/> 
and could be represented as:
<eg role="mathml"><![CDATA[
<mrow>
  <mo> there exists </mo>
  <mrow>
    <mrow>
      <mi> &delta; </mi>
      <mo> &gt; </mo>
      <mn> 0 </mn>
    </mrow>
    <mo> such that </mo>
    <mrow>
      <mrow>
        <mi> f </mi>
        <mo> &ApplyFunction; </mo>
        <mrow>
          <mo> ( </mo>
          <mi> x </mi>
          <mo> ) </mo>
        </mrow>
      </mrow>
      <mo> &lt; </mo>
      <mn> 1 </mn>
    </mrow>
  </mrow>
</mrow>
]]></eg>
</p>

<p>An example involving an <el>mi</el> element is:
<var>x</var>+<var>x</var><sup>2</sup>+&#183;&#183;&#183;+<var>x</var><sup><var>n</var></sup>.
In this example, ellipsis should be represented using an <el>mi</el> element, since it takes the place of a term in the
sum; (see <specref ref="presm_mi"/>).</p>

<p>On the other hand, expository text within MathML is best
represented with an <el>mtext</el> element. An example
of this is: <eg role="text"> Theorem 1: if <var>x</var> &gt; 1, then
<var>x</var><sup>2</sup> &gt; <var>x</var>.  </eg> However, when MathML is
embedded in HTML, or another document markup language, the example is
probably best rendered with only the two inequalities represented as
MathML at all, letting the text be part of the surrounding HTML.</p>

<p>Another factor to consider in deciding how to mark up text is the
effect on rendering. Text enclosed in an <el>mo</el>
element is unlikely to be found in a renderer's operator dictionary,
so it will be rendered with the format and spacing appropriate for an
<quote>unrecognized operator</quote>, which may or may not be better than the
format and spacing for <quote>text</quote> obtained by using an
<el>mtext</el> element. An ellipsis entity in an
<el>mi</el> element is apt to be spaced more appropriately
for taking the place of a term within a series than if it appeared in
an <el>mtext</el> element.</p>
</div4>
</div3>

<div3 id="presm_mspace"><head>Space <el role="defn emptytag">mspace</el> <coreref ref="mspace"/></head>

<div4><head>Description</head>

<p>An <el>mspace</el> empty element represents a blank
space of any desired size, as set by its attributes.  It can also be
used to make linebreaking suggestions to a visual renderer.
Note that the default values for attributes have been chosen so that
they typically will have no effect on rendering.  Thus, the <el>mspace</el> element is generally used with one
or more attribute values explicitly specified.
</p>
<p>Note the warning about the legal grouping of <quote>space-like
elements</quote> given below, and the warning about the use of such
elements for <quote>tweaking</quote> in <specref ref="presm_warnfinetuning"/>.
See also the other elements that can render as
whitespace, namely <el>mtext</el>, <el>mphantom</el>, and
<el>maligngroup</el>.</p> </div4>

<div4><head>Attributes</head>
<p>In addition to the attributes listed below,
<el>mspace</el> elements accept the attributes described in <specref ref="presm_commatt"/>,
but note that <att>mathvariant</att> and <att>mathcolor</att> have no effect and that
<att>mathsize</att> only affects the interpretation of units in sizing
attributes (see <specref ref="fund_units"/>).
<phrase><el>mspace</el> also accepts the indentation attributes described in <specref ref="presm_lbindent_attrs"/>.</phrase>
<!-- We didn't really want to do this, did we?
Additionally, it accepts the attributes described in
<specref ref="presm_lbindent_attrs"/> 
-->
</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">width</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0em</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desired width of the space.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">height</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0ex</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desired height (above the baseline) of the space.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">depth</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0ex</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desired depth (below the baseline) of the space.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">linebreak</td>
<td>"auto" | "newline" | "nobreak" | "goodbreak" | "badbreak"</td>
<td>auto</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the desirability of a linebreak at this space.
<phrase>This attribute should be ignored if any dimensional attribute is set.</phrase>
</td>
</tr>
</tbody>
</table>

<p>Linebreaking was originally specified on <el>mspace</el> in MathML2,
but controlling linebreaking on <intref ref="presm_mo"><el>mo</el></intref>
is to be preferred <phrase> starting with MathML 3.
MathML 3 adds new linebreaking attributes only to <el>mo</el>, not <el>mspace</el>.
However, because a linebreak can be specified on <el>mspace</el>,
control over the indentation that follows that break can be specified using the attributes listed in
<specref ref="presm_lbindent_attrs"/></phrase>.
</p>
<p>
The value <attval>indentingnewline</attval> was defined in MathML2 for <el>mspace</el>;
it is now deprecated.  Its meaning is the same as <att>newline</att>, which is compatible with its earlier use when no other linebreaking attributes are specified.
Note that <att>linebreak</att> values on adjacent <el>mo</el> and <el>mspace</el> elements do
not interact; a <attval>nobreak</attval> on an <el>mspace</el> will
not, in itself, inhibit a break on an adjacent <el>mo</el> element.
</p>

<!-- What does this mean??
<p>The spacing that normally follows an operator is not used at the end of a line. Similarly, the space that normally precedes an operator is not used at the beginning of a line.</p>
-->

  <issue role="closed" id="missing-char">
    <head>Missing Character</head>
    <p>There are two ways that a character value might not be present.
The first is that it wasn't part of the MathML.
The second is that it was inserted, but the line from the character to the line break was so long
that it wrapped and the character ended up on a line prior to the previous line.
Is the "Indent" behavior appropriate?</p>
  </issue>

  <issue role="closed" id="indent-count">
    <head>Indent Count</head>
    <p>Another possible value, which is similar to what Word uses, is specify a number and that number means 'indent to the ith operator on the previous line'. The operator is not specified.</p>
  </issue>

  <issue role="closed" id="indent-align">
    <head>Indent Align</head>
    <p>Another option is to add a new element (or reuse malignmark) and allow the value "AlignMark" as an indent value. In this case, it would align to the mark in the previous line.</p>
  </issue>

  <issue role="closed" id="indent-id">
    <head>Indent ID</head>
    <p>Yet another idea is to have indent=id and have an id specified on some element mean the point to be indented to.</p>
  </issue>
</div4>

<div4><head>Examples</head>

<eg role="mathml-fragment"><![CDATA[
<mspace height="3ex" depth="2ex"/>

<mrow>
  <mi>a</mi>
  <mo id="firstop">+</mo>
  <mi>b</mi>
  <mspace linebreak="newline" indentalign="id" indenttarget="firstop"/>
  <mo>+</mo>
  <mi>c</mi>
</mrow>
]]></eg>
<p>
In the last example, <el>mspace</el> will cause the line to end after the "b" and the following line to be indented so that the "+" that follows will align with the "+" with <att>id</att>="firstop".
</p>
</div4>

<div4><head>Definition of space-like elements</head>

<p>A number of MathML presentation elements are <quote>space-like</quote> in the
sense that they typically render as whitespace, and do not affect the
mathematical meaning of the expressions in which they appear. As a
consequence, these elements often function in somewhat exceptional
ways in other MathML expressions. For example, space-like elements are
handled specially in the suggested rendering rules for
<el>mo</el> given in <specref ref="presm_mo"/>. 
The following MathML elements are defined to be <quote>space-like</quote>:
<ulist>
<item><p>an <el>mtext</el>, <el>mspace</el>,
<el>maligngroup</el>, or <el>malignmark</el>
element;</p> </item>

<item><p>an <el>mstyle</el>, <el>mphantom</el>, or
<el>mpadded</el> element, all of whose direct sub-expressions
are space-like;</p> </item>

<item><p>an <el>maction</el> element whose selected
sub-expression exists and is space-like;</p> </item>

<item><p>an <el>mrow</el> all of whose direct
sub-expressions are space-like.</p>
</item>
<!-- note: not an embellished space-like thing, though this would be arguable. -->
</ulist>
</p>

<p>Note that an <el>mphantom</el> is <emph>not</emph>
automatically defined to be space-like, unless its content is
space-like. This is because operator spacing is affected by whether
adjacent elements are space-like. Since the
<el>mphantom</el> element is primarily intended as an aid
in aligning expressions, operators adjacent to an
<el>mphantom</el> should behave as if they were adjacent
to the <emph>contents</emph> of the <el>mphantom</el>,
rather than to an equivalently sized area of whitespace.</p>
</div4>

<div4><head>Legal grouping of space-like elements</head>

<p>Authors who insert space-like elements or
<el>mphantom</el> elements into an existing MathML
expression should note that such elements <emph>are</emph> counted as
arguments, in elements that require a specific number of arguments,
or that interpret different argument positions differently.</p>

<p>Therefore, space-like elements inserted into such a MathML element
should be grouped with a neighboring argument of that element by
introducing an <el>mrow</el> for that purpose. For example,
to allow for vertical alignment on the right edge of the base of a
superscript, the expression
<eg role="mathml-error"><![CDATA[
<msup>
  <mi> x </mi>
  <malignmark edge="right"/>
  <mn> 2 </mn>
</msup>
]]></eg>
is illegal, because <el>msup</el> must have exactly 2 arguments;
the correct expression would be:
<eg role="mathml"><![CDATA[
<msup>
  <mrow>
    <mi> x </mi>
    <malignmark edge="right"/>
  </mrow>
  <mn> 2 </mn>
</msup>
]]></eg>
</p>

<p>See also the warning about <quote>tweaking</quote> in
<specref ref="presm_warnfinetuning"/>.</p>
</div4>
</div3>

<div3 id="presm_ms"><head>String Literal <el role="defn starttag">ms</el> <coreref ref="ms"/></head>

<div4><head>Description</head>

<p>The <el>ms</el> element is used to represent
<quote>string literals</quote> in expressions meant to be interpreted by
computer algebra systems or other systems containing <quote>programming
languages</quote>. By default, string literals are displayed surrounded by
double quotes, with no extra spacing added around the string.
As explained in <specref ref="presm_mtext"/>, ordinary text
embedded in a mathematical expression should be marked up with <el>mtext</el>,
or in some cases <el>mo</el> or <el>mi</el>, but never with <el>ms</el>.</p>


<p>Note that the string literals encoded by <el>ms</el> are <phrase>made up of characters, <el>mglyph</el>s and
<el>malignmark</el>s</phrase> rather than <quote>ASCII
strings</quote>.  For
example, <code>&lt;ms&gt;&amp;amp;&lt;/ms&gt;</code> represents a string
literal containing a single character, <code>&amp;</code>, and
<code>&lt;ms&gt;&amp;amp;amp;&lt;/ms&gt;</code> represents a string literal
containing 5 characters, the first one of which is
<code>&amp;</code>.</p>

<p>The content of <el>ms</el> elements should be rendered with visible
<quote>escaping</quote> of certain characters in the content,
including at least <phrase>the left and right quoting
characters</phrase>, and preferably whitespace other than individual
space characters. The intent is for the viewer to see that the
expression is a string literal, and to see exactly which characters
form its content. For example, <code>&lt;ms&gt;double quote is
"&lt;/ms&gt;</code> might be rendered as "double quote is \"".</p>

<p>Like all token elements, <el>ms</el> <emph>does</emph> trim and
collapse whitespace in its content according to the rules of 
<specref ref="fund_collapse"/>, so whitespace intended to remain in
the content should be encoded as described in that section.</p>
</div4>

<div4><head>Attributes</head>

<p><el>ms</el> elements accept the attributes listed in
<specref ref="presm_commatt"/>, and additionally: </p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">lquote</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><kw role="entity">quot</kw></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the opening quote to enclose the content.
(not necessarily &#x2018;left quote&#x2019; in RTL context).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rquote</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><kw role="entity">quot</kw></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the closing quote to enclose the content.
(not necessarily &#x2018;right quote&#x2019; in RTL context).
</td>
</tr>
</tbody>
</table>

</div4>
</div3>

</div2>

<div2 id="presm_genlayout"><head>General Layout Schemata</head>

<p>Besides tokens there are several families of MathML presentation
elements. One family of elements deals with various
<quote>scripting</quote> notations, such as subscript and
superscript. Another family is concerned with matrices and tables. The
remainder of the elements, discussed in this section, describe other basic
notations such as fractions and radicals, or deal with general functions
such as setting style properties and error handling.</p>

<div3 id="presm_mrow"><head>Horizontally Group Sub-Expressions
  <el role="defn starttag">mrow</el> <coreref ref="mrow"/></head>

<div4><head>Description</head>

<p>An <el>mrow</el> element is used to group together any
number of sub-expressions, usually consisting of one or more <el>mo</el> elements acting as <quote>operators</quote> on one
or more other expressions that are their <quote>operands</quote>.</p>

<p>Several elements automatically treat their arguments as if they were
contained in an <el>mrow</el> element. See the discussion of
inferred <el>mrow</el>s in <specref ref="presm_reqarg"/>.
See also <el>mfenced</el> (<specref ref="presm_mfenced"/>),
which can effectively form an <el>mrow</el> containing its arguments separated by commas.</p>

<p><el>mrow</el> elements are typically rendered visually
as a horizontal row of their arguments, left to right in the order in
which the arguments occur<phrase> within</phrase> a context with LTR directionality,
or right to left <phrase>within a context with RTL directionality</phrase>.  
The <att>dir</att> attribute can be used to specify 
the directionality for a specific <el>mrow</el>, otherwise it inherits the
directionality from the context. For aural agents, the arguments would be
rendered audibly as a sequence of renderings of
the arguments. The description in <specref ref="presm_mo"/> of suggested rendering
rules for <el>mo</el> elements assumes that all horizontal
spacing between operators and their operands is added by the rendering
of <el>mo</el> elements (or, more generally, embellished
operators), not by the rendering of the <el>mrow</el>s
they are contained in.</p>

<p>MathML provides support for both automatic and manual
linebreaking of  expressions (that is, to break excessively long
expressions into several lines). All such linebreaks take place
within <el>mrow</el>s, whether they are explicitly marked up
in the document, or inferred (See <specref ref="presm_inferredmrow"/>),
although the control of linebreaking is effected through attributes
on other elements (See <specref ref="presm_linebreaking"/>).
</p>

</div4>

<div4><head>Attributes</head>

<p><el>mrow</el> elements accept the attribute listed below in addition to
those listed in <specref ref="presm_presatt"/>.</p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">dir</td>
<td>"ltr" | "rtl"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the overall directionality <code>ltr</code> (Left To Right) or
<code>rtl</code> (Right To Left) to use to layout the children of the row.
See <specref ref="presm_bidi_math"/> for further discussion.
</td>
</tr>
</tbody>
</table>


</div4>

<div4><head>Proper grouping of sub-expressions using <el role="starttag">mrow</el></head>

<p>Sub-expressions should be grouped by the document author in the same way
as they are grouped in the mathematical interpretation of the expression;
that is, according to the underlying <quote>syntax tree</quote> of the
expression. Specifically, operators and their mathematical arguments should
occur in a single <el>mrow</el>; more than one operator
should occur directly in one <el>mrow</el> only when they
can be considered (in a syntactic sense) to act together on the interleaved
arguments, e.g. for a single parenthesized term and its parentheses, for
chains of relational operators, or for sequences of terms separated by
<code>+</code> and <code>-</code>. A precise rule is given below.</p>

<p>Proper grouping has several purposes: it improves display by
possibly affecting spacing; it allows for more intelligent
linebreaking and indentation; and it simplifies possible semantic
interpretation of presentation elements by computer algebra systems,
and audio renderers.</p>

<p>Although improper grouping will sometimes result in suboptimal
renderings, and will often make interpretation other than pure visual
rendering difficult or impossible, any grouping of expressions using
<el>mrow</el> is allowed in MathML syntax; that is,
renderers should not assume the rules for proper grouping will be
followed.</p>

<div5><head><el role="starttag">mrow</el> of one argument</head>

<p>MathML renderers are required to treat an <el>mrow</el>
element containing exactly one argument as equivalent in all ways to
the single argument occurring alone, provided there are no attributes
on the <el>mrow</el> element. If there are
attributes on the <el>mrow</el> element, no
requirement of equivalence is imposed. This equivalence condition is
intended to simplify the implementation of MathML-generating software
such as template-based authoring tools. It directly affects the
definitions of embellished operator and space-like element and the
rules for determining the default value of the <att>form</att>
attribute of an <el>mo</el> element;
see <specref ref="presm_mo"/> and <specref ref="presm_mspace"/>. See also the discussion of equivalence of MathML
expressions in <specref ref="interf_genproc"/>.</p>
</div5>

<div5><head>Precise rule for proper grouping</head>

<p>A precise rule for when and how to nest sub-expressions using
<el>mrow</el> is especially desirable when generating
MathML automatically by conversion from other formats for displayed
mathematics, such as T<sub>E</sub>X, which don't always specify how sub-expressions
nest. When a precise rule for grouping is desired, the following rule
should be used:</p>

<p>Two adjacent operators, <phrase>possibly embellished</phrase>, possibly separated by operands (i.e. anything
other than operators), should occur in the same
<el>mrow</el> only when the leading operator has an infix or
prefix form (perhaps inferred), the following operator has an infix or
postfix form, and the operators have the same priority in the 
operator dictionary  (<specref ref="oper-dict"/>).
In all other cases, nested <el>mrow</el>s should be used.</p>

<p>When forming a nested <el>mrow</el> (during generation
of MathML) that includes just one of two successive operators with
the forms mentioned above (which mean that either operator could in
principle act on the intervening operand or operands), it is necessary
to decide which operator acts on those operands directly (or would do
so, if they were present). Ideally, this should be determined from the
original expression; for example, in conversion from an
operator-precedence-based format, it would be the operator with the
higher precedence.</p>

<p>Note that the above rule has no effect on whether any MathML
expression is valid, only on the recommended way of generating MathML
from other formats for displayed mathematics or directly from written
notation.</p>

<p>(Some of the terminology used in stating the above rule <phrase>in</phrase> defined
in <specref ref="presm_mo"/>.)</p>
</div5>
</div4>

<div4><head>Examples</head>
<p>As an example, 2<var>x</var>+<var>y</var>-<var>z</var>
should be written as:
<eg role="mathml"><![CDATA[
<mrow>
  <mrow>
    <mn> 2 </mn>
    <mo> &InvisibleTimes; </mo>
    <mi> x </mi>
  </mrow>
  <mo> + </mo>
  <mi> y </mi>
  <mo> - </mo>
  <mi> z </mi>
</mrow>
]]></eg>
</p>

<p>The proper encoding of (<var>x</var>, <var>y</var>) furnishes a less obvious
example of nesting <el>mrow</el>s:
<eg role="mathml"><![CDATA[
<mrow>
  <mo> ( </mo>
  <mrow>
    <mi> x </mi>
    <mo> , </mo>
    <mi> y </mi>
  </mrow>
  <mo> ) </mo>
</mrow>
]]></eg>
</p>

<p>In this case, a nested <el>mrow</el> is required inside
the parentheses, since parentheses and commas, thought of as fence and
separator <quote>operators</quote>, do not act together on their arguments.</p>
</div4>
</div3>

<div3 id="presm_mfrac"><head>Fractions <el role="defn starttag">mfrac</el> <coreref ref="mfrac"/></head>

<div4><head>Description</head>

<p>The <el>mfrac</el> element is used for fractions. It can
also be used to mark up fraction-like objects such as binomial coefficients
and Legendre symbols. The syntax for <el>mfrac</el> is
<eg>
&lt;mfrac&gt; <emph>numerator</emph> <emph>denominator</emph> &lt;/mfrac&gt;
</eg></p>
<p>The <el>mfrac</el> element sets <att>displaystyle</att> to <attval>false</attval>, or if it
was already false increments <att>scriptlevel</att> by 1,
within <emph>numerator</emph> and <emph>denominator</emph>.
(See <specref ref="presm_scriptlevel"/>.) </p>

</div4>

<div4><head>Attributes</head>

<p><el>mfrac</el> elements accept the attributes listed below
in addition to those listed in <specref ref="presm_presatt"/>.
The fraction line, if any, should be drawn using the color specified by <att>mathcolor</att>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">linethickness</td>
<td> <intref ref="type_length"><emph>length</emph></intref> | "thin" | "medium" | "thick"</td>
<td>medium</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the thickness of the horizontal <quote>fraction bar</quote>, or <quote>rule</quote>
The default value is <attval>medium</attval>,
<attval>thin</attval> is thinner, but visible, 
<attval>thick</attval> is thicker;
the exact thickness of these is left up to the rendering agent.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">numalign</td>
<td>"left" | "center" | "right"</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the alignment of the numerator over the fraction.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">denomalign</td>
<td>"left" | "center" | "right"</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the alignment of the denominator under the fraction.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">bevelled</td>
<td>"true" | "false"</td>
<td>false</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the fraction should be displayed in a beveled style
(the numerator slightly raised, the denominator slightly lowered
and both separated by a slash), rather than "build up" vertically.
See below for an example.
</td>
</tr>
</tbody>
</table>

<p>Thicker lines (e.g. <att>linethickness</att>="thick") might be used with nested fractions;
a value of "0" renders without the bar such as for  binomial coefficients.
These cases are shown below:
<graphic source="image/f3007.gif" alt="\binom{a}{b} \quad \genfrac{}{}{1pt}{}{\frac{a}{b}}{\frac{c}{d}}"/></p>

<p>An example illustrating the bevelled form is shown below:
<graphic source="image/f3008.gif" alt="\frac{1}{x^3 + \frac{x}{3}} = \raisebox{1ex}{$1$}\!        \left/ \!\raisebox{-1ex}{$x^3+\frac{x}{3}$} \right."/>
In a RTL directionality context,  the numerator leads (on the right),
the denominator follows (on the left) and the diagonal line slants upwards going from right to left<phrase> (See <specref ref="presm_bidi_math"/> for clarification)</phrase>.
Although this format is an established convention, it is not universally
followed; for situations where a forward slash is desired in a RTL context,
alternative markup, such as an <el>mo</el> within an <el>mrow</el> should be used.
</p>

</div4>

<div4><head>Examples</head>

<p>The examples shown above can be represented in MathML as:
<eg role="mathml"><![CDATA[
<mrow>
   <mo> ( </mo>
   <mfrac linethickness="0">
      <mi> a </mi>
      <mi> b </mi>
   </mfrac>
   <mo> ) </mo>
</mrow>
<mfrac linethickness="2]]><phrase>00%</phrase><![CDATA[">
   <mfrac>
      <mi> a </mi>
      <mi> b </mi>
   </mfrac>
   <mfrac>
      <mi> c </mi>
      <mi> d </mi>
   </mfrac>
</mfrac>
]]></eg>

<eg role="mathml"><![CDATA[
<mfrac>
   <mn> 1 </mn>
   <mrow>
      <msup>
         <mi> x </mi>
         <mn> 3 </mn>
       </msup>
       <mo> + </mo>
       <mfrac>
         <mi> x </mi>
         <mn> 3 </mn>
       </mfrac>
   </mrow>
</mfrac>
<mo> = </mo>
<mfrac bevelled="true">
   <mn> 1 </mn>
   <mrow>
      <msup>
         <mi> x </mi>
         <mn> 3 </mn>
       </msup>
       <mo> + </mo>
       <mfrac>
         <mi> x </mi>
         <mn> 3 </mn>
       </mfrac>
   </mrow>
</mfrac>
]]></eg>

</p>

<p>A more generic example is:
<eg role="mathml"><![CDATA[
<mfrac>
   <mrow>
      <mn> 1 </mn>
      <mo> + </mo>
      <msqrt>
         <mn> 5 </mn>
      </msqrt>
   </mrow>
   <mn> 2 </mn>
</mfrac>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_mroot"><head>Radicals <el role="defn starttag">msqrt</el> <coreref type="no"/>,
<el role="defn starttag">mroot</el> <coreref ref="msqrt"/></head>

<div4><head>Description</head>

<p>These elements construct radicals. The <el>msqrt</el> element is
used for square roots, while the <el>mroot</el> element is used
to draw radicals with indices, e.g. a cube root. The syntax for these
elements is:
<eg>
&lt;msqrt&gt; <emph>base</emph> &lt;/msqrt&gt;
&lt;mroot&gt; <emph>base</emph> <emph>index</emph> &lt;/mroot&gt;
</eg>
</p>

<p>The <el>mroot</el> element requires exactly 2 arguments.
However, <el>msqrt</el> accepts a single argument, possibly
being an inferred <el>mrow</el> of multiple children; see <specref ref="presm_reqarg"/>.
The <el>mroot</el> element increments <att>scriptlevel</att> by 2,
and sets <att>displaystyle</att> to <attval>false</attval>, within
<emph>index</emph>, but leaves both attributes unchanged within <emph>base</emph>. 
The <el>msqrt</el> element leaves both
attributes unchanged within its argument.
(See <specref ref="presm_scriptlevel"/>.)</p>
<p>Note that in a RTL directionality, the surd begins
on the right, rather than the left, along with the index in the case
of <el>mroot</el>.</p>

</div4>

<div4><head>Attributes</head>
<p><el>msqrt</el> and <el>mroot</el> elements accept the attributes listed in
<specref ref="presm_presatt"/>.  The surd and overbar should be drawn using the
color specified by <att>mathcolor</att>.</p>

</div4>
</div3>

<div3 id="presm_mstyle"><head>Style Change <el role="defn starttag">mstyle</el> <coreref ref="mstyle"/></head>

<div4><head>Description</head>

<p>The <el>mstyle</el> element is used to make style
changes that affect the rendering of its
contents.  
<phrase>Firstly, as a presentation element, it accepts
the attributes described in <specref ref="presm_presatt"/>.
Additionally, it</phrase>
 can be given any attribute
accepted by any other presentation element, except for the
attributes described below.  
<phrase>Finally,</phrase>
the <el>mstyle</el> element can be given certain special
attributes listed in the next subsection.</p> 

<p>The <el>mstyle</el> element accepts a single argument,
possibly being an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>

<p>Loosely speaking, the effect of the <el>mstyle</el> element
is to change the default value of an attribute for the elements it
contains. Style changes work in one of several ways, depending on 
the way in which default values are specified for an attribute.
The cases are:
<ulist>
<item><p>Some attributes, such as <att>displaystyle</att> or 
<att>scriptlevel</att> (explained below), are inherited 
from the surrounding context when they are not explicitly set. Specifying
such an attribute on an <el>mstyle</el> element sets the
value that will be inherited by its child elements. Unless a child element
overrides this inherited value, it will pass it on to its children, and
they will pass it to their children, and so on. But if a child element does
override it, either by an explicit attribute setting or automatically (as
is common for <att>scriptlevel</att>), the new (overriding)
value will be passed on to that element's children, and then to their
children, etc, unless it is again overridden.</p>
</item>

<item><p>Other attributes, such as <att>linethickness</att> on
<el>mfrac</el>, have default values that are not normally
inherited. That is, if the <att>linethickness</att> attribute
is not set on the  <el>mfrac</el> element,
it will normally use the default value of <attval>1</attval>, even if it was
contained in a larger <el>mfrac</el> element that set this
attribute to a different value. For attributes like this, specifying a
value with an <el>mstyle</el> element has the effect of
changing the default value for all elements within its scope. The net
effect is that setting the attribute value with <el>mstyle</el> propagates the change to all the elements it
contains directly or indirectly, except for the individual elements on
which the value is overridden. Unlike in the case of inherited attributes,
elements that explicitly override this attribute have no effect on this
attribute's value in their children.</p>
</item>
<item><p>Another group of attributes, such as <att>stretchy</att> and <att>form</att>, are
computed from operator dictionary information, position in the
enclosing <el>mrow</el>, and other similar data.  For
these attributes, a value specified by an enclosing <el>mstyle</el> overrides the value that would normally be
computed.</p>
</item>
</ulist>

</p>

<p>Note that attribute values inherited from an
<el>mstyle</el> in any manner affect a <phrase>descendant</phrase> element
in the <el>mstyle</el>'s content only if that attribute is
not given a value <phrase>by the descendant element</phrase>. On any element for
which the attribute is set explicitly, the value specified  overrides the inherited value. The only exception to this
rule is when the <phrase>attribute</phrase> value 
 is documented as
specifying an incremental change to the value inherited from that
element's context or rendering environment.</p>

<p>Note also that the difference between inherited and non-inherited
attributes set by <el>mstyle</el>, explained above, only
matters when the attribute is set on some element within the
<el>mstyle</el>'s contents that has <phrase>descendants</phrase> also
setting it. Thus it never matters for attributes, such as
<att>mathsize</att>, which can only be set on token elements (or on
<el>mstyle</el> itself).</p>

<p>MathML specifies that when
the attributes <att>height</att>, <att>depth</att> or <att>width</att>
are specified on an <el>mstyle</el> element, they apply only to
<el>mspace</el> elements, and not to the corresponding attributes of
<el>mglyph</el>, <el>mpadded</el>, or <el>mtable</el>.  Similarly, when
<att>rowalign</att>, <att>columnalign</att>, or <att>groupalign</att>
are specified on an <el>mstyle</el> element, they apply only to the
<el>mtable</el> element, and not the <el>mtr</el>, <el>mlabeledtr</el>,
<el>mtd</el>, and <el>maligngroup</el> elements.
When the <att>lspace</att> attribute is set with <el>mstyle</el>, it
applies only to the <el>mo</el> element and not to <el>mpadded</el>.
To be consistent, the <att>voffset</att> attribute of the
<el>mpadded</el> element can not be set on <el>mstyle</el>.
When the deprecated <att>fontfamily</att> attribute is specified on an
<el>mstyle</el> element, it does not apply to the <el>mglyph</el> element.
The deprecated <att>index</att> attribute cannot be set on <el>mstyle</el>.
When the <att>align</att> attribute is set with <el>mstyle</el>, it
applies only to the <el>munder</el>, <el>mover</el>, and <el>munderover</el>
elements, and not to the <el>mtable</el> and <el>mstack</el> elements.
The required attributes <att>src</att> and <att>alt</att> on <el>mglyph</el>,
and <att>actiontype</att> on <el>maction</el>, cannot be set on <el>mstyle</el>.
</p> 
<p>As a presentation element, <el>mstyle</el> directly accepts
the <att>mathcolor</att> and  <att>mathbackground</att> attributes.
Thus, the <att>mathbackground</att> specifies the color to fill the bounding
box of the <el>mstyle</el> element itself; it does <emph>not</emph>
specify the default background color.
This is an incompatible change from MathML 2, but we feel it is more useful
and intuitive.  Since the default for <att>mathcolor</att> is inherited,
this is no change in its behaviour.
</p>

</div4>

<div4 id="presm_mstyle_attrs"><head>Attributes</head>

<p>As stated above, <el>mstyle</el> accepts all
attributes of all MathML presentation elements which do not have
required values.  That is, all attributes which have an explicit
default value or a default value which is inherited or computed are
accepted by the <el>mstyle</el> element.</p>

<p><el>mstyle</el> elements accept the attributes listed in
<specref ref="presm_presatt"/>.</p>


<p>Additionally, <el>mstyle</el> can be given the following special
attributes that are implicitly inherited by every MathML element as
part of its rendering environment:
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">scriptlevel</td>
<td>( "+" | "-" )? <intref ref="type_unsigned-integer"><emph>unsigned-integer</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Changes the <att>scriptlevel</att> in effect for the children.
When the value is given without a sign, it sets <att>scriptlevel</att> to the specified value;
when a sign is given, it increments ("+") or decrements ("-") the current value.
(Note that large decrements can result in negative values of <att>scriptlevel</att>,
but these values are considered legal.)
See <specref ref="presm_scriptlevel"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">displaystyle</td>
<td>"true" | "false"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Changes the <att>displaystyle</att> in effect for the children.
See <specref ref="presm_scriptlevel"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">scriptsizemultiplier</td>
<td><intref ref="type_number"><emph>number</emph></intref></td>
<td>0.71</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the multiplier to be used to adjust font size due
to changes in <att>scriptlevel</att>.
See <specref ref="presm_scriptlevel"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">scriptminsize</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>8pt</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum font size allowed due to changes in <att>scriptlevel</att>.
Note that this does not limit the font size due to changes to <att>mathsize</att>.
See <specref ref="presm_scriptlevel"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">infixlinebreakstyle</td>
<td>"before" | "after" | "duplicate"</td>
<td>before</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the default linebreakstyle to use for infix operators;
see <specref ref="presm_lbattrs"/>
</td>
</tr>
<tr>
<td rowspan="2" role="attname">decimalpoint</td>
<td><intref ref="type_character"><emph>character</emph></intref></td>
<td>.</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the character used to determine the alignment point within
<intref ref="presm_mstack"><el>mstack</el></intref>
and 
<intref ref="presm_mtable"><el>mtable</el></intref> columns
when the "decimalpoint" value is used to specify the alignment.
The default, ".", is the decimal separator used to separate the integral
and decimal fractional parts of floating point numbers in many countries.
(See <specref ref="presm_elementary"/> and <specref ref="presm_malign"/>).
</td>
</tr>
</tbody>
</table>
</p>

<p>If <att>scriptlevel</att> is changed incrementally by an
<el>mstyle</el> element that also sets certain other
attributes, the overall effect of the changes may depend on the order
in which they are processed. In such cases, the attributes in the
following list should be processed in the following order, regardless
of the order in which they occur in the XML-format attribute list of
the <el>mstyle</el> start tag:
<att>scriptsizemultiplier</att>, <att>scriptminsize</att>,
<att>scriptlevel</att>, <att>mathsize</att>.</p>

<div5><head>Deprecated Attributes</head>
<p>MathML2 allowed the binding of <intref ref="type_namedspace"><emph>namedspaces</emph></intref>
to new values.
It appears that this capability was never implemented, and is now deprecated;
<intref ref="type_namedspace"><emph>namedspaces</emph></intref> are now considered constants.
For backwards compatibility, the following attributes are accepted
on the <el>mstyle</el> element, but are expected to have no effect.
</p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
</tr>
</thead>
<tbody>
<tr>
<td role="attname">veryverythinmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.0555556em</td>
</tr>
<tr>
<td role="attname">verythinmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.111111em</td>
</tr>
<tr>
<td role="attname">thinmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.166667em</td>
</tr>
<tr>
<td role="attname">mediummathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.222222em</td>
</tr>
<tr>
<td role="attname">thickmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.277778em</td>
</tr>
<tr>
<td role="attname">verythickmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.333333em</td>
</tr>
<tr>
<td role="attname">veryverythickmathspace</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.388889em</td>
</tr>
</tbody>
</table>

</div5>
</div4>

<div4><head>Examples</head>

<p>The example of limiting the stretchiness of a parenthesis shown in the
section on &lt;mo&gt;,
<eg role="mathml"><![CDATA[
<mrow>
   <mo maxsize="1]]><phrase>00%</phrase><![CDATA["> ( </mo>
   <mfrac> <mi> a </mi> <mi> b </mi> </mfrac>
   <mo maxsize="1]]><phrase>00%</phrase><![CDATA["> ) </mo>
</mrow>
]]></eg>
</p>

<p>can be rewritten using <el>mstyle</el> as:
<eg role="mathml"><![CDATA[
<mstyle maxsize="1]]><phrase>00%</phrase><![CDATA[">
   <mrow>
      <mo> ( </mo>
      <mfrac> <mi> a </mi> <mi> b </mi> </mfrac>
      <mo> ) </mo>
   </mrow>
</mstyle>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_merror"><head>Error Message <el role="defn starttag">merror</el> <coreref ref="merror"/></head>

<div4><head>Description</head>

<p>The <el>merror</el> element displays its contents as an
<quote>error message</quote>. This might be done, for example, by displaying the
contents in red, flashing the contents, or changing the background
color. The contents can be any expression or expression sequence.</p>

<p><el>merror</el> accepts 
a single argument possibly being an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>

<p>The intent of this element is to provide a standard way for
programs that <emph>generate</emph> MathML from other input to report
syntax errors in their input. Since it is anticipated that
preprocessors that parse input syntaxes designed for easy hand entry
will be developed to generate MathML, it is important that they have
the ability to indicate that a syntax error occurred at a certain
point. See <specref ref="interf_error"/>.</p>

<p>The suggested use of <el>merror</el> for reporting
syntax errors is for a preprocessor to replace the erroneous part of
its input with an <el>merror</el> element containing a
description of the error, while processing the surrounding expressions
normally as far as possible. By this means, the error message will be
rendered where the erroneous input would have appeared, had it been
correct; this makes it easier for an author to determine from the
rendered output what portion of the input was in error.</p>

<p>No specific error message format is suggested here, but as with
error messages from any program, the format should be designed to make
as clear as possible (to a human viewer of the rendered error message)
what was wrong with the input and how it can be fixed. If the
erroneous input contains correctly formatted subsections, it may be
useful for these to be preprocessed normally and included in the error
message (within the contents of the <el>merror</el>
element), taking advantage of the ability of
<el>merror</el> to contain arbitrary MathML expressions
rather than only text.</p>
</div4>

<div4><head>Attributes</head>

<p><el>merror</el> elements accept the attributes listed in
<specref ref="presm_presatt"/>.</p>


</div4>

<div4><head>Example</head>

<p>If a MathML syntax-checking preprocessor
received the input
<eg role="mathml-error"><![CDATA[
<mfraction>
   <mrow> <mn> 1 </mn> <mo> + </mo> <msqrt> <mn> 5 </mn> </msqrt> </mrow>
   <mn> 2 </mn>
</mfraction>
]]></eg>
which contains the non-MathML element <el namespace="mathml-error">mfraction</el>
(presumably in place of the MathML element <el>mfrac</el>),
it might generate the error message
<eg role="mathml"><![CDATA[
<merror>
   <mtext> Unrecognized element: mfraction;
           arguments were:  </mtext>
   <mrow> <mn> 1 </mn> <mo> + </mo> <msqrt> <mn> 5 </mn> </msqrt> </mrow>
   <mtext>  and  </mtext>
   <mn> 2 </mn>
</merror>
]]></eg>
</p>

<p>Note that the preprocessor's input is not, in this case, valid MathML,
but the error message it outputs is valid MathML.</p>
</div4>
</div3>

<div3 id="presm_mpadded"><head>Adjust Space Around Content
  <el role="defn starttag">mpadded</el> <coreref ref="mpadded"/></head>

<div4><head>Description</head>

<p>An <el>mpadded</el> element renders the same as its child content,
but with the size of <phrase>the child's</phrase> bounding box and the relative positioning
point of its content modified according to 
<phrase><el>mpadded</el>'s</phrase> attributes.  It
does not rescale (stretch or shrink) its content.  The name of the
element reflects the typical use of <el>mpadded</el> to add padding,
or extra space, around its content.  However, <el>mpadded</el> can be
used to make more general adjustments <phrase>of </phrase>size and positioning, and some
combinations, e.g. negative padding, can cause the content of
<el>mpadded</el> to overlap the rendering of neighboring content.  See
<specref ref="presm_warnfinetuning"/> for warnings about several
potential pitfalls of this effect.</p>

<p>The <el>mpadded</el> element accepts
a single argument which may be an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>

<p>It is suggested that audio renderers add (or shorten) time delays
based on the attributes representing horizontal space
(<att>width</att> and <att>lspace</att>).</p>
</div4>

<div4 id="presm_mpaddedatt"><head>Attributes</head>
<p><el>mpadded</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>

<tr>
<td rowspan="2" role="attname">height</td>
<td>( "+" | "-" )?
 <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>
( ("%"  <emph>pseudo-unit</emph>?)
    | <emph>pseudo-unit</emph>
    | <intref ref="type_unit"><emph>unit</emph></intref>
    | <intref ref="type_namedspace"><emph>namedspace</emph></intref>
 )?</td>
<td><emph>same as content</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Sets or increments the height of the <el>mpadded</el> element.
See below for discussion.
</td>
</tr>

<tr>
<td rowspan="2" role="attname">depth</td>
<td>( "+" | "-" )?
     <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>
(("%"  <emph>pseudo-unit</emph>?)
    | <emph>pseudo-unit</emph>
    | <intref ref="type_unit"><emph>unit</emph></intref>
    | <intref ref="type_namedspace"><emph>namedspace</emph></intref>
   )?</td>
<td><emph>same as content</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Sets or increments the depth of the <el>mpadded</el> element.
See below for discussion.
</td>
</tr>

<tr>
<td rowspan="2" role="attname">width</td>
<td>( "+" | "-" )?
    <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>
( ("%" <emph>pseudo-unit</emph>?)
    | <emph>pseudo-unit</emph> 
    | <intref ref="type_unit"><emph>unit</emph></intref>
    | <intref ref="type_namedspace"><emph>namedspace</emph></intref>
 )?</td>
<td><emph>same as content</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Sets or increments the width of the <el>mpadded</el> element.
See below for discussion.
</td>
</tr>

<tr>
<td rowspan="2" role="attname">lspace</td>
<td>( "+" | "-" )?
      <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>
( ("%" <emph>pseudo-unit</emph>?)
    | <emph>pseudo-unit</emph>
    | <intref ref="type_unit"><emph>unit</emph></intref>
    | <intref ref="type_namedspace"><emph>namedspace</emph></intref>
 )?</td>
<td>0em</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Sets the horizontal position of the child content.
See below for discussion.
</td>
</tr>

<tr>
<td rowspan="2" role="attname">voffset</td>
<td>( "+" | "-" )?
      <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>
( ("%" <emph>pseudo-unit</emph>?)
    | <emph>pseudo-unit</emph>
    | <intref ref="type_unit"><emph>unit</emph></intref>
    | <intref ref="type_namedspace"><emph>namedspace</emph></intref>
 )?</td>
<td>0em</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Sets the vertical position of the child content.
See below for discussion.
</td>
</tr>

</tbody>
</table>

<p>The <emph>pseudo-unit</emph> syntax symbol is described below.
 <phrase>Also, <att>height</att>, <att>depth</att> and 
<att>width</att> attributes are
referred to as size attributes, while <att>lspace</att> and <att>voffset</att> attributes 
are position attributes.</phrase></p>

<p>These attributes specify the size of the bounding box of the <el>mpadded</el>
element relative to the size of the bounding box of its child content, and specify
the position of the child content of the <el>mpadded</el> element relative to the
natural positioning of the <el>mpadded</el> element.  The typographical
layout parameters determined by these attributes are described in the next subsection.
Depending on the form of the attribute value, a dimension may be set to a new value,
or specified relative to the child content's corresponding dimension.  Values may be given as
multiples or percentages of any of the  
dimensions of the normal rendering of the child content using so-called pseudo-units,
or they can be set directly using standard units <specref ref="fund_units"/>.</p>

<p>If the value of a size attribute begins with a <code>+</code> or <code>-</code> sign,
it specifies an <emph>increment</emph> or <emph>decrement</emph> to the corresponding
dimension by the following length value. Otherwise the corresponding
dimension is set directly to the following length value. 
Note that since a leading minus sign indicates a decrement, the size
attributes (<att>height</att>, <att>depth</att>, <att>width</att>) 
cannot be set directly to negative values.  In addition, specifying a
decrement that would produce a net negative value for these attributes
has the same effect as
setting the attribute to zero.  In other words, the effective
bounding box of an <el>mpadded</el> element always has non-negative
dimensions. However, negative values are allowed for the relative positioning
attributes <att>lspace</att> and <att>voffset</att>.</p>

<p>Length values (excluding any sign) can be specified in several formats.
Each format begins with an <intref ref="type_unsigned-number"><emph>unsigned-number</emph></intref>,
which may be followed by
  a <code>%</code> sign (effectively scaling the number)
  and an optional <emph>pseudo-unit</emph>,
by a <emph>pseudo-unit</emph> alone,
or by a <intref ref="type_unit"><emph>unit</emph></intref> (excepting <code>%</code>).
The possible <emph>pseudo-units</emph> are the keywords <code>height</code>,
<code>depth</code>, and <code>width</code>.  They represent the length of the same-named dimension of the
<el>mpadded</el> element's child content.
</p>

<p>For any of these length formats, the resulting length
is the product of the number (possibly including the <code>%</code>)
and the following <emph>pseudo-unit</emph>, 
<intref ref="type_unit"><emph>unit</emph></intref>,
<intref ref="type_namedspace"><emph>namedspace</emph></intref>
or the default value for the attribute if no such unit or space is given.</p>

<p>Some examples of attribute formats using pseudo-units (explicit or
default) are as follows: <code>depth="100%height"</code> and
<code>depth="1.0height"</code> both set the depth of the
<el>mpadded</el> element to the height of its content.
<code>depth="105%"</code> sets the depth to 1.05 times the content's
depth, and either <code>depth="+100%"</code> or
<code>depth="200%"</code> sets the depth to twice the content's
depth.</p>


<p>The rules given above imply that all of the following attribute
settings have the same effect, which is to leave the content's
dimensions unchanged:
<eg><![CDATA[
<mpadded width="+0em"> ... </mpadded>
<mpadded width="+0%"> ... </mpadded>
<mpadded width="-0em"> ... </mpadded>
<mpadded width="-0height"> ... </mpadded>
<mpadded width="100%"> ... </mpadded>
<mpadded width="100%width"> ... </mpadded>
<mpadded width="1width"> ... </mpadded>
<mpadded width="1.0width"> ... </mpadded>
<mpadded> ... </mpadded>
]]></eg>
Note that the examples in the Version 2 of the MathML specification showed
spaces within the attribute values, suggesting that this was the intended format.
Formally, spaces are not allowed within these values, but implementers may
wish to ignore such spaces to maximize backward compatibility. 
</p>

</div4>

<div4><head>Meanings of <phrase>size and position</phrase> attributes</head>

<p>See <specref ref="glossary"/> for definitions of some of the typesetting 
terms used here.</p>

<p>The content of an <el>mpadded</el> element defines a fragment of mathematical 
notation, such as a character, fraction, or expression, that can be regarded as 
a single typographical element with a natural positioning point relative to its 
natural bounding box.</p>

<p>The size of the bounding box of an <el>mpadded</el> element is
defined as the size of the bounding box of its content, except as
modified by <phrase>the <el>mpadded</el> element's</phrase> 
<att>height</att>, <att>depth</att>, and
<att>width</att> attributes.  The natural positioning point of the
child content of the <el>mpadded</el> element is located to coincide
with the natural positioning point of the <el>mpadded</el> element,
except as modified by the <att>lspace</att> and <att>voffset</att>
attributes.  Thus, the size attributes of <el>mpadded</el> can be used
to expand or shrink the apparent bounding box of its content, and the
position attributes of <el>mpadded</el> can be used to move the
content relative to the bounding box (and hence also neighboring elements).
Note that MathML doesn't define the precise relationship between "ink",
bounding boxes and positioning points, which are implementation
specific.  Thus, absolute values for mpadded attributes may not be
portable between implementations.
</p>

<p>The <att>height</att> attribute specifies the vertical extent of the 
bounding box of the <el>mpadded</el> element above its baseline.
Increasing the <att>height</att> increases the space between the baseline 
of the <el>mpadded</el> element and the content above it, and introduces 
padding above the rendering of the child content.  Decreasing the 
<att>height</att> reduces the space between the baseline of the 
<el>mpadded</el> element and the content above it, and removes 
space above the rendering of the child content.  Decreasing the 
<att>height</att> may cause content above the <el>mpadded</el> 
element to overlap the rendering of the child content, and should 
generally be avoided.</p>

<p>The <att>depth</att> attribute specifies the vertical extent of the 
bounding box of the <el>mpadded</el> element below its baseline.
Increasing the <att>depth</att> increases the space between the baseline 
of the <el>mpadded</el> element and the content below it, and introduces 
padding below the rendering of the child content.  Decreasing the 
<att>depth</att> reduces the space between the baseline of the <el>mpadded</el> 
element and the content below it, and removes space below the rendering 
of the child content.  Decreasing the <att>depth</att> may cause content 
below the <el>mpadded</el> element to overlap the rendering of the child 
content, and should generally be avoided.</p>

<p>The <att>width</att> attribute specifies the horizontal distance 
between the positioning point of the <el>mpadded</el> element and the 
positioning point of the following content.
Increasing the <att>width</att> increases the space between the 
positioning point of the <el>mpadded</el> element and the content 
that follows it, and introduces padding after the rendering of the 
child content.  Decreasing the <att>width</att> reduces the space 
between the positioning point of the <el>mpadded</el> element and 
the content that follows it, and removes space after the rendering 
of the child content.  Setting the <att>width</att> to zero causes 
following content to be positioned at the positioning point of the 
<el>mpadded</el> element.  Decreasing the <att>width</att> should 
generally be avoided, as it may cause overprinting of the following 
content.</p>
 
<p>The <att>lspace</att> attribute <phrase>("leading" space; 
see <specref ref="presm_bidi_math"/>)</phrase> specifies the horizontal 
location of the positioning point of the child content with respect to 
the positioning point of the <el>mpadded</el> element.  By default they 
coincide, and therefore absolute values for lspace have the same effect 
as relative values.
Positive values for the <att>lspace</att> attribute increase the space 
between the preceding content and the child content, and introduce padding 
before the rendering of the child content.  Negative values for the 
<att>lspace</att> attributes reduce the space between the preceding 
content and the child content, and may cause overprinting of the 
preceding content, and should generally be avoided.  Note that the 
<att>lspace</att> attribute does not affect the <att>width</att> of 
the <el>mpadded</el> element, and so the <att>lspace</att> attribute 
will also affect the space between the child content and following 
content, and may cause overprinting of the following content, unless 
the <att>width</att> is adjusted accordingly.</p>


<p>The <att>voffset</att> attribute specifies the vertical location 
of the positioning point of the child content with respect to the 
positioning point of the <el>mpadded</el> element.  Positive values 
for the <att>voffset</att> attribute raise the rendering of the child 
content above the baseline.  Negative values for the <att>voffset</att> 
attribute lower the rendering of the child content below the baseline.  
In either case, the <att>voffset</att> attribute may cause overprinting 
of neighboring content, which should generally be avoided.  Note that t
he <att>voffset</att> attribute does not affect the <att>height</att> 
or <att>depth</att> of the <el>mpadded</el> element, and so the <att>voffset</att> 
attribute will also affect the space between the child content and neighboring 
content, and may cause overprinting of the neighboring content, unless the 
<att>height</att> or <att>depth</att> is adjusted accordingly.</p>

<p>MathML renderers should ensure that, except for the effects of the 
attributes, the relative spacing between the contents of the 
<el>mpadded</el> element and surrounding MathML elements would 
not be modified by replacing an <el>mpadded</el> element with an 
<el>mrow</el> element with the same content, even if linebreaking 
occurs within the <el>mpadded</el> element.  MathML does not define 
how non-default attribute values of an <el>mpadded</el> element interact 
with the linebreaking algorithm.</p>

<issue role="closed" id="mpadded-examples">
    <head><el>mpadded</el> examples</head>
    <p>One or more illustrated examples should be included.</p>
</issue>

<p>The effects of the size and position attributes are illustrated
below. The following diagram illustrates the use of <att>lspace</att>
and <att>voffset</att> to shift the position of child content without
modifying the <el>mpadded</el> bounding box.</p>

<graphic role="display" source="image/mpadded-shift.png" alt="illustration of the
use of mpadded to shift the position of child content without modifying the bounding box"/>


<p>The corresponding MathML is:
<eg role="mathml"><![CDATA[
<mrow>
  <mi>x</mi>
  <mpadded lspace="0.2em" voffset="0.3ex">
    <mi>y</mi>
  </mpadded>
  <mi>z</mi>
</mrow>
]]></eg>
</p>
<p>The next diagram illustrates the use of 
<att>width</att>, <att>height</att> and <att>depth</att> 
to modifying the <el>mpadded</el> bounding box without changing the relative position 
of the child content. </p>

<graphic role="display" source="image/mpadded-resize.png" alt="illustration of the
use of mpadded to modifying its bounding box without shifting the
relative location of its child content"/>

<p>The corresponding MathML is:
<eg role="mathml"><![CDATA[
<mrow>
  <mi>x</mi>
  <mpadded width="+90%width" height="+0.3ex" depth="+0.3ex">
    <mi>y</mi>
  </mpadded>
  <mi>z</mi>
</mrow>
]]></eg>
</p>

<p>The final diagram illustrates the generic use of <el>mpadded</el> to modify both 
the bounding box and relative position of child content.</p>

<graphic role="display" source="image/mpadded-combined.png" alt="illustration of the
use of mpadded to modify both the bounding box size and position of
child content"/>

<p>The corresponding MathML is:
<eg role="mathml"><![CDATA[
<mrow>
  <mi>x</mi>
  <mpadded lspace="0.3em" width="+0.6em">
    <mi>y</mi>
  </mpadded>
  <mi>z</mi>
</mrow>
]]></eg>
</p>
</div4>

</div3>

<div3 id="presm_mphantom"><head>Making Sub-Expressions Invisible <el role="defn starttag">mphantom</el> <coreref ref="mphantom"/></head>

<div4><head>Description</head>

<p>The <el>mphantom</el> element renders invisibly, but
with the same size and other dimensions, including baseline position,
that its contents would have if they were rendered
normally. <el>mphantom</el> can be used to align parts of
an expression by invisibly duplicating sub-expressions.</p>

<p>The <el>mphantom</el> element accepts
a single argument possibly being an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>

<p>Note that it is possible to wrap both an
<el>mphantom</el> and an <el>mpadded</el>
element around one MathML expression, as in
<code>&lt;mphantom&gt;&lt;mpadded attribute-settings&gt;
... &lt;/mpadded&gt;&lt;/mphantom&gt;</code>, to change its size and make it
invisible at the same time.</p>

<p>MathML renderers should ensure that the relative spacing between
the contents of an <el>mphantom</el> element and the
surrounding MathML elements is the same as it would be if the
<el>mphantom</el> element were replaced by an
<el>mrow</el> element with the same content. This holds
even if linebreaking occurs within the <el>mphantom</el>
element.</p>

<p>For the above reason, <el>mphantom</el> is
<emph>not</emph> considered space-like (<specref ref="presm_mspace"/>) unless its
content is space-like, since the suggested rendering rules for
operators are affected by whether nearby elements are space-like.  Even
so, the warning about the legal grouping of space-like elements may
apply to uses of <el>mphantom</el>.</p>
</div4>

<div4><head>Attributes</head>

<p><el>mphantom</el> elements accept the attributes listed in
<specref ref="presm_presatt"/> (the <att>mathcolor</att> has no effect).</p>

</div4>

<div4><head>Examples</head>
<p>There is one situation where the preceding rules for rendering an
<el>mphantom</el> may not give the desired effect. When an
<el>mphantom</el> is wrapped around a subsequence of the
arguments of an <el>mrow</el>, the default determination
of the <att>form</att> attribute for an <el>mo</el>
element within the subsequence can change. (See the default value of
the <att>form</att> attribute described in <specref ref="presm_mo"/>.) It may be
necessary to add an explicit <att>form</att> attribute to such an
<el>mo</el> in these cases. This is illustrated in the
following example.</p>

<p>In this example, <el>mphantom</el> is used to ensure
alignment of corresponding parts of the numerator and denominator of a
fraction:
<eg role="mathml"><![CDATA[
<mfrac>
  <mrow>
    <mi> x </mi>
    <mo> + </mo>
    <mi> y </mi>
    <mo> + </mo>
    <mi> z </mi>
  </mrow>
  <mrow>
    <mi> x </mi>
    <mphantom>
      <mo form="infix"> + </mo>
      <mi> y </mi>
    </mphantom>
    <mo> + </mo>
    <mi> z </mi>
  </mrow>
</mfrac>
]]></eg>
</p>

<p>This would render as something like
<graphic source="image/mphantom.gif" alt="\frac{x+y+x}{x\phantom{{}+y}+z}"/>
rather than as
<graphic source="image/mphantom-bad.gif" alt="\frac{x+y+z}{x+z}"/>
</p>

<p>The explicit attribute setting <att>form</att><code>="infix"</code> on the
<el>mo</el> element inside the <el>mphantom</el> sets the
<att>form</att> attribute to what it would have been in the absence of the
surrounding <el>mphantom</el>. This is necessary since
otherwise, the <code>+</code> sign would be interpreted as a prefix
operator, which might have slightly different spacing.</p>

<p>Alternatively, this problem could be avoided without any explicit
attribute settings, by wrapping each of the arguments
<code>&lt;mo&gt;+&lt;/mo&gt;</code> and <code>&lt;mi&gt;y&lt;/mi&gt;</code> in its
own <el>mphantom</el> element, i.e.
<eg role="mathml"><![CDATA[
<mfrac>
   <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
      <mo> + </mo>
      <mi> z </mi>
   </mrow>
   <mrow>
      <mi> x </mi>
      <mphantom>
         <mo> + </mo>
      </mphantom>
      <mphantom>
         <mi> y </mi>
      </mphantom>
      <mo> + </mo>
      <mi> z </mi>
   </mrow>
</mfrac>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_mfenced"><head>Expression Inside Pair of Fences
  <el role="defn starttag">mfenced</el> <coreref ref="mfenced"/></head>

<div4><head>Description</head>

<p>The <el>mfenced</el> element provides a convenient form
in which to express common constructs involving fences (i.e. braces,
brackets, and parentheses), possibly including separators (such as
comma) between the arguments.</p>

<p>For example, <code><![CDATA[<mfenced> <mi>x</mi> </mfenced>]]></code>
renders as <quote>(<var>x</var>)</quote> and is equivalent to
<eg role="mathml"><![CDATA[
<mrow> <mo> ( </mo> <mi>x</mi> <mo> ) </mo> </mrow>
]]></eg>
and
<code><![CDATA[<mfenced> <mi>x</mi> <mi>y</mi> </mfenced>]]></code>
renders as <quote>(<var>x</var>, <var>y</var>)</quote>
and is equivalent to
<eg role="mathml"><![CDATA[
<mrow>
  <mo> ( </mo>
  <mrow> <mi>x</mi> <mo>,</mo> <mi>y</mi> </mrow>
  <mo> ) </mo>
</mrow>
]]></eg>
</p>

<p>Individual fences or separators are represented using
<el>mo</el> elements, as described in <specref ref="presm_mo"/>. Thus, any <el>mfenced</el>
element is completely equivalent to an expanded form described below;
either form can be used in MathML, at the convenience of an author or
of a MathML-generating program. A MathML renderer is required to
render either of these forms in exactly the same way.</p>

<p>In general, an <el>mfenced</el> element can contain
zero or more arguments, and will enclose them between fences in an
<el>mrow</el>; if there is more than one argument, it will
insert separators between adjacent arguments, using an additional
nested <el>mrow</el> around the arguments and separators
for proper grouping (<specref ref="presm_mrow"/>). The general expanded form is
shown below. The fences and separators will be parentheses and comma
by default, but can be changed using attributes, as shown in the
following table.</p>
</div4>

<div4><head>Attributes</head>
<p><el>mfenced</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.
The delimiters and separators should be drawn using the color specified by <att>mathcolor</att>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">open</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td>(</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the opening delimiter.
Since it is used as the content of an <el>mo</el> element, any whitespace
will be trimmed and collapsed as described in <specref ref="fund_collapse"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">close</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td>)</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the closing delimiter.
Since it is used as the content of an <el>mo</el> element, any whitespace
will be trimmed and collapsed as described in <specref ref="fund_collapse"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">separators</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td>,</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies a sequence of zero or more separator characters, optionally separated by whitespace.
Each pair of arguments is displayed separated by the corresponding separator
(none appears after the last argument).
If there are too many separators, the excess are ignored;
if there are too few, the last separator is repeated.
Any whitespace within <att>separators</att> is ignored.
</td>
</tr>
</tbody>
</table>

<p>A generic <el>mfenced</el> element, with all attributes
explicit, looks as follows:
<eg><![CDATA[
<mfenced open="opening-fence"
         close="closing-fence"
         separators="sep#1 sep#2 ... sep#(n-1)" >
   arg#1
   ...
   arg#n
</mfenced>
]]></eg>
</p>

<p>In <phrase>an</phrase> RTL directionality context, since the initial text
direction is RTL, characters in the <att>open</att> and <att>close</att>
attributes that have a mirroring counterpart will be rendered in that
mirrored form.  In particular, the default values will render correctly
as a parenthesized sequence in both LTR and RTL contexts.</p>


<p>The general <el>mfenced</el> element shown above is
equivalent to the following expanded form:
<eg><![CDATA[
<mrow>
   <mo fence="true"> opening-fence </mo>
   <mrow>
      arg#1
      <mo separator="true"> sep#1 </mo>
      ...
      <mo separator="true"> sep#(n-1) </mo>
      arg#n
   </mrow>
   <mo fence="true"> closing-fence </mo>
</mrow>
]]></eg>
</p>

<p>Each argument except the last is followed by a separator. The inner
<el>mrow</el> is added for proper grouping, as described in
<specref ref="presm_mrow"/>.</p>

<p>When there is only one argument, the above form has no separators;
since <code>&lt;mrow&gt; arg#1 &lt;/mrow&gt;</code> is equivalent to
<code>arg#1</code> (as described in <specref ref="presm_mrow"/>), this case is also equivalent to:
<eg><![CDATA[
<mrow>
   <mo fence="true"> opening-fence </mo>
   arg#1
   <mo fence="true"> closing-fence </mo>
</mrow>
]]></eg>
</p>

<p>If there are too many separator characters, the extra ones are
ignored. If separator characters are given, but there are too few, the
last one is repeated as necessary. Thus, the default value of
<att>separators</att>="," is equivalent to
<att>separators</att>=",,", <att>separators</att>=",,,", etc. If
there are no separator characters provided but some are needed, for
example if <att>separators</att>=" " or "" and there is more than
one argument, then no separator elements are inserted at all &#x2014; that
is, the elements <code>&lt;mo separator="true"&gt; sep#i
&lt;/mo&gt;</code> are left out entirely. Note that this is different
from inserting separators consisting of <el>mo</el>
elements with empty content.</p>

<p>Finally, for the case with no arguments, i.e.
<eg><![CDATA[
<mfenced open="opening-fence"
         close="closing-fence"
         separators="anything" >
</mfenced>
]]></eg>
the equivalent expanded form is defined to include just
the fences within an <el>mrow</el>:
<eg><![CDATA[
<mrow>
   <mo fence="true"> opening-fence </mo>
   <mo fence="true"> closing-fence </mo>
</mrow>
]]></eg>
</p>

<p>Note that not all <quote>fenced expressions</quote> can be encoded by an
<el>mfenced</el> element. Such exceptional expressions
include those with an <quote>embellished</quote> separator or fence or one
enclosed in an <el>mstyle</el> element, a missing or extra
separator or fence, or a separator with multiple content
characters. In these cases, it is necessary to encode the expression
using an appropriately modified version of an expanded form. As
discussed above, it is always permissible to use the expanded form
directly, even when it is not necessary. In particular, authors cannot
be guaranteed that MathML preprocessors won't replace occurrences of
<el>mfenced</el> with equivalent expanded forms.</p>

<p>Note that the equivalent expanded forms shown above include
attributes on the <el>mo</el> elements that identify them as fences or
separators. Since the most common choices of fences and separators
already occur in the operator dictionary with those attributes,
authors would not normally need to specify those attributes explicitly
when using the expanded form directly. Also, the rules for the default
<att>form</att> attribute (<specref ref="presm_mo"/>) cause the
opening and closing fences to be effectively given the values
<att>form</att><code>="prefix"</code> and
<att>form</att><code>="postfix"</code> respectively, and the
separators to be given the value
<att>form</att><code>="infix"</code>.</p>

<p>Note that it would be incorrect to use <el>mfenced</el>
with a separator of, for instance, <quote>+</quote>, as an abbreviation for an
expression using <quote>+</quote> as an ordinary operator, e.g.
<eg role="mathml"><![CDATA[
<mrow>
  <mi>x</mi> <mo>+</mo> <mi>y</mi> <mo>+</mo> <mi>z</mi>
</mrow>
]]></eg>
This is because the <code>+</code> signs would be treated as separators,
not infix operators. That is, it would render as if they were marked up as
<code><![CDATA[<mo separator="true">+</mo>]]></code>, which might therefore
render inappropriately.</p>
</div4>

<div4><head>Examples</head>

<p>(<var>a</var>+<var>b</var>)
<eg role="mathml"><![CDATA[
<mfenced>
  <mrow>
    <mi> a </mi>
    <mo> + </mo>
    <mi> b </mi>
  </mrow>
</mfenced>
]]></eg>
</p>

<p>Note that the above <el>mrow</el> is necessary so that
the <el>mfenced</el> has just one argument. Without it, this
would render incorrectly as <quote>(<var>a</var>, +,
<var>b</var>)</quote>.</p>

<p>[0,1)
<eg role="mathml"><![CDATA[
<mfenced open="[">
  <mn> 0 </mn>
  <mn> 1 </mn>
</mfenced>
]]></eg>
</p>

<p><var>f</var>(<var>x</var>,<var>y</var>)
<eg role="mathml"><![CDATA[
<mrow>
  <mi> f </mi>
  <mo> &ApplyFunction; </mo>
  <mfenced>
    <mi> x </mi>
    <mi> y </mi>
  </mfenced>
</mrow>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_menclose"><head>Enclose Expression Inside Notation
  <el role="defn starttag">menclose</el> <coreref ref="menclose"/></head>

<div4><head>Description</head>

<p>The <el>menclose</el> element renders its content
inside the enclosing notation specified by its <att>notation</att> attribute. 
<el>menclose</el> accepts 
a single argument possibly being an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>
</div4>

<div4><head>Attributes</head>
<p><el>menclose</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.
The notations should be drawn using the color specified by <att>mathcolor</att>.</p>

<p>
The values allowed for <att>notation</att> are open-ended.
Conforming renderers may ignore any value they do not handle, although
renderers are encouraged to render as many of the values listed below as
possible.
</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">notation</td>
<td>(<attval>longdiv</attval> | <attval>actuarial</attval> | <attval>phasorangle</attval> | <attval>radical</attval> | <attval>box</attval> | <attval>roundedbox</attval> | <attval>circle</attval> |
    <attval>left</attval> | <attval>right</attval> | <attval>top</attval> | <attval>bottom</attval> |
 <attval>updiagonalstrike</attval> | <attval>downdiagonalstrike</attval> | <attval>verticalstrike</attval> | <attval>horizontalstrike</attval> | <attval>northeastarrow</attval>
| <attval>madruwb</attval> | text) + 
</td>
<td>longdiv</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies a space separated list of notations to be used to enclose the children.
See below for a description of each type of notation.
</td>
</tr>
</tbody>
</table>

<p>Any number of values can be given for
<att>notation</att> separated by whitespace; all of those given and
understood by a MathML renderer should be rendered.
Each should be rendered as if the others were not present; they should not nest one inside of the other.  For example,
<att>notation</att>=<attval>circle box</attval> should
result in circle and a box around the contents of <el>menclose</el>; the circle and box may overlap.  This is shown in the first example below.
Of the predefined notations, only <phrase>the following are</phrase>
affected by the directionality (see <specref ref="presm_bidi_math"/>):
<ulist>
<item><p> <attval>radical</attval> </p></item>
<item><p> <attval>phasorangle</attval> </p></item>
</ulist>
</p>

<p>When <att>notation</att> has the value <attval>longdiv</attval>,
the contents are drawn enclosed by a long division symbol.
<phrase>MathML 3 adds the <el>mlongdiv</el> element
(<specref ref='presm_mlongdiv'/>). This element supports notations for long division
used in several countries and can be used to create a complete example of
long division as shown in <specref ref='presm_mlongdiv_ex'/>. </phrase>
When <att>notation</att> is specified as
<attval>actuarial</attval>, the contents are drawn enclosed by an
actuarial symbol. A similar result can be achieved
with the value <attval>top right</attval>. The case of
<att>notation</att>=<attval>radical</attval> is equivalent to the
<el>msqrt</el> schema.</p>

<p> The values <attval>box</attval>,
<attval>roundedbox</attval>, and <attval>circle</attval> should
enclose the contents as indicated by the values.  The amount of
distance between the box, roundedbox, or circle, and the contents are
not specified by MathML, and is left to the renderer.  In practice,
paddings on each side of 0.4em in the horizontal direction and .5ex in
the vertical direction seem to work well.</p>

<p>The values <attval>left</attval>,
<attval>right</attval>, <attval>top</attval> and
<attval>bottom</attval> should result in lines drawn on those sides of
the contents.  The values <attval>northeastarrow</attval>,
<attval>updiagonalstrike</attval>,
<attval>downdiagonalstrike</attval>, <attval>verticalstrike</attval>
and <attval>horizontalstrike</attval> should result in the indicated
strikeout lines being superimposed over the content of the
<el>menclose</el>, e.g. a strikeout that extends from the lower left 
corner to the upper right corner of the <el>menclose</el> element for
<attval>updiagonalstrike</attval>, etc.
</p>
<p>
The value <attval>northeastarrow</attval> is a recommended value to implement because it can be
used to implement TeX's \cancelto command. If a renderer implements other arrows for <att>menclose</att>, it is recommended that the arrow names are chosen from the following full set of names for consistancy and standardization among renderers:
<ulist>
<item><p><attval>uparrow</attval></p></item>
<item><p><attval>rightarrow</attval></p></item>
<item><p><attval>downarrow</attval></p></item>
<item><p><attval>leftarrow</attval></p></item>
<item><p><attval>northwestarrow</attval></p></item>
<item><p><attval>southwestarrow</attval></p></item>
<item><p><attval>southeastarrow</attval></p></item>
<item><p><attval>northeastarrow</attval></p></item>
<item><p><attval>updownarrow</attval></p></item>
<item><p><attval>leftrightarrow</attval></p></item>
<item><p><attval>northwestsoutheastarrow</attval></p></item>
<item><p><attval>northeastsouthwestarrow</attval></p></item>
</ulist>
</p>

<p>The value <attval>madruwb</attval> should generate an enclosure
representing an Arabic factorial (&#x2018;madruwb&#x2019; is the transliteration
of the Arabic &#x0645;&#x0636;&#x0631;&#x0648;&#x0628; for factorial).
This is shown in the third example below.</p>

<p>The baseline of an <el>menclose</el> element is the baseline of its child (which might be an implied <el>mrow</el>).</p>

</div4>

<div4><head>Examples</head>

<!-- REMOVE IN FAVOUR OF MCOLUMN

<p>The following markup might be used to encode an elementary US-style
long division problem.</p>

<p><eg role="mathml"><![CDATA[
<mtable columnspacing='0]]><phrase>pt</phrase><![CDATA[' rowspacing='0]]><phrase>pt</phrase><![CDATA['>
<mtr>
  <mtd></mtd>
  <mtd columnalign='right'><mn>10</mn></mtd>
</mtr>
<mtr>
  <mtd columnalign='right'><mn>131</mn></mtd>
  <mtd columnalign='right'>
    <menclose notation='longdiv'><mn>1413</mn></menclose>
  </mtd>
</mtr>
<mtr>
  <mtd></mtd>
  <mtd columnalign='right'>
    <mrow>
    <munder>
      <mn>131</mn>
      <mo> &UnderBar; </mo>
    </munder>
    <mphantom><mn>3</mn></mphantom>
    </mrow>
  </mtd>
</mtr>
<mtr>
  <mtd></mtd>
  <mtd columnalign='right'><mn>103</mn></mtd>
</mtr>
</mtable>
]]></eg></p>

<p>This might be rendered roughly as: 
<graphic role="display" source="image/f3011.gif"
alt="\begin{array}{r@{}r}&amp;10\\131&amp;            \smash{\raisebox{1pt}{)}}\!\!\overline{\,\,1413}\\&amp;             \underline{131}\phantom{0}\\&amp; 103\end{array}"/> 
</p>

-->
<p>An example of using multiple attributes is
<eg role="mathml"><![CDATA[
<menclose notation='circle box'>
  <mi> x </mi><mo> + </mo><mi> y </mi>
</menclose>
]]></eg>
which renders with the box and circle overlapping roughly as
<graphic source="image/circlebox.png" alt="[Image of a circle and box around x plus y]"/>.
</p>

<p>An example of using <el>menclose</el> for actuarial
notation is
<eg role="mathml"><![CDATA[
<msub>
  <mi>a</mi>
  <mrow>
    <menclose notation='actuarial'>
      <mi>n</mi>
    </menclose>
    <mo>&ic;</mo>
    <mi>i</mi>
  </mrow>
</msub>
]]></eg>
which renders roughly as
<graphic role="display" source="image/actuarial.png" alt="[image of actuarial notation for a angle n at i]"/> 
</p>

<p>An example of <attval>phasorangle</attval>, which is used in circuit analysis, is:
<eg role="mathml"><![CDATA[
  <mi>C</mi>
  <mrow>
    <menclose notation='phasorangle'>
      <mrow>
        <mo>&#x2212;</mo>
        <mfrac>
          <mi>&pi;</mi>
          <mn>2</mn>
        </mfrac>
      </mrow>
    </menclose>
  </mrow>
]]></eg>
which renders roughly as
<graphic role="display" source="image/phasorangle.png" alt="[image of phasorangle notation for the angle negative pi over 2]"/> 
</p>
<p>An example of <attval>madruwb</attval> is:
<eg role="mathml"><![CDATA[
  <menclose notation="madruwb">
    <mn>12</mn>
  </menclose>
]]></eg>
which renders roughly as
<graphic source="image/madruwb12.png" alt="[Image of 12 factorial in Arabic style]"/>.
</p>
</div4>
</div3>
</div2>

<div2 id="presm_scrlim"><head>Script and Limit Schemata</head>

<p>The elements described in this section position one or more scripts
around a base. Attaching various kinds of scripts and embellishments to
symbols is a very common notational device in mathematics. For purely
visual layout, a single general-purpose element could suffice for
positioning scripts and embellishments in any of the traditional script
locations around a given base. However, in order to capture the abstract
structure of common notation better, MathML provides several more
specialized scripting elements.</p>

<p>In addition to sub/superscript elements, MathML has overscript
and underscript elements that place scripts above and below the base. These
elements can be used to place limits on large operators, or for placing
accents and lines above or below the base. The rules for rendering accents
differ from those for overscripts and underscripts, and this difference can
be controlled with the <att>accent</att> and <att>accentunder</att> attributes, as described in the appropriate
sections below.</p>

<p>Rendering of scripts is affected by the <att>scriptlevel</att> and <att>displaystyle</att>
attributes, which are part of the environment inherited by the rendering
process of every MathML expression, and are described in <specref ref="presm_scriptlevel"/>.
These attributes cannot be given explicitly on a scripting element, but can be
specified on the start tag of a surrounding <el>mstyle</el>
element if desired.</p>

<p>MathML also provides an element for attachment of tensor indices.
Tensor indices are distinct from ordinary subscripts and superscripts in
that they must align in vertical columns. Tensor indices can also occur in
prescript positions.  Note that ordinary scripts follow the base (on the right
in LTR context, but on the left in RTL context); prescripts precede the base
(on the left (right) in LTR (RTL) context).</p>

<p>Because presentation elements should be used to describe the abstract
notational structure of expressions, it is important that the base
expression in all <quote>scripting</quote> elements (i.e. the first
argument expression) should be the entire expression that is being
scripted, not just the trailing character. For example,
(<var>x</var>+<var>y</var>)<sup>2</sup> should be written as:
<eg role="mathml"><![CDATA[
<msup>
  <mrow>
    <mo> ( </mo>
    <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
    </mrow>
    <mo> ) </mo>
  </mrow>
  <mn> 2 </mn>
</msup>
]]></eg>
</p>

<div3 id="presm_msub"><head>Subscript <el role="defn starttag">msub</el> <coreref ref="msub"/></head>

<div4><head>Description</head>

<p>The <el>msub</el> element attaches a subscript to a base using the syntax
<eg>
&lt;msub&gt; <emph>base</emph> <emph>subscript</emph> &lt;/msub&gt;
</eg>
It increments <att>scriptlevel</att> by 1, and sets <att>displaystyle</att> to
<attval>false</attval>, within <emph>subscript</emph>, but leaves both attributes
unchanged within <emph>base</emph>. (See <specref ref="presm_scriptlevel"/>.)</p>
</div4>

<div4><head>Attributes</head>
<p><el>msub</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">subscriptshift</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum amount to shift the baseline of <emph>subscript</emph> down;
the default is for the rendering agent to use its own positioning rules.
</td>
</tr>
</tbody>
</table>
</div4>
</div3>

<div3 id="presm_msup"><head>Superscript <el role="defn starttag">msup</el> <coreref ref="msup"/></head>

<div4><head>Description</head>

<p>The <el>msup</el> element attaches a superscript to a base using the syntax
<eg>
&lt;msup&gt; <emph>base</emph> <emph>superscript</emph> &lt;/msup&gt;
</eg>
It increments <att>scriptlevel</att> by 1, and sets <att>displaystyle</att> to <attval>false</attval>, within
<emph>superscript</emph>, but leaves both attributes unchanged within
<emph>base</emph>. (See <specref ref="presm_scriptlevel"/>.) </p>

</div4>

<div4><head>Attributes</head>
<p><el>msup</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>

<table border="1"  role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td  rowspan="2" role="attname">superscriptshift</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum amount to shift the baseline of <emph>superscript</emph> up;
the default is for the rendering agent to use its own positioning rules.
</td>
</tr>
</tbody>
</table>

</div4>
</div3>

<div3 id="presm_msubsup"><head>Subscript-superscript Pair <el role="defn starttag">msubsup</el> <coreref ref="msubsup"/></head>

<div4><head>Description</head>
<p>The <el>msubsup</el> element is used to attach both a subscript and
superscript to a base expression.
<eg>
&lt;msubsup&gt; <emph>base</emph> <emph>subscript</emph> <emph>superscript</emph> &lt;/msubsup&gt;
</eg>
It increments <att>scriptlevel</att> by 1, and sets <att>displaystyle</att> to
<attval>false</attval>, within <emph>subscript</emph> and <emph>superscript</emph>,
but leaves both attributes unchanged within <emph>base</emph>.
(See <specref ref="presm_scriptlevel"/>.) 
</p>

<p> Note that both scripts are positioned tight against the base as shown here
<graphic role="inline" source="image/f3014.gif" alt="x_1^2"/>
versus the staggered positioning of nested scripts as shown here
<graphic role="inline" source="image/f3013.gif" alt="x_1{}^2"/>;
the latter can be achieved by nesting an <el>msub</el> inside an <el>msup</el>.</p>
</div4>

<div4 id="presm_subsupatt"><head>Attributes</head>
<p><el>msubsup</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td  rowspan="2" role="attname">subscriptshift</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum amount to shift the baseline of <emph>subscript</emph> down;
the default is for the rendering agent to use its own positioning rules.
</td>
</tr>
<tr>
<td  rowspan="2" role="attname">superscriptshift</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the minimum amount to shift the baseline of <emph>superscript</emph> up;
the default is for the rendering agent to use its own positioning rules.
</td>
</tr>
</tbody>
</table>

</div4>

<div4><head>Examples</head>

<p>The <el>msubsup</el> is most commonly used for adding
sub/superscript pairs to identifiers as illustrated above. However,
another important use is placing limits on certain large operators
whose limits are traditionally displayed in the script positions even
when rendered in display style. The most common of these is the
integral. For example,</p>

<p><graphic role="display" source="image/f3015.gif" alt="\int\nolimits_0^1 \eulere^x \,\diffd x"/>
would be represented as
<eg role="mathml"><![CDATA[
<mrow>
  <msubsup>
    <mo> &int; </mo>
    <mn> 0 </mn>
    <mn> 1 </mn>
  </msubsup>
  <mrow>
    <msup>
      <mi> &ExponentialE; </mi>
      <mi> x </mi>
    </msup>
    <mo> &InvisibleTimes; </mo>
    <mrow>
      <mo> &DifferentialD; </mo>
      <mi> x </mi>
    </mrow>
  </mrow>
</mrow>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_munder"><head>Underscript <el role="defn starttag">munder</el></head>

<div4><head>Description</head>

<p>The <el>munder</el> element attaches an accent or limit placed under a base using the syntax
<eg>
&lt;munder&gt; <emph>base</emph> <emph>underscript</emph> &lt;/munder&gt;
</eg>
It always sets <att>displaystyle</att> to <attval>false</attval> within the underscript,
but increments <att>scriptlevel</att> by 1 only when <att>accentunder</att> is <attval>false</attval>.
Within <emph>base</emph>, it always leaves both attributes unchanged.
(See <specref ref="presm_scriptlevel"/>.) 
</p>

<p>If <emph>base</emph> is an operator with <att>movablelimits</att>=<attval>true</attval>
(or an embellished operator whose <el>mo</el> element core has <att>movablelimits</att>=<attval>true</attval>),
and <att>displaystyle</att>=<attval>false</attval>,
then <emph>underscript</emph> is drawn in a subscript position.
In this case, the <att>accentunder</att> attribute is ignored.
This is often used for limits on symbols such as <kw role="entity">sum</kw>.
</p>

</div4>

<div4><head>Attributes</head>
<p><el>munder</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">accentunder</td>
<td>"true" | "false"</td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether <emph>underscript</emph> is drawn as an <quote>accent</quote> or as a limit.
An accent is drawn the same size as the base (without incrementing <att>scriptlevel</att>)
and is drawn closer to the base.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">align</td>
<td>"left" | "right" | "center"</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the script is aligned left, center, or right under/over the base.
<phrase>As specfied in <specref ref="presm_horiz_stretch_rules"/>,
the core of underscripts that are embellished operators should stretch to cover the base,
but the alignment is based on the entire underscript.</phrase>
</td>
</tr>
</tbody>
</table>


<p>The default value of <att>accentunder</att> is false, unless
<emph>underscript</emph> is an <el>mo</el> element or an
embellished operator (see <specref ref="presm_mo"/>). If
<emph>underscript</emph> is an <el>mo</el> element, the
value of its <att>accent</att> attribute is used as the default
value of <att>accentunder</att>. If <emph>underscript</emph> is an
embellished operator, the <att>accent</att> attribute of the
<el>mo</el> element at its core is used as the default
value.  As with all attributes, an explicitly given value overrides
the default.</p>

<p>Here is an example (accent versus underscript):
<graphic role="inline" source="image/f3016.gif" alt="\underbrace{x+y+z}"/> versus
<graphic role="inline" source="image/f3017.gif" alt="\underbrace{\strut x+y+z}"/>.
The MathML representation for this example is shown below.</p>

</div4>

<div4><head>Examples</head>

<p>The MathML representation for the example shown above is:
<eg role="mathml"><![CDATA[
<mrow>
  <munder accentunder="true">
    <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
      <mo> + </mo>
      <mi> z </mi>
    </mrow>
    <mo> &UnderBrace; </mo>
  </munder>
  <mtext>&nbsp;versus&nbsp;</mtext>
  <munder accentunder="false">
    <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
      <mo> + </mo>
      <mi> z </mi>
    </mrow>
    <mo> &UnderBrace; </mo>
  </munder>
</mrow>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_mover"><head>Overscript <el role="defn starttag">mover</el></head>

<div4><head>Description</head>
<p>The <el>mover</el> element attaches an accent or limit placed over a base using the syntax
<eg>
&lt;mover&gt; <emph>base</emph> <emph>overscript</emph> &lt;/mover&gt;
</eg>
It always sets <att>displaystyle</att> to <attval>false</attval> within overscript,
but increments <att>scriptlevel</att> by 1 only when <att>accent</att> is <attval>false</attval>.
Within <emph>base</emph>, it always leaves both attributes unchanged.
(See <specref ref="presm_scriptlevel"/>.)</p>

<p>If <emph>base</emph> is an operator with <att>movablelimits</att>=<attval>true</attval>
(or an embellished operator whose <el>mo</el> element core has <att>movablelimits</att>=<attval>true</attval>),
and <att>displaystyle</att>=<attval>false</attval>,
then <emph>overscript</emph> is drawn in a superscript position.
In this case, the <att>accent</att> attribute is ignored.
This is often used for limits on symbols such as <kw role="entity">sum</kw>.</p>

</div4>

<div4><head>Attributes</head>
<p><el>mover</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">accent</td>
<td>"true" | "false"</td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether <emph>overscript</emph> is drawn as an <quote>accent</quote> or as a limit.
An accent is drawn the same size as the base (without incrementing <att>scriptlevel</att>)
and is drawn closer to the base.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">align</td>
<td>"left" | "right" | "center"</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the script is aligned left, center, or right under/over the base.
<phrase>As specfied in <specref ref="presm_horiz_stretch_rules"/>,
the core of overscripts that are embellished operators should stretch to cover the base,
but the alignment is based on the entire overscript.</phrase>
</td>
</tr>
</tbody>
</table>
</p>

<p>The difference between an accent versus limit is shown here:
<graphic role="inline" source="image/f3018.gif" alt="\hat{x}"/> versus
<graphic role="inline" source="image/f3019.gif" alt="\hat{\strut x}"/>.
These differences also apply to <quote>mathematical accents</quote> such as
bars <phrase>or braces</phrase> over expressions:
<graphic role="inline" source="image/f3020.gif" alt="\overbrace{x+y+z}"/> versus
<graphic role="inline" source="image/f3021.gif" alt="\overbrace{\strut x+y+z}"/>.
The MathML representation for each of these examples is shown below.</p>

<p>The default value of <emph>accent</emph> is false, unless
<emph>overscript</emph> is an <el>mo</el> element or an
embellished operator (see <specref ref="presm_mo"/>). If
<emph>overscript</emph> is an <el>mo</el> element, the value
of its <att>accent</att> attribute is used as the default value
of <att>accent</att> for <el>mover</el>.  If
<emph>overscript</emph> is an embellished operator, the <att>accent</att> attribute of the <el>mo</el>
element at its core is used as the default value.</p>

</div4>

<div4><head>Examples</head>

<p>The MathML representation for the examples shown above is:
<eg role="mathml"><![CDATA[
<mrow>
  <mover accent="true">
    <mi> x </mi>
    <mo> &Hat; </mo>
  </mover>
  <mtext>&nbsp;versus&nbsp;</mtext>
  <mover accent="false">
    <mi> x </mi>
    <mo> &Hat; </mo>
  </mover>
</mrow>
]]></eg>
<eg role="mathml"><![CDATA[
<mrow>
  <mover accent="true">
    <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
      <mo> + </mo>
      <mi> z </mi>
    </mrow>
    <mo> &OverBrace; </mo>
  </mover>
  <mtext>&nbsp;versus&nbsp;</mtext>
  <mover accent="false">
    <mrow>
      <mi> x </mi>
      <mo> + </mo>
      <mi> y </mi>
      <mo> + </mo>
      <mi> z </mi>
    </mrow>
    <mo> &OverBrace; </mo>
  </mover>
</mrow>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_munderover"><head>Underscript-overscript Pair
  <el role="defn starttag">munderover</el></head>

<div4><head>Description</head>
<p>The <el>munderover</el> element attaches accents or limits placed both over and under a base using the syntax
<eg>
&lt;munderover&gt; <emph>base</emph> <emph>underscript</emph> <emph>overscript</emph> &lt;/munderover&gt;
</eg>
It always sets <att>displaystyle</att> to <attval>false</attval>
within <emph>underscript</emph> and <emph>overscript</emph>,
but increments <att>scriptlevel</att> by 1 only when 
<att>accentunder</att> or <att>accent</att>, respectively, are <attval>false</attval>.
Within <emph>base</emph>, it always leaves both attributes unchanged.
(see <specref ref="presm_scriptlevel"/>).</p>

<p>If <emph>base</emph> is an operator with <att>movablelimits</att>=<attval>true</attval>
(or an embellished operator whose <el>mo</el> element core has <att>movablelimits</att>=<attval>true</attval>),
and <att>displaystyle</att>=<attval>false</attval>,
then <emph>underscript</emph> and <emph>overscript</emph> are drawn in a subscript and superscript position,
respectively. In this case, the <att>accentunder</att> and <att>accent</att> attributes are ignored.
This is often used for limits on symbols such as <kw role="entity">sum</kw>.</p>

</div4>

<div4><head>Attributes</head>

<p><el>munderover</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">accent</td>
<td>"true" | "false"</td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether <emph>overscript</emph> is drawn as an <quote>accent</quote> or as a limit.
An accent is drawn the same size as the base (without incrementing <att>scriptlevel</att>)
and is drawn closer to the base.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">accentunder</td>
<td>"true" | "false"</td>
<td><emph>automatic</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether <emph>underscript</emph> is drawn as an <quote>accent</quote> or as a limit.
An accent is drawn the same size as the base (without incrementing <att>scriptlevel</att>)
and is drawn closer to the base.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">align</td>
<td>"left" | "right" | "center"</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies whether the scripts are aligned left, center, or right under/over the base.
<phrase>As specfied in <specref ref="presm_horiz_stretch_rules"/>,
the core of underscripts and overscripts that are embellished operators should stretch to cover the base,
but the alignment is based on the entire underscript or overscript.</phrase>
</td>
</tr>
</tbody>
</table>

<p>The <el>munderover</el> element is used <phrase>instead of separate
<el>munder</el> and <el>mover</el> elements</phrase> so that the
underscript and overscript are vertically spaced equally in relation
to the base and so that they follow the slant of the base as in the
second expression shown below:</p>

<p><graphic role="inline" source="image/f3022.gif" alt="\int_0^{\!\!\!\infty}"/>
versus
<graphic role="inline" source="image/f3023.gif" alt="\int_0^{\infty}"/>.
The MathML representation for this example is shown below.</p>

<p>The difference in the vertical spacing is too small to be noticed on a
low resolution display at a normal font size, but is noticeable on a higher
resolution device such as a printer and when using large font sizes.  In
addition to the visual differences, attaching both the underscript and
overscript to the same base more accurately reflects the semantics of the
expression.</p>

<p>The defaults for <att>accent</att> and <att>accentunder</att>
are computed in the same way as for
<intref ref="presm_munder"><el>munder</el></intref> and
<intref ref="presm_mover"><el>mover</el></intref>, respectively.</p>

</div4>

<div4><head>Examples</head>

<p>The MathML representation for the example shown above with the first
expression made using separate <el>munder</el> and
<el>mover</el> elements, and the second one using an
<el>munderover</el> element, is:
<eg role="mathml"><![CDATA[
<mrow>
  <mover>
    <munder>
      <mo> &int; </mo>
      <mn> 0 </mn>
    </munder>
    <mi> &infin; </mi>
  </mover>
  <mtext>&nbsp;versus&nbsp;</mtext>
  <munderover>
    <mo> &int; </mo>
    <mn> 0 </mn>
    <mi> &infin; </mi>
  </munderover>
</mrow>
]]></eg>
</p>
</div4>
</div3>

<div3 id="presm_mmultiscripts"><head>Prescripts and Tensor Indices
  <el role="defn starttag">mmultiscripts</el><phrase>,
  <el role="defn emptytag">mprescripts</el>,
  <el role="defn emptytag">none</el></phrase></head>

<div4><head>Description</head>

<p>Presubscripts and tensor notations are represented by a single
element, <el>mmultiscripts</el>, using the syntax:
<eg>
&lt;mmultiscripts&gt;
    <emph>base</emph>
     (<emph>subscript superscript</emph>)*
     [ &lt;mprescripts/&gt; (<emph>presubscript presuperscript</emph>)* ]
&lt;/mmultiscripts&gt;
</eg>
</p>
<p>This element allows the representation of any number of vertically-aligned pairs of subscripts
and superscripts, attached to one base expression. It supports both
postscripts  and
prescripts.
Missing scripts can be represented by the empty element
<el>none</el>.</p>

<p>The prescripts are optional, and when present are given
<emph>after</emph> the postscripts, because prescripts are relatively
rare compared to tensor notation.</p>

<p>The argument sequence consists of the base followed by zero or more
pairs of vertically-aligned subscripts and superscripts (in that
order) that represent all of the postscripts. This list is optionally
followed by an empty element <el>mprescripts</el> and a
list of zero or more pairs of vertically-aligned presubscripts and
presuperscripts that represent all of the prescripts. The pair lists
for postscripts and prescripts are <phrase>displayed</phrase> in the same order as the
directional context (ie. left-to-right order in LTR context). If
no subscript or superscript should be rendered in a given position,
then the empty element <el>none</el> should be used in
that position.
<phrase diff="add">For each sub and superscript pair,
horizontal-alignment of the elements in the pair should be
towards the the base of the <el>mmultiscripts</el>.
That is, pre-scripts should be right aligned,
and post-scripts should be left aligned.</phrase></p>

<p>The base, subscripts, superscripts, the optional separator element
<el>mprescripts</el>, the presubscripts, and the
presuperscripts, are all direct sub-expressions of the
<el>mmultiscripts</el> element, i.e. they are all at the
same level of the expression tree. Whether a script argument is a
subscript or a superscript, or whether it is a presubscript or a
presuperscript is determined by whether it occurs in an even-numbered
or odd-numbered argument position, respectively, ignoring the empty
element <el>mprescripts</el> itself when determining the
position. The first argument, the base, is considered to be in
position 1. The total number of arguments must be odd, if
<el>mprescripts</el> is not given, or even, if it is.</p>

<p>The empty element <el>mprescripts</el> is only allowed as direct sub-expression
of <el>mmultiscripts</el>.</p>
</div4>

<div4><head>Attributes</head>
<p>Same as the attributes of <el>msubsup</el>.  <phrase>See
<specref ref="presm_subsupatt"/></phrase>.</p> 

<p>The <el>mmultiscripts</el> element increments <att>scriptlevel</att> by 1, and sets <att>displaystyle</att> to <attval>false</attval>, within
each of its arguments except <emph>base</emph>, but leaves both attributes
unchanged within <emph>base</emph>. (See <specref ref="presm_scriptlevel"/>.)
</p>
</div4>

<div4><head>Examples</head>

<p><phrase diff="chg">Examples</phrase> of the use of <el>mmultiscripts</el> are:</p>
<p><sub>0</sub><var>F</var><sub>1</sub>(;<var>a</var>;<var>z</var>).
<eg role="mathml"><![CDATA[
<mrow>
  <mmultiscripts>
    <mi> F </mi>
    <mn> 1 </mn>
    <none/>
    <mprescripts/>
    <mn> 0 </mn>
    <none/>
  </mmultiscripts>
  <mo> &ApplyFunction; </mo>
  <mrow>
    <mo> ( </mo>
    <mrow> 
      <mo> ; </mo>
      <mi> a </mi>
      <mo> ; </mo>
      <mi> z </mi>
    </mrow> 
    <mo> ) </mo>
  </mrow>
</mrow>
]]></eg>
</p>

<p><graphic role="inline" source="image/tensorindices.png" alt="R_i{}^j{}_k{}_l"/>
(where <var>k</var> and <var>l</var> are different indices)
<eg role="mathml"><![CDATA[
<mmultiscripts>
  <mi> R </mi>
  <mi> i </mi>
  <none/>
  <none/>
  <mi> j </mi>
  <mi> k </mi>
  <none/>
  <mi> l </mi>
  <none/>
</mmultiscripts>
]]></eg>
</p>

<p diff="add"><graphic diff="add" role="inline" source="image/prescriptsalign.png" alt="{}_{123}^{\phantom{00}1}X{}_{123}^{1\phantom{00}}"/>
<eg role="mathml"><![CDATA[
  <mmultiscripts>
    <mi>  X </mi>
    <mn> 123 </mn>
    <mn> 1 </mn>
    <mprescripts/>
    <mn> 123 </mn>
    <mn> 1 </mn>
  </mmultiscripts>
  ]]></eg>
</p>

<p>An additional example of <el>mmultiscripts</el> shows how the binomial
coefficient
<graphic source="image/binom5-12.png" alt="[binomial(5,12) in english style]"/>
can be displayed in Arabic style
<graphic source="image/arbinom5-12.png" alt="[binomial(5,12) in Arabic style]"/></p>
<eg role="mathml"><![CDATA[
<mstyle dir="rtl">
  <mmultiscripts><mo>&#x0644;</mo>
    <mn>12</mn><none/>
    <mprescripts/>
    <none/><mn>5</mn>
  </mmultiscripts>
</mstyle>
]]></eg>
</div4>
</div3>
</div2>

<div2 id="presm_tabmat"><head>Tabular Math</head>

<p>Matrices, arrays and other table-like mathematical notation are marked
up using <el>mtable</el>,
<el>mtr</el>, <el>mlabeledtr</el> and
<el>mtd</el> elements. These elements are similar to the
<el namespace="xhtml">table</el>, <el namespace="xhtml">tr</el> and <el namespace="xhtml">td</el> elements of HTML, except that they provide
specialized attributes for the fine layout control
necessary for commutative diagrams, block matrices and so on.</p>

<p>While the two-dimensional layouts used for elementary math such as addition and multiplication
are somewhat similar to tables, they differ in important ways.
For layout and for accessibility reasons, the <el>mstack</el> and <el>mlongdiv</el> elements discussed
in <specref ref="presm_elementary"/> should be used for elementary math notations.</p>

<p>In addition to the table elements mentioned above, the <el>mlabeledtr</el> element is used for labeling rows
of a table.  This is useful for numbered equations.
The first child of <el>mlabeledtr</el> is the label.
A label is somewhat special in that it is not considered an expression
in the matrix and is not counted when determining the number of columns
in that row.</p>

<div3 id="presm_mtable"><head>Table or Matrix
  <el role="defn starttag">mtable</el> <coreref ref="mtable"/></head>

<div4><head>Description</head>

<p>A matrix or table is specified using the <el>mtable</el> element. Inside of the <el>mtable</el> element, only <el>mtr</el>
or <el>mlabeledtr</el> elements may appear.
(In MathML 1.x, the <el>mtable</el> was allowed to &#x2018;infer&#x2019; <el>mtr</el> elements around its arguments,
and the <el>mtr</el> element could infer <el>mtd</el> elements.
This behaviour is <intref ref="interf_deprec">deprecated</intref>.)
</p>

<p>Table rows that have fewer columns than other rows of the same
table (whether the other rows precede or follow them) are effectively
padded on the right (or left in RTL context) with empty <el>mtd</el> elements so
that the number of columns in each row equals the maximum number of
columns in any row of the table. Note that the use of
<el>mtd</el> elements with non-default values of the
<att>rowspan</att> or <att>columnspan</att>
attributes may affect
the number of <el>mtd</el> elements that should be given
in subsequent <el>mtr</el> elements to cover a given
number of columns.
Note also that the label in an <el>mlabeledtr</el> element
is not considered a column in the table.</p>

<p>MathML does not specify a table layout algorithm.  In
particular, it is the responsibility of a MathML renderer to resolve
conflicts between the <att>width</att> attribute and other
constraints on the width of a table, such as explicit values for <att>columnwidth</att> attributes,
and minimum sizes for table cell contents.  For a discussion of table layout algorithms, see
<loc href="http://www.w3.org/TR/CSS2/tables.html#width-layout">Cascading
Style Sheets, level 2</loc>.</p>

</div4>

<div4 id="presm_mtable_attrs"><head>Attributes</head>

<p><el>mtable</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.
Any rules drawn as part of the <el>mtable</el> should be drawn using the color
specified by <att>mathcolor</att>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td >Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">align</td>
<td>("top" | "bottom" | "center" | "baseline" | "axis"), <emph>rownumber</emph>?</td>
<td>axis</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the vertical alignment of the table with respect to its environment.
<attval>axis</attval> means to align the vertical center of the table on
the environment's <termref def="dt-axis">axis</termref>.
(The <termref def="dt-axis">axis</termref> of an equation is an alignment line used by typesetters.
It is the line on which a minus sign typically lies.)
<attval>center</attval> and <attval>baseline</attval> both mean to align the center of the table
on the environment's baseline.
<attval>top</attval> or <attval>bottom</attval> aligns the top or bottom of the table on the environment's baseline.

If the <att>align</att> attribute value ends with a <emph>rownumber</emph>,
the specified row (counting from 1 for the top row)<phrase>, rather than the table as a whole, is aligned in the way described above with the exceptions noted below.
If <emph>rownumber</emph> is negative, it counts rows from the bottom.
When the value of <emph>rownumber</emph> is out of range or not an integer, it is ignored.
If a row number is specified and the alignment value is <attval>baseline</attval> or <attval>axis</attval>, 
the row's baseline or axis is used for alignment. Note this is only well defined when the <att>rowalign</att> 
value is <attval>baseline</attval> or <attval>axis</attval>; MathML does not specify how 
<attval>baseline</attval> or <attval>axis</attval> alignment should occur for other values of <att>rowalign</att>.</phrase> 
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rowalign</td>
<td>("top" | "bottom" | "center" | "baseline" | "axis") +</td>
<td>baseline</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the vertical alignment of the cells with respect to other cells within the same row:
<attval>top</attval> aligns the tops of each entry across the row;
<attval>bottom</attval> aligns the bottoms of the cells,
<attval>center</attval> centers the cells;
<attval>baseline</attval> aligns the baselines of the cells;
<attval>axis</attval> aligns the axis of each cells.
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnalign</td>
<td>("left" | "center" | "right") +</td>
<td>center</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal alignment of the cells with respect to other cells within the same column:
<attval>left</attval> aligns the left side of the cells;
<attval>center</attval> centers each cells;
<attval>right</attval> aligns the right side of the cells.
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">groupalign</td>
<td><intref ref="type_group-align"><emph>group-alignment-list-list</emph></intref></td>
<td>{left}</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
[this attribute is described with the alignment elements, <el>maligngroup</el> and <el>malignmark</el>,
in <specref ref="presm_malign"/>.]
</td>
</tr>
<tr>
<td rowspan="2" role="attname">alignmentscope</td>
<td>("true" | "false") +</td>
<td>true</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
[this attribute is described with the alignment elements, <el>maligngroup</el> and <el>malignmark</el>,
in <specref ref="presm_malign"/>.]
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnwidth</td>
<td>("auto" | <intref ref="type_length"><emph>length</emph></intref> | "fit") +</td>
<td>auto</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies how wide a column should be:
<attval>auto</attval> means that the column should be as wide as needed;
an explicit length means that the column is exactly that wide and the contents of that column are made to fit
by linewrapping or clipping at the discretion of the renderer;
<attval>fit</attval> means that the page width
remaining after subtracting the <attval>auto</attval> or fixed width columns
is divided equally among the <attval>fit</attval> columns.

If insufficient room remains to hold the
contents of the <attval>fit</attval> columns, renderers may
linewrap or clip the contents of the <attval>fit</attval> columns.
Note that when the <att>columnwidth</att> is specified as
a percentage, the value is relative to the width of the table, not
as a percentage of the default (which is <attval>auto</attval>).  That
is, a renderer should try to adjust the width of the column so that it
covers the specified percentage of the entire table width.

(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">width</td>
<td>"auto" | <intref ref="type_length"><emph>length</emph></intref></td>
<td>auto</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the desired width of the entire table and is intended for visual user agents.
<phrase>When the value is a percentage value or number without unit,
the value is relative to the
horizontal space that a MathML renderer has available

<phrase>, this is the current target width as used for
linebreaking as specified in <specref ref="presm_linebreaking"/></phrase>;
this allows the author to specify, for example, a table being full width
of the display.</phrase>
When the value is <attval>auto</attval>, the MathML
renderer should calculate the table width from its contents using
whatever layout algorithm it chooses.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rowspacing</td>
<td>(<intref ref="type_length"><emph>length</emph></intref>) +</td>
<td>1.0ex</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies how much space to add between rows.
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnspacing</td>
<td>(<intref ref="type_length"><emph>length</emph></intref>) +</td>
<td>0.8em</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies how much space to add between <phrase>columns</phrase>.
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rowlines</td>
<td>("none" | "solid" | "dashed") +</td>
<td>none</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies whether and what kind of lines should be added between each row:
<attval>none</attval> means no lines;
<attval>solid</attval> means solid lines;
<attval>dashed</attval> means dashed lines (how the dashes are spaced is implementation dependent).
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnlines</td>
<td>("none" | "solid" | "dashed") +</td>
<td>none</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies whether and what kind of lines should be added between each column:
<attval>none</attval> means no lines;
<attval>solid</attval> means solid lines;
<attval>dashed</attval> means dashed lines (how the dashes are spaced is implementation dependent).
(See the note below about multiple values).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">frame</td>
<td>"none" | "solid" | "dashed"</td>
<td>none</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies whether and what kind of lines should be drawn around the table.
<attval>none</attval> means no lines;
<attval>solid</attval> means solid lines;
<attval>dashed</attval> means dashed lines (how the dashes are spaced is implementation dependent).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">framespacing</td>
<td><intref ref="type_length"><emph>length</emph></intref>, <intref ref="type_length"><emph>length</emph></intref></td>
<td>0.4em 0.5ex</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the additional spacing added between the table and frame,
if <att>frame</att> is not <attval>none</attval>.
The first value specifies the spacing on the right and left;
the second value specifies the spacing above and below.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">equalrows</td>
<td>"true" | "false"</td>
<td>false</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies whether to force all rows to have the same total height.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">equalcolumns</td>
<td>"true" | "false"</td>
<td>false</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies whether to force all columns to have the same total width.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">displaystyle</td>
<td>"true" | "false"</td>
<td>false</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the value of <att>displaystyle</att> within each cell,
(<att>scriptlevel</att> is not changed);
see <specref ref="presm_scriptlevel"/>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">side</td>
<td>"left" | "right" | "leftoverlap" | "rightoverlap"</td>
<td>right</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies on what side of the table labels from enclosed <el>mlabeledtr</el> (if any) should be  placed.
The variants <attval>leftoverlap</attval> and <attval>rightoverlap</attval>
are useful when the table fits with the allowed width
when the labels are omitted, but not when they are included:
in such cases, the labels will overlap the row placed above it
if the <att>rowalign</att> for that row is <attval>top</attval>,
otherwise it is placed below it.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">minlabelspacing</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0.8em</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the minimum space allowed between a label and the adjacent cell in the row.
</td>
</tr>
</tbody>
</table>

<p>In the above specifications for attributes affecting rows
(respectively, columns, or the gaps between rows or columns),
the notation <code>(...)+</code> means that multiple values can be given for the attribute
as a space separated list (see <specref ref="fund_attval"/>).
In this context, a single value specifies the value to be used for all rows (resp., columns or gaps).
A list of values are taken to apply to corresponding rows (resp., columns or gaps)
in order, that is starting from the top row for rows or first column (left or right,
depending on directionality) for columns.
If there are more rows (resp., columns or gaps) than supplied values, the last value is repeated as needed.
If there are too many values supplied, the excess are ignored.</p>

<p>Note that none of the <phrase>areas</phrase> occupied by lines
<att>frame</att>, <att>rowlines</att> and <att>columnlines</att>,
nor the spacing  <att>framespacing</att>, <att>rowspacing</att> or <att>columnspacing</att>,
nor the label in <el>mlabeledtr</el> are counted as rows or columns.</p>

<p>The <att>displaystyle</att> attribute is allowed on the <el>mtable</el>
element to set the inherited value of the attribute.  If the attribute is
not present, the <el>mtable</el> element sets <att>displaystyle</att> to
<attval>false</attval> within the table elements.
(See <specref ref="presm_scriptlevel"/>.) </p>

</div4>

<div4><head>Examples</head>

<p>A 3 by 3 identity matrix could be represented as follows:
<eg role="mathml"><![CDATA[
<mrow>
  <mo> ( </mo>
  <mtable>
    <mtr>
      <mtd> <mn>1</mn> </mtd>
      <mtd> <mn>0</mn> </mtd>
      <mtd> <mn>0</mn> </mtd>
    </mtr>
    <mtr>
      <mtd> <mn>0</mn> </mtd>
      <mtd> <mn>1</mn> </mtd>
      <mtd> <mn>0</mn> </mtd>
    </mtr>
    <mtr>
      <mtd> <mn>0</mn> </mtd>
      <mtd> <mn>0</mn> </mtd>
      <mtd> <mn>1</mn> </mtd>
    </mtr>
  </mtable>
  <mo> ) </mo>
</mrow>
]]></eg>
</p>

<p>This might be rendered as:
<graphic source="image/f3025.gif" alt="\left(\begin{array}{ccc}1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{array}\right)"/>
Note that the parentheses must be represented explicitly; they are not
part of the <el>mtable</el> element's rendering. This allows
use of other surrounding fences, such as brackets, or none at all.</p>
</div4>
</div3>

<div3 id="presm_mtr"><head>Row in Table or Matrix <el role="defn starttag">mtr</el> <coreref ref="mtr"/></head>

<div4><head>Description</head>

<p>An <el>mtr</el> element represents one row in a table
or matrix. An <el>mtr</el> element is only allowed as a
direct sub-expression of an <el>mtable</el> element, and
specifies that its contents should form one row of the table. Each
argument of <el>mtr</el> is placed in a different column
of the table, starting at the leftmost column in a LTR context or rightmost
column in a RTL context.</p>

<p>As described in <specref ref="presm_mtable"/>,
<el>mtr</el> elements are
effectively padded with <el>mtd</el> 
elements when they are shorter than other rows in a table.
</p>
</div4>

<div4><head>Attributes</head>

<p><el>mtr</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">rowalign</td>
<td>"top" | "bottom" | "center" | "baseline" | "axis"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
overrides, for this row, the vertical alignment of cells specified 
by the <intref ref="presm_mtable_attrs"><att>rowalign</att></intref> attribute on the <el>mtable</el>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnalign</td>
<td>("left" | "center" | "right") +</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
overrides, for this row, the horizontal alignment of cells specified 
by the <intref ref="presm_mtable_attrs"><att>columnalign</att></intref> attribute on the <el>mtable</el>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">groupalign</td>
<td><intref ref="type_group-align"><emph>group-alignment-list-list</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
[this attribute is described with the alignment elements, <el>maligngroup</el> and <el>malignmark</el>,
in <specref ref="presm_malign"/>.]
</td>
</tr>
</tbody>
</table>
</div4>
</div3>

<div3 id="presm_mlabeledtr"><head>Labeled Row in Table or Matrix
  <el role="defn starttag">mlabeledtr</el></head>

<div4><head>Description</head>

<p>An <el>mlabeledtr</el> element represents one row in
a table that has a label on either the left or right side, as
determined by the <att>side</att> attribute.  The label is
the first child of <el>mlabeledtr</el>, and should be enclosed in an <el>mtd</el>.
 The rest of the children represent the contents of the row and are treated identically
 to the children of <el>mtr</el>; consequently all of the children
<!--except the first --> must be <el>mtd</el> elements.
</p>

<p>
An <el>mlabeledtr</el> element is only allowed as a
direct sub-expression of an <el>mtable</el> element.
Each argument of <el>mlabeledtr</el> except for the first
argument (the label) is placed in a different column
of the table, starting at the leftmost column.</p>

<p>Note that the label element is not considered to be a cell in the
table row.  In particular, the label element is not taken into
consideration in the table layout for purposes of width and alignment
calculations.  For example, in the case of an <el>mlabeledtr</el> with a label and a single centered <el>mtd</el> child, the child is first centered in the
enclosing <el>mtable</el>, and then the label is
placed.  Specifically, the child is <emph>not</emph> centered in the
space that remains in the table after placing the label.</p>

<p>While MathML does not specify an algorithm for placing labels,
implementers of visual renderers may find the following formatting
model useful.  To place a label, an <phrase>implementor</phrase> might think in terms
of creating a larger table, with an extra column on both ends.  The
<att>columnwidth</att> attributes of both these border
columns would be set to <attval>fit</attval> so that they expand
to fill whatever space remains after the inner columns have been laid
out.  Finally, depending on the values of <att>side</att>
and <att>minlabelspacing</att>, the label is placed
in whatever border column is appropriate, possibly shifted down if
necessary, and aligned according to <att>columnalignment</att>.</p>
</div4>

<div4><head>Attributes</head>

<p>
The attributes for <el>mlabeledtr</el> are the same
as for <el>mtr</el>.  Unlike the attributes for the
<el>mtable</el> element, attributes of
<el>mlabeledtr</el> that apply to column elements
also apply to the label.  For example, in a one column table,
<eg role="mathml-fragment">
<![CDATA[
<mlabeledtr rowalign='top'>
]]>
</eg>
means that the label and other entries in the row are vertically aligned
along their top.  To force a particular alignment on the label,
the appropriate attribute would normally be set on the
<el>mtd</el> <phrase>element</phrase> that surrounds the label content.
</p>
</div4>

<div4><head>Equation Numbering</head>

<p>One of the important uses of <el>mlabeledtr</el> is
for numbered equations.  In a <el>mlabeledtr</el>, the
label represents the equation number and the elements in the row are
the equation being numbered.  The <att>side</att> and <att>minlabelspacing</att> attributes of <el>mtable</el> determine the placement of the equation
number.</p>

<p>In larger documents with many numbered equations, automatic
numbering becomes important. While automatic equation numbering and
automatically resolving references to equation numbers is outside the
scope of MathML, these problems can be addressed by the use of style
sheets or other means. The mlabeledtr construction provides support
for both of these functions in a way that is intended to facilitate
XSLT processing.  The <el>mlabeledtr</el> element can be
used to indicate the presence of a numbered equation, and the first
child can be changed to the current equation number, along with
incrementing the global equation number.  For cross references, an
<att>id</att> on either the mlabeledtr element or on the first element
itself could be used as a target of any link.
<phrase>Alternatively, in a CSS context, one could use an empty <el>mtd</el>
as the first child of <el>mlabeledtr</el> and use CSS counters and generated content
to fill in the equation number using a CSS style such as</phrase>
<eg>
body {counter-reset: eqnum;}
mtd.eqnum {counter-increment: eqnum;}
mtd.eqnum:before {content: "(" counter(eqnum) ")"}
</eg>
</p>

</div4>
<div4><head>Example</head>
<eg role="mathml"><![CDATA[
<mtable>
  <mlabeledtr id='e-is-m-c-square'>
    <mtd>
      <mtext> (2.1) </mtext>
    </mtd>
    <mtd>
     <mrow>
       <mi>E</mi>
       <mo>=</mo>
       <mrow>
        <mi>m</mi>
        <mo>&it;</mo>
        <msup>
         <mi>c</mi>
         <mn>2</mn>
        </msup>
       </mrow>
     </mrow>
    </mtd>
  </mlabeledtr>
</mtable>
]]></eg>

<p>This should be rendered as:
<table width="100%">
<tbody>
<tr>
<td id="eqnoc1">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;</td>
<td id="eqnoc2"><var>E</var> = <var>m</var><var>c</var><sup>2</sup></td> 
<td id="eqnoc3">(2.1)</td>
</tr>
</tbody>
</table>
</p>
</div4>
</div3>

<div3 id="presm_mtd"><head>Entry in Table or Matrix <el role="defn starttag">mtd</el></head> 

<div4><head>Description</head>

<p>An <el>mtd</el> element represents one entry, or cell, in a
table or matrix. An <el>mtd</el> element is only
allowed as a direct sub-expression of an <el>mtr</el>
or an <el>mlabeledtr</el> element.</p>

<p>The <el>mtd</el> element accepts 
a single argument possibly being an inferred <el>mrow</el> of multiple children;
see <specref ref="presm_reqarg"/>.</p>
</div4>

<div4 id="presm_mtdatts"><head>Attributes</head>
<p><el>mtd</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>
<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">rowspan</td>
<td><intref ref="type_positive-integer"><emph>positive-integer</emph></intref></td>
<td>1</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
causes the cell to be treated as if it occupied the number of rows specified.
The corresponding <el>mtd</el> in the following <attval>rowspan</attval>-1 rows must be omitted.
The interpretation corresponds with the similar attributes for HTML 4.01 tables.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnspan</td>
<td><intref ref="type_positive-integer"><emph>positive-integer</emph></intref></td>
<td>1</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
causes the cell to be treated as if it occupied the number of columns specified.
The following <attval>rowspan</attval>-1 <el>mtd</el>s must be omitted.
The interpretation corresponds with the similar attributes for HTML 4.01 tables.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rowalign</td>
<td>"top" | "bottom" | "center" | "baseline" | "axis"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the vertical alignment of this cell, overriding any value
specified on the containing <el>mrow</el> and <el>mtable</el>.
See the <intref ref="presm_mtable_attrs"><att>rowalign</att></intref> attribute of <el>mtable</el>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">columnalign</td>
<td>"left" | "center" | "right"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal alignment of this cell, overriding any value
specified on the containing <el>mrow</el> and <el>mtable</el>.
See the <intref ref="presm_mtable_attrs"><att>columnalign</att></intref> attribute of <el>mtable</el>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">groupalign</td>
<td><intref ref="type_group-align"><emph>group-alignment-list</emph></intref></td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
[this attribute is described with the alignment elements, <el>maligngroup</el> and <el>malignmark</el>,
in <specref ref="presm_malign"/>.]
</td>
</tr>
</tbody>
</table>

<p>The <att>rowspan</att> and <att>columnspan</att> attributes
can be used around an <el>mtd</el> element that represents
the label in a <el>mlabeledtr</el> element.
Also, the label of a <el>mlabeledtr</el> element is not
considered to be part of a previous <att>rowspan</att> and
<att>columnspan</att>.
</p>

</div4>
</div3>

<div3 id="presm_malign"><head>Alignment Markers
   <el role="emptytag">maligngroup</el>, <el role="emptytag">malignmark</el></head>

<div4><head>Description</head>

<p>Alignment markers are space-like elements (see <specref ref="presm_mspace"/>) that can be used 
to vertically align specified points within a column of MathML
expressions by the automatic insertion of the necessary amount of
horizontal space between specified sub-expressions.</p>

<p>The discussion that follows will use the example of a set of
simultaneous equations that should be rendered with vertical
alignment of the coefficients and variables of each term, by
inserting spacing somewhat like that shown here:
<eg><![CDATA[
    8.44x + 55  y =  0
    3.1 x -  0.7y = -1.1
]]></eg>
If the example expressions shown above were arranged in a column
but not aligned, they would appear as:
<eg><![CDATA[
    8.44x + 55y = 0
    3.1x - 0.7y = -1.1
]]></eg>
For audio renderers, it is suggested that the alignment elements
produce the analogous behavior of altering the rhythm of pronunciation
so that it is the same for several sub-expressions in a column, by the
insertion of the appropriate time delays in place of the extra
horizontal spacing described here.</p>

<p>The expressions whose parts are to be aligned (each equation, in the
example above) must be given as the table elements (i.e. as the <el>mtd</el> elements) of one column of an
<el>mtable</el>. To avoid confusion, the term <quote>table
cell</quote> rather than <quote>table element</quote> will be used in the
remainder of this section.</p>

<p>All interactions between alignment elements are limited to the
<el>mtable</el> column they arise in. That is, every
column of a table specified by an <el>mtable</el> element
acts as an <quote>alignment scope</quote> that contains within it all alignment
effects arising from its contents. It also excludes any interaction
between its own alignment elements and the alignment elements inside
any nested alignment scopes it might contain.</p>

<p>The reason <el>mtable</el> columns are used as
alignment scopes is that they are the only general way in MathML to
arrange expressions into vertical columns. Future versions of MathML
may provide an <el namespace="future-mathml">malignscope</el> element that allows
an alignment scope to be created around any MathML element, but even
then, table columns would still sometimes need to act as alignment
scopes, and since they are not elements themselves, but rather are
made from corresponding parts of the content of several
<el>mtr</el> elements, they could not individually be the
content of an alignment scope element.</p>

<p>An <el>mtable</el> element can be given the attribute
<att>alignmentscope</att>=<attval>false</attval> to cause 
its columns not to act as alignment scopes. This is discussed further at
the end of this section. Otherwise, the discussion in this section assumes
that this attribute has its default value of <attval>true</attval>.</p>
</div4>

<div4><head>Specifying alignment groups</head>

<p>To cause alignment, it is necessary to specify, within each
expression to be aligned, the points to be aligned with corresponding
points in other expressions, and the beginning of each <emph>alignment
group</emph> of sub-expressions that can be horizontally shifted as a
unit to effect the alignment. Each alignment group must contain one
alignment point. It is also necessary to specify which expressions in
the column have no alignment groups at all, but are affected only by
the ordinary column alignment for that column of the table, i.e. by
the <att>columnalign</att> attribute, described elsewhere.</p>

<p>The alignment groups start at the locations of invisible
<el>maligngroup</el> elements, which are rendered with
zero width when they occur outside of an alignment scope, but within
an alignment scope are rendered with just enough horizontal space to
cause the desired alignment of the alignment group that follows
them. A simple algorithm by which a MathML application can achieve this is given
later. In the example above, each equation would have one
<el>maligngroup</el> element before each coefficient,
variable, and operator on the left-hand side, one before the
<code>=</code> sign, and one before the constant on the right-hand
side.</p>

<p>In general, a table cell containing <var>n</var>
<el>maligngroup</el> elements contains <var>n</var>
alignment groups, with the <var>i</var>th group consisting of the
elements entirely after the <var>i</var>th
<el>maligngroup</el> element and before the
(<var>i</var>+1)-th; no element within the table cell's content
should occur entirely before its first
<el>maligngroup</el> element.</p>

<p>Note that the division into alignment groups does <emph>not</emph>
necessarily fit the nested expression structure of the MathML
expression containing the groups &#x2014; that is, it is permissible for one
alignment group to consist of the end of one
<el>mrow</el>, all of another one, and the beginning of a
third one, for example. This can be seen in the MathML markup for the
present example, given at the end of this section.</p>

<p>The nested expression structure formed by <el>mrow</el>s
and other layout schemata should reflect the mathematical structure of the
expression, not the alignment-group structure, to make possible optimal
renderings and better automatic interpretations; see the discussion of
proper grouping in section <specref ref="presm_mrow"/>. Insertion of
alignment elements (or other space-like elements) should not alter the
correspondence between the structure of a MathML expression and the
structure of the mathematical expression it represents.</p>

<p>Although alignment groups need <phrase>not</phrase>
coincide with the nested expression structure of layout schemata,
there are nonetheless restrictions on where an <el>maligngroup</el>
element is allowed within a table cell. The <el>maligngroup</el>
element may only be contained within elements <phrase>(directly or indirectly)</phrase> of the following types
(which are themselves contained in the table cell):
<ulist>
<item><p>an <el>mrow</el> element, including an inferred
<el>mrow</el> such as the one formed by a multi-child
<el>mtd</el> element<phrase>, but excluding <el>mrow</el> which
contains a change of direction using the <att>dir</att> attribute</phrase>;</p>
</item>

<item><p>an <el>mstyle</el> element
<phrase>, but excluding those which change direction
 using the <att>dir</att> attribute</phrase>;</p>
</item>

<item><p>an <el>mphantom</el> element;</p>
</item>

<item><p>an <el>mfenced</el> element;</p>
</item>

<item><p>an <el>maction</el> element, though only its
selected sub-expression is checked;</p>
</item>

<item><p>a <el>semantics</el> element.</p>
</item> 
</ulist>
</p>

<p>These restrictions are intended to ensure that alignment can be
unambiguously specified, while avoiding complexities involving things
like overscripts, radical signs and fraction bars. They also ensure
that a simple algorithm suffices to accomplish the desired
alignment.</p>

<p>Note that some positions for an <el>maligngroup</el>
element, although legal, are not useful, such as  an
<el>maligngroup</el> element <phrase>that is</phrase> an argument of an
<el>mfenced</el> element. <phrase>Similarly, when inserting an <el>maligngroup</el>
element in an element whose arguments have positional significance, it
is necessary to introduce a new <el>mrow</el> element
containing just the <el>maligngroup</el> element and the child element
it precedes in order to preserve the proper expression structure.  For
example, to insert an <el>maligngroup</el> before the denominator
child of an <el>mfrac</el> element, it is necessary to enclose the
<el>maligngroup</el> and the denominator in an <el>mrow</el> to
avoid introducing an illegal third child in the
<el>mfrac</el>.</phrase> In general, this will be necessary except
when the <el>maligngroup</el> element is inserted directly into an
<el>mrow</el> or into an element that can form an inferred
<el>mrow</el> from its contents.  See the warning about the legal
grouping of <quote>space-like elements</quote> in <specref
ref="presm_mspace"/> <phrase>for an analogous example 
involving <el>malignmark</el></phrase>.</p> 

<p>For the table cells that are divided into alignment groups, every
element in their content must be part of exactly one alignment group,
except <phrase>for</phrase> the elements from the above list that contain
<el>maligngroup</el> elements inside them and the
<el>maligngroup</el> elements themselves. This means
that, within any table cell containing alignment groups, the first
complete element must be an <el>maligngroup</el> element,
though this may be preceded by the start tags of other elements.</p>

<p>This requirement removes a potential confusion about how to align
elements before the first <el>maligngroup</el> element,
and makes it easy to identify table cells that are left out of their
column's alignment process entirely.</p>

<p>Note that it is not required that the table cells in a column that
are divided into alignment groups each contain the same number of
groups. If they don't, zero-width alignment groups are effectively
added on the right side<phrase> (or left side, in a RTL context)</phrase> of each table cell that has fewer groups than
other table cells in the same column.</p>
</div4>

<div4><head>Table cells that are not divided into alignment groups</head>

<p>Expressions in a column that are to have no alignment groups
should contain no <el>maligngroup</el>
elements. Expressions with no alignment groups are aligned using only
the <att>columnalign</att> attribute that applies to the table
column as a whole, and are not affected by the <att>groupalign</att>
attribute described below. If such an expression is wider than the
column width needed for the table cells containing alignment groups,
all the table cells containing alignment groups will be shifted as a
unit within the column as described by the <att>columnalign</att>
attribute for that column. For example, a column heading with no
internal alignment could be added to the column of two equations given
above by preceding them with another table row containing an
<el>mtext</el> element for the heading, and using the
default <att>columnalign</att>="center" for the table, to
produce:
<eg><![CDATA[
equations with aligned variables
      8.44x + 55  y =  0
      3.1 x -  0.7y = -1.1
]]></eg>
or, with a shorter heading,
<eg><![CDATA[
   some equations
8.44x + 55  y =  0
3.1 x -  0.7y = -1.1
]]></eg>
</p>
</div4>

<div4><head>Specifying alignment points using <el role="emptytag">malignmark</el></head>

<p>Each alignment group's alignment point can either be specified by
an <el>malignmark</el> element anywhere within the
alignment group (except within another alignment scope wholly
contained inside it), or it is determined automatically from the
<att>groupalign</att> attribute. The <att>groupalign</att>
attribute can be specified on the group's preceding
<el>maligngroup</el> element or on its surrounding
<el>mtd</el>, <el>mtr</el>, or
<el>mtable</el> elements. In typical cases, using the
<att>groupalign</att> attribute is sufficient to describe the
desired alignment points, so no <el>malignmark</el>
elements need to be provided.</p>

<p>The <el>malignmark</el> element indicates that the
alignment point should occur on the right edge of the preceding
element, or the left edge of the following element or character,
depending on the <att>edge</att> attribute of
<el>malignmark</el>. Note that it may be necessary to
introduce an <el>mrow</el> to group an
<el>malignmark</el> element with a neighboring element,
in order not to alter the argument count of the containing
element. (See the warning about the legal grouping of <quote>space-like
elements</quote> in <specref ref="presm_mspace"/>).</p>

<p>When an <el>malignmark</el> element is provided within an
alignment group, it can occur in an arbitrarily deeply nested element
within the group, as long as it is not within a nested alignment scope. It
is not subject to the same restrictions on location as <el>maligngroup</el> elements. However, its immediate
surroundings need to be such that the element to its immediate right or
left (depending on its <att>edge</att> attribute) can be
unambiguously identified. If no such element is present, renderers should
behave as if a zero-width element had been inserted there.</p>

<p>For the purposes of alignment, an element X is considered to be to the
immediate left of an element Y, and Y to the immediate right of X, whenever
X and Y are successive arguments of one (possibly inferred) <el>mrow</el> element,
with X coming before Y<phrase> (in a LTR context; with X coming after Y in a RTL context)</phrase>. In the case of
<el>mfenced</el> elements, MathML applications should evaluate this
relation as if the <el>mfenced</el> element had been
replaced by the equivalent expanded form involving <el>mrow</el>. Similarly, an <el>maction</el>
element should be treated as if it were replaced by its currently selected
sub-expression. In all other cases, no relation of <quote>to the immediate
left or right</quote> is defined for two elements X and Y. However, in the
case of content elements interspersed in presentation markup, MathML applications
should attempt to evaluate this relation in a sensible way. For example, if
a renderer maintains an internal presentation structure for rendering
content elements, the relation could be evaluated with respect to
that. (See <specref ref="contm"/> and <specref ref="mixing"/> for further
details about mixing presentation and content markup.)</p>

<p>
<el>malignmark</el> elements are allowed to occur within
the content of token elements, such as <el>mn</el>,
<el>mi</el>, or <el>mtext</el>. When this
occurs, the character immediately before or after the
<el>malignmark</el> element will carry the alignment
point; in all other cases, the element to its immediate left or right
will carry the alignment point. The rationale for this is that it is
sometimes desirable to align on the edges of specific characters
within multi-character token elements.</p>

<p>If there is more than one <el>malignmark</el> element
in an alignment group, all but the first one will be ignored. MathML
applications may wish to provide a mode in which they will warn about
this situation, but it is not an error, and should trigger no warnings
by default. <phrase>The rationale for this is that</phrase> it would
be inconvenient to have to remove all 
unnecessary <el>malignmark</el> elements from
automatically generated data, in certain cases, such as when they are
used to specify alignment on <quote>decimal points</quote> other than the '.' 
character.</p>
</div4>

<div4><head><el role="defn emptytag">malignmark</el> Attributes</head>
<p><el>malignmark</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>
(however, neither <att>mathcolor</att> nor <att>mathbackground</att> have any effect).</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">edge</td>
<td>"left" | "right"</td>
<td>left</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
see the discussion below.
</td>
</tr>
</tbody>
</table>

<p><phrase>The
<att>edge</att> attribute</phrase> specifies whether the alignment point will be
found on the left or right edge of some element or character. The
precise location meant by <quote>left edge</quote> or <quote>right edge</quote> is discussed
below. If <att>edge</att>="right", the alignment point is the right
edge of the element or character to the immediate left of the
<el>malignmark</el> element. If <att>edge</att>="left",
the alignment point is the left edge of the element or character to
the immediate right of the <el>malignmark</el>
element. Note that the attribute refers to the choice of edge rather
than to the direction in which to look for the element whose edge will
be used.</p>

<p>For <el>malignmark</el> elements that occur within
the content of MathML token elements, the preceding or following
character in the token element's content is used; if there is no such
character, a zero-width character is effectively inserted for the
purpose of carrying the alignment point on its edge. For all other
<el>malignmark</el> elements, the preceding or following
element is used; if there is no such element, a zero-width element is
effectively inserted to carry the alignment point.</p>

<p>The precise definition of the <quote>left edge</quote> or <quote>right edge</quote> of a
character or glyph (e.g. whether it should coincide with an edge of
the character's bounding box) is not specified by MathML, but is at
the discretion of the renderer; the renderer is allowed to let the
edge position depend on the character's context as well as on the
character itself.</p>

<p>For proper alignment of columns of numbers (using <att>groupalign</att> values of <attval>left</attval>, <attval>right</attval>, or <attval>decimalpoint</attval>), it is
likely to be desirable for the effective width (i.e. the distance between
the left and right edges) of decimal digits to be constant, even if their
bounding box widths are not constant (e.g. if <quote>1</quote> is narrower
than other digits). For other characters, such as letters and operators, it
may be desirable for the aligned edges to coincide with the bounding
box.</p>

<p>The <quote>left edge</quote> of a MathML element or alignment group
refers to the left edge of the leftmost glyph drawn to render the element
or group, except that explicit space represented by <el>mspace</el> or <el>mtext</el> elements
should also count as <quote>glyphs</quote> in this context, as should
glyphs that would be drawn if not for <el>mphantom</el>
elements around them. The <quote>right edge</quote> of an element or
alignment group is defined similarly.</p>
</div4>

<div4><head><el role="defn emptytag">maligngroup</el> Attributes</head>

<p><el>maligngroup</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>
(however, neither <att>mathcolor</att> nor <att>mathbackground</att> have any effect).</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">groupalign</td>
<td>"left" | "center" | "right" | "decimalpoint"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
see the discussion below.
</td>
</tr>
</tbody>
</table>

<p><el>maligngroup</el> has one attribute,
<att>groupalign</att>, which is used to determine the position of
its group's alignment point when no <el>malignmark</el>
element is present. The following discussion assumes that no
<el>malignmark</el> element is found within a group.</p>

<p>In the example given at the beginning of this section, there is one
column of 2 table cells, with 7 alignment groups in each table cell;
thus there are 7 columns of alignment groups, with 2 groups, one above
the other, in each column. These columns of alignment groups should be
given the 7 <att>groupalign</att> values <quote>decimalpoint left left
decimalpoint left left decimalpoint</quote>, in that order. How to specify
this list of values for a table cell or table column as a whole, using
attributes on elements surrounding the
<el>maligngroup</el> element is described later.</p>

<p>If <att>groupalign</att> is <quote>left</quote>,
<quote>right</quote>, or <quote>center</quote>, the alignment point is
defined to be at the group's left edge, at its right edge, or halfway
between these edges, respectively. The meanings of <quote>left edge</quote>
and <quote>right edge</quote> are as discussed above in relation to <el>malignmark</el>.</p>

<p>If <att>groupalign</att> is <quote>decimalpoint</quote>, 
the alignment point is the right edge of the character immediately before the
left-most 'decimal point', i.e. matching the character specified by
the <att>decimalpoint</att> attribute of <el>mstyle</el> (default ".", U+002E)
in the first <el>mn</el> element found along
the alignment group's baseline. More precisely, the alignment group is
scanned recursively, depth-first, for the first <el>mn</el>
element, descending into all arguments of each element of the types
<el>mrow</el> (including inferred
<el>mrow</el>s), <el>mstyle</el>,
<el>mpadded</el>, <el>mphantom</el>, <el>menclose</el>,
<el>mfenced</el>, or <el>msqrt</el>,
descending into only the first argument of each <quote>scripting</quote> element
(<el>msub</el>, <el>msup</el>,
<el>msubsup</el>, <el>munder</el>,
<el>mover</el>, <el>munderover</el>,
<el>mmultiscripts</el>) or of each
<el>mroot</el> or <el>semantics</el> element,
descending into only the selected sub-expression of each
<el>maction</el> element, and skipping the content of all
other elements. The first <el>mn</el> so found always
contains the alignment point, which is the right edge of the last
character before the first decimal point in the content of the
<el>mn</el> element. If there is no decimal point in the
<el>mn</el> element, the alignment point is the right edge
of the last character in the content. If the decimal point is the
first character of the <el>mn</el> element's content, the
right edge of a zero-width character inserted before the decimal point
is used. If no <el>mn</el> element is found, the right
edge of the entire alignment group is used (as for
<att>groupalign</att>="right").</p>

<p>In order to permit alignment on decimal points in
<el>cn</el> elements, a MathML application can convert a
content expression into a presentation expression that renders the
same way before searching for decimal points as described above.</p>

<p>Characters other than <quote>.</quote> can be used as
<quote>decimal points</quote> for alignment by using <el>mstyle</el>;
more arbitrary alignment points can chosen by embedding <el>malignmark</el> elements
within the <el>mn</el> token's content itself.</p>

<p>For any of the <att>groupalign</att> values, if an explicit
<el>malignmark</el> element is present anywhere within
the group, the position it specifies (described earlier) overrides the
automatic determination of alignment point from the
<att>groupalign</att> value.</p>
</div4>

<div4><head>Inheritance of <att>groupalign</att> values</head>

<p>It is not usually necessary to put a <att>groupalign</att>
attribute on every <el>maligngroup</el> element. Since
this attribute is usually the same for every group in a column of
alignment groups to be aligned, it can be inherited from an attribute
on the <el>mtable</el> that was used to set up the
alignment scope as a whole, or from the <el>mtr</el> or
<el>mtd</el> elements surrounding the alignment group. It
is inherited via an <quote>inheritance path</quote> that proceeds from
<el>mtable</el> through successively contained
<el>mtr</el>, <el>mtd</el>, and
<el>maligngroup</el> elements. There is exactly one
element of each of these kinds in this path from an
<el>mtable</el> to any alignment group inside it.  <phrase>In
general, t</phrase>he value of <att>groupalign</att> will be 
inherited by any given alignment group from the innermost element
that surrounds the alignment group and provides an explicit
setting for this attribute.  <phrase>For example, if an
<el>mtable</el> element specifies values for <att>groupalign</att> and
a <el>maligngroup</el> element within the table also specifies an
explicit <att>groupalign</att> value, then then the value from the
<el>maligngroup</el> takes priority.</phrase></p>

<p id="type_group-align">Note, however, that each <el>mtd</el> element needs, in
general, a list of <att>groupalign</att> values, one for each
<el>maligngroup</el> element inside it<phrase> (from left to right, in an LTR context,
or from right to left in an RTL context)</phrase>, rather than just
a single value. Furthermore, an <el>mtr</el> or
<el>mtable</el> element needs, in general, a list of lists
of <att>groupalign</att> values, since it spans multiple
<el>mtable</el> columns, each potentially acting as an
alignment scope. Such lists of <emph>group-alignment</emph> values are specified
using the following syntax rules:
<!-- TODO: use appropriate element for syntax rules here -->
<eg>
group-alignment             = "left" | "right" | "center" | "decimalpoint"
group-alignment-list        = <emph>group-alignment</emph> +
group-alignment-list-list   = ( "{" <emph>group-alignment-list</emph> "}" ) +
</eg>
</p>

<p>As described in <specref ref="fund_attval"/>, <code>|</code> separates
alternatives; <code>+</code> represents optional repetition (i.e. 1 or
more copies of what precedes it), with extra values ignored and the
last value repeated if necessary to cover additional table columns or
alignment group columns; <code>'{'</code> and <code>'}'</code>
represent literal braces; and <code>(</code> and <code>)</code> are
used for grouping, but do not literally appear in the attribute
value.</p>

<p>The permissible values of the <att>groupalign</att> attribute of the
elements that have this attribute are specified using the above
syntax definitions as follows:
<table border="1">
<thead>
<tr>
<td>Element type</td>
<td>groupalign attribute syntax</td>
<td>default value</td>
</tr>
</thead>
<tbody>
<tr>
<td><el>mtable</el></td>
<td><intref ref="type_group-align"><emph>group-alignment-list-list</emph></intref></td>
<td>{left}</td>
</tr>
<tr>
<td><el>mtr</el></td>
<td><intref ref="type_group-align"><emph>group-alignment-list-list</emph></intref></td>
<td><emph>inherited from <el>mtable</el> attribute</emph></td>
</tr>
<tr>
<td><el>mlabeledtr</el></td>
<td><intref ref="type_group-align"><emph>group-alignment-list-list</emph></intref></td>
<td><emph>inherited from <el>mtable</el> attribute</emph></td>
</tr>
<tr>
<td><el>mtd</el></td>
<td><intref ref="type_group-align"><emph>group-alignment-list</emph></intref></td>
<td><emph>inherited from within <el>mtr</el> attribute</emph></td>
</tr>
<tr>
<td><el>maligngroup</el></td>
<td><intref ref="type_group-align"><emph>group-alignment</emph></intref></td>
<td><emph>inherited from within <el>mtd</el> attribute</emph></td>
</tr>
</tbody>
</table>
</p>

<p>In the example near the beginning of this section, the group
alignment values could be specified on every <el>mtd</el>
element using <att>groupalign</att> = <quote>decimalpoint left left
decimalpoint left left decimalpoint</quote>, or on every
<el>mtr</el> element using <att>groupalign</att> =
<quote>{decimalpoint left left decimalpoint left left decimalpoint}</quote>, or
(most conveniently) on the <el>mtable</el> as a whole
using <att>groupalign</att> = <quote>{decimalpoint left left decimalpoint
left left decimalpoint}</quote>, which provides a single braced list of
<intref ref="type_group-align"><emph>group-alignment</emph></intref> values for the single column of expressions to be
aligned.</p>
</div4>

<div4><head>MathML representation of an alignment example</head>

<p>The above rules are sufficient to explain the MathML representation
of the example given near the start of this section. 
To repeat the example, the desired rendering is:
<eg><![CDATA[
    8.44x + 55  y =  0
    3.1 x -  0.7y = -1.1
]]></eg>
</p>

<p>One way to represent that in MathML is:
<eg role="mathml"><![CDATA[
<mtable groupalign=
         "{decimalpoint left left decimalpoint left left decimalpoint}">
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <maligngroup/>
            <mn> 8.44 </mn>
            <mo> &InvisibleTimes; </mo>
            <maligngroup/>
            <mi> x </mi>
          </mrow>
          <maligngroup/>
          <mo> + </mo>
          <mrow>
            <maligngroup/>
            <mn> 55 </mn>
            <mo> &InvisibleTimes; </mo>
            <maligngroup/>
            <mi> y </mi>
          </mrow>
        </mrow>
      <maligngroup/>
      <mo> = </mo>
      <maligngroup/>
      <mn> 0 </mn>
    </mrow>
    </mtd>
]]><phrase><![CDATA[  </mtr>
  <mtr>]]></phrase><![CDATA[
    <mtd>
      <mrow>
        <mrow>
          <mrow>
            <maligngroup/>
            <mn> 3.1 </mn>
            <mo> &InvisibleTimes; </mo>
            <maligngroup/>
            <mi> x </mi>
          </mrow>
          <maligngroup/>
          <mo> - </mo>
          <mrow>
            <maligngroup/>
            <mn> 0.7 </mn>
            <mo> &InvisibleTimes; </mo>
            <maligngroup/>
            <mi> y </mi>
          </mrow>
        </mrow>
        <maligngroup/>
        <mo> = </mo>
        <maligngroup/>
        <mrow>
          <mo> - </mo>
          <mn> 1.1 </mn>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
]]></eg>
</p>
</div4>

<div4><head>Further details of alignment elements</head>

<p>The alignment elements <el>maligngroup</el> and
<el>malignmark</el> can occur outside of alignment
scopes, where they are ignored. The rationale behind this is that in
situations in which MathML is generated, or copied from another
document, without knowing whether it will be placed inside an
alignment scope, it would be inconvenient for this to be an error.</p>

<p>An <el>mtable</el> element can be given the attribute <att>alignmentscope</att>=<attval>false</attval> to cause its
columns not to act as alignment scopes. In general, this attribute has the
syntax <code>("true" | "false") +</code>; if its value is a list of Boolean
values, each Boolean value applies to one column, with the last value
repeated if necessary to cover additional columns, or with extra values
ignored. Columns that are not alignment scopes are part of the alignment
scope surrounding the <el>mtable</el> element, if there is
one. Use of <att>alignmentscope</att>=<attval>false</attval> allows nested tables to contain <el>malignmark</el> elements for aligning the inner table in the
surrounding alignment scope.</p>

<p>As discussed above, processing of alignment for content elements is
not well-defined, since MathML does not specify how content elements
should be rendered. However, many MathML applications are likely to find it
convenient to internally convert content elements to presentation
elements that render the same way. Thus, as a general rule, even if a
renderer does not perform such conversions internally, it is
recommended that the alignment elements should be processed as if it
did perform them.</p>

<p>A particularly important case for renderers to handle gracefully is the
interaction of alignment elements with the <el>matrix</el>
content element, since this element may or may not be internally converted
to an expression containing an <el>mtable</el> element for
rendering. To partially resolve this ambiguity, it is suggested, but not
required, that if the <el>matrix</el> element is converted
to an expression involving an <el>mtable</el> element, that
the <el>mtable</el> element be given the attribute <att>alignmentscope</att>=<attval>false</attval>, which will
make the interaction of the <el>matrix</el> element with the
alignment elements no different than that of a generic presentation element
(in particular, it will allow it to contain <el>malignmark</el> elements that operate within the alignment
scopes created by the columns of an <el>mtable</el> that
contains the <el>matrix</el> element in one of its table
cells).</p>

<p>The effect of alignment elements within table cells that have
non-default values of the <att>columnspan</att> or <att>rowspan</att> attributes is not specified, except that such
use of alignment elements is not an error. Future versions of MathML may
specify the behavior of alignment elements in such table cells.</p>

<p>The effect of possible linebreaking of an <el>mtable</el>
element on the alignment elements is not specified.</p>
</div4>

<div4><head>A simple alignment algorithm</head>

<p>A simple algorithm by which a MathML renderer can perform the
alignment specified in this section is given here. Since the alignment
specification is deterministic (except for the definition of the left
and right edges of a character), any correct MathML alignment
algorithm will have the same behavior as this one. Each
<el>mtable</el> column (alignment scope) can be treated
independently; the algorithm given here applies to one
<el>mtable</el> column, and takes into account the
alignment elements, the <att>groupalign</att> attribute described in
this section, and the <att>columnalign</att> attribute described
under <el>mtable</el> (<specref ref="presm_mtable"/>).</p>

<p>First, a rendering is computed for the contents of each table cell
in the column, using zero width for all
<el>maligngroup</el> and <el>malignmark</el>
elements. The final rendering will be identical except for horizontal
shifts applied to each alignment group and/or table cell. The
positions of alignment points specified by any
<el>malignmark</el> elements are noted, and the remaining
alignment points are determined using <att>groupalign</att>
values.</p>

<p>For each alignment group, the horizontal positions of the left
edge, alignment point, and right edge are noted, allowing the width of
the group on each side of the alignment point (left and right) to be
determined. The sum of these two <quote>side-widths</quote>, i.e. the sum of the
widths to the left and right of the alignment point, will equal the
width of the alignment group.</p>

<p>Second, each column of alignment groups is
scanned. The <var>i</var>th scan covers the <var>i</var>th
alignment group in each table cell containing any alignment
groups. Table cells with no alignment groups, or with fewer than
<var>i</var> alignment groups, are ignored. Each scan computes two
maximums over the alignment groups scanned: the maximum width to the
left of the alignment point, and the maximum width to the right of the
alignment point, of any alignment group scanned.</p>

<p>The sum of all the maximum widths computed (two for each column of
alignment groups) gives one total width, which will be the width of
each table cell containing alignment groups. Call the maximum number
of alignment groups in one cell <var>n</var>; each such cell
is divided into 2<var>n</var> horizontally adjacent sections, called
L(<var>i</var>) and R(<var>i</var>) for <var>i</var> from 1 to
<var>n</var>, using the 2<var>n</var> maximum side-widths computed
above; for each <var>i</var>, the width of all sections called
L(<var>i</var>) is the maximum width of any cell's <var>i</var>th
alignment group to the left of its alignment point, and the width of
all sections called R(<var>i</var>) is the maximum width of any
cell's <var>i</var>th alignment group to the right of its alignment
point.</p>

<p>Each alignment group is then shifted horizontally as a block
to <phrase>a</phrase> unique position that places: in the section called L(<var>i</var>) that part
of the <var>i</var>th group to the left of its alignment point;
in the section called R(<var>i</var>) that part of the <var>i</var>th group
to the right of its alignment point. This results in the
alignment point of each <var>i</var>th group being on the boundary
between adjacent sections L(<var>i</var>) and R(<var>i</var>), so
that all alignment points of <var>i</var>th groups have the same
horizontal position.</p>

<p>The widths of the table cells that contain no alignment groups
were computed as part of the initial rendering, and may be different
for each cell, and different from the single width used for cells
containing alignment groups. The maximum of all the cell widths (for
both kinds of cells) gives the width of the table column as a
whole.</p>

<p>The position of each cell in the column is determined by the
applicable part of the value of the <att>columnalign</att> attribute
of the innermost surrounding <el>mtable</el>,
<el>mtr</el>, or <el>mtd</el> element that
has an explicit value for it, as described in the sections on those
elements. This may mean that the cells containing alignment groups
will be shifted within their column, in addition to their alignment
groups having been shifted within the cells as described above, but
since each such cell has the same width, it will be shifted the same
amount within the column, thus maintaining the vertical alignment of
the alignment points of the corresponding alignment groups in each
cell.</p>
</div4>
</div3>


</div2>

<div2 id="presm_elementary"><head>Elementary Math</head>

<p>Mathematics used in the lower grades such as two-dimensional addition, multiplication,
and long division tends to be tabular in nature. 
However, the specific notations used varies among countries
much more than for higher level math.
Furthermore, elementary math often presents examples in some intermediate state
and MathML must be able to capture these intermediate or intentionally missing
partial forms. Indeed, these constructs represent memory aids or
procedural guides, as much as they represent &#x2018;mathematics&#x2019;.</p>
<p>
The elements used for basic alignments in elementary math are:
<glist>
<gitem>
<label><el>mstack</el></label>
<def><p>align rows of digits and operators</p></def>
</gitem>

<gitem>
<label><el>msgroup</el></label>
<def><p>groups rows with similar alignment</p></def>
</gitem>

<gitem>
<label><el>msrow</el></label>
<def><p>groups digits and operators into a row</p></def>
</gitem>

<gitem>
<label><el>msline</el></label>
<def><p>draws lines between rows of the stack</p></def>
</gitem>

<gitem>
<label><el>mscarries</el></label>
<def><p>annotates the following row with optional borrows/carries and/or crossouts</p></def>
</gitem>

<gitem>
<label><el>mscarry</el></label>
<def><p>a borrow/carry and/or crossout for a single digit</p></def>
</gitem>

<gitem>
<label><el>mlongdiv</el></label>
<def><p>specifies a divisor and a quotient for long division, along with a stack of the intermediate computations</p></def>
</gitem>
</glist>

<el>mstack</el> and <el>mlongdiv</el> are the parent elements for all elementary
math layout.
Any children of <el>mstack</el>, <el>mlongdiv</el>, and <el>msgroup</el>,
besides <el>msrow</el>, <el>msgroup</el>, <el>mscarries</el> and <el>msline</el>,
are treated as if implicitly surrounded by an <el>msrow</el>
(See <specref ref="presm_msrow"/> for more details about rows).
</p>

<p>Since the primary use of these stacking constructs is to 
stack rows of numbers aligned on their digits,
and since numbers are always formatted left-to-right,
the columns of an mstack are always processed left-to-right;
the overall directionality in effect (ie. the <att>dir</att> attribute)
does not affect to the ordering of display of columns or carries in rows
and, in particular, does not affect the ordering of any operators within a row
(See <specref ref="presm_bidi"/>).
</p>

<p>
These elements are described in this section followed by examples of their use.
In addition to two-dimensional addition, subtraction, multiplication, and long division,
these elements can be used to represent several notations used for repeating decimals.</p>

<p>A very simple example of two-dimensional addition is shown below:</p>

<graphic role="display" source="image/em-plus.png" alt="\begin{array}{r}
  424 \\
  +33 \\
  \hline
\end{array}"/>
<p>The MathML for this is:</p>

<eg role="mathml"><![CDATA[
<mstack>
  <mn>424</mn>
  <msrow> <mo>+</mo> <mn>33</mn> </msrow>
  <msline/>
</mstack>
]]></eg>

<p> Many more examples are given in <specref ref="presm_elemmath_examples"/>.</p>

<div3 id="presm_mstack">
<head>Stacks of Characters <el role="defn starttag">mstack</el></head>
<div4><head>Description</head>

<p><el>mstack</el> is used to lay out rows of numbers that are aligned on each digit.
This is common in many elementary math notations such as 2D addition, subtraction, and multiplication.</p>

<p>The children of an <el>mstack</el> represent rows, or groups of them,
to be stacked each below the previous row; there can be any number of rows.
An <el>msrow</el> represents a row;
an <el>msgroup</el> groups a set of rows together
so that their horizontal alignment can be adjusted together;
an <el>mscarries</el> represents a set of carries to be
applied to the following row;
an <el>msline</el> represents a line separating rows.
Any other element is treated as if implicitly surrounded by <el>msrow</el>.
</p>
<p>Each row contains &#x2018;digits&#x2019; that are placed into columns.
(see <specref ref="presm_msrow"/> for further details).
The <att>stackalign</att> attribute together with
the <att>position</att> and <att>shift</att> attributes of <el>msgroup</el>,
<el>mscarries</el>, and <el>msrow</el> determine
to which column a character belongs.</p>

<p>The width of a column is the maximum of the widths of each &#x2018;digit&#x2019; in that
column &#x2014; carries do <emph>not</emph> participate in the
width calculation; they are treated as having zero width.
If an element is too wide to fit into a column, it overflows into the adjacent
column(s) as determined by the <att>charalign</att> attribute.
If there is no character in a column, its width is taken to be the width of a 0 
in the current language (in many fonts, all digits have the same width).
</p>
<p>The method for laying out an mstack is:
<olist>
<item><p>The &#x2018;digits&#x2019; in a row are determined.</p></item>
<item><p>All of the digits in a row are initially aligned according to the <att>stackalign</att> value.</p></item>
<item><p>Each row is positioned relative to that alignment based on the <att>position</att> attribute (if any)
that controls that row.</p></item>
<item><p>The maximum width of the digits in a column are determined and
shorter and wider entries in that column are aligned according to
 the <att>charalign</att> attribute.</p></item>
<item><p>The width and height of the mstack element are computed based on the
 rows and columns.
Any overflow from a column is <emph>not</emph> used as part of that computation.
</p></item>
<item><p>The baseline of the mstack element is determined by the <att>align</att> attribute.</p></item>
</olist>
</p>


<issue role="closed" id="centering-overflows-mcolumn">
<head>mcolumn overflow</head>
<p>Should an entry too large or
too small for a column be centered?</p>
</issue>

<issue role="closed" id="mphantom-mcolumn">
<head>mstack mphantom</head>
<p>Should an <el>mphantom</el> also act as a
wrapper for computing digits? If so, people might be encouraged to use
it to play alignment games that make the result not very accessible.</p>
</issue>
</div4>

<div4><head>Attributes</head>

<p><el>mstack</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">align</td>
<td>("top" | "bottom" | "center" | "baseline" | "axis"), <emph>rownumber</emph>?</td>
<td>baseline</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the vertical alignment of the <el>mstack</el> with respect to its environment.
The legal values and their meanings are the same as that for <el>mtable</el>'s
<intref ref="presm_mtable_attrs"><att>align</att></intref> attribute.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">stackalign</td>
<td>"left" | "center" | "right" | "decimalpoint"</td>
<td>decimalpoint</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies which column is used to horizontally align the rows.
For <attval>left</attval>, rows are aligned flush on the left;
similarly for <attval>right</attval>, rows are flush on the right;
for <attval>center</attval>, the middle column (or to the right of the middle, for an even number of columns)
is used for alignment.
Rows with non-zero <att>position</att>, or affected by a <att>shift</att>,
are treated as if the
requisite number of empty columns were added on the appropriate side;
see <specref ref="presm_msgroup"/> and <specref ref="presm_msrow"/>.
For <attval>decimalpoint</attval>, the column used is the left-most column in each
row that contains the decimalpoint character specified
using the <att>decimalpoint</att> attribute of <el>mstyle</el> (default ".").
If there is no decimalpoint character in the row, an implied decimal is assumed on the right of the first number in the row;
See <intref ref="presm_mstyle"><attval>decimalpoint</attval></intref> for a discussion
of <attval>decimalpoint</attval>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">charalign</td>
<td>"left" | "center" | "right" </td>
<td>right</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal alignment of digits within a column.
If the content is larger than the column width, then it overflows the opposite side from the alignment.
For example, for <attval>right</attval>, the content will overflow on the left side; for center,
it overflows on both sides.
This excess does not participate in the column width calculation, nor does it participate
in the overall width of the <el>mstack</el>.
In these cases, authors should take care to avoid collisions between column overflows.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">charspacing</td>
<td><intref ref="type_length"><emph>length</emph></intref> | "loose" | "medium" | "tight"</td>
<td>medium</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the amount of space to put between each column.
Larger spacing might be useful if carries are not placed above or are particularly wide.
The keywords
<attval>loose</attval>, <attval>medium</attval>, and <attval>tight</attval>
automatically adjust spacing to when carries or other entries in a column are wide.
The three values allow authors to some flexibility in choosing what the layout looks like
without having to figure out what values works well.
In all cases, the spacing between columns is a fixed amount and does not vary between different columns.
</td>
</tr>
</tbody>
</table>

<issue role="closed" id="decimalseparator">
<head>decimalsperator discussion</head>
<p>Need to add a discussion of decimalseparator to mstyle.</p></issue> 

<issue role="closed" id="mcolumn-multidigit-alignment">
<head>mcolumn multidigit alignment</head>
<p>If there is more than one
number in a row, which number should be used to determine the
alignment if decimal point alignment is specified?</p></issue> 

</div4>
</div3>

<div3 id="presm_mlongdiv">
<head>Long Division <el role="defn starttag">mlongdiv</el></head>
<div4><head>Description</head>

<p>Long division notation varies quite a bit around the world,
although the heart of the notation is often similar.
<el>mlongdiv</el> is similar to <el>mstack</el> and used to layout long division.
The first two children of <el>mlongdiv</el> are the divisor and the result of the division, in that order.
The remaining children are treated as if they were children of <el>mstack</el>.
The placement of these and the lines and separators used to display long division are controlled
by the <att>longdivstyle</att> attribute. </p>

<p>The result or divisor may be an elementary math element or may be <el>none</el>.
In particular, if <el>msgroup</el> is used,
the elements in that group may or may not form their own mstack or be part of the dividend's <el>mstack</el>,
depending upon the value of the <att>longdivstyle</att> attribute.
For example, in the US style for division,
the result is treated as part of the dividend's <el>mstack</el>, but divisor is not.
MathML does not specify when the result and divisor form their own <el>mstack</el>,
nor does it specify what should happen if <el>msline</el> or other elementary math elements
are used for the result or divisor and they do not participate in the dividend's <el>mstack</el> layout.</p>

<p>In the remainder of this section on elementary math, anything that is said about <el>mstack</el> applies
to <el>mlongdiv</el> unless stated otherwise.</p>
</div4>

<div4 id="presm_mlongdiv_attrs"><head>Attributes</head>

<p><el>mlongdiv</el> elements accept all of the attributes that <el>mstack</el> elements
accept (including those specified in <specref ref="presm_presatt"/>), along with the attribute listed below.</p>

<p>The values allowed for <att>longdivstyle</att> are open-ended.
Conforming renderers may ignore any value they do not handle,
although renderers are encouraged to render as many of the values listed below as possible.
Any rules drawn as part of division layout should be drawn using the color specified by
<att>mathcolor</att>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
	<tr>
	   <td rowspan="2" role="attname">longdivstyle</td>
	   <td> "lefttop" | "stackedrightright" | "mediumstackedrightright" | "shortstackedrightright" |
                "righttop" | "left/\right" | "left)(right" | ":right=right" | "stackedleftleft" | 
                "stackedleftlinetop" </td>
	   <td>lefttop</td>
	   <td><coreref type="no"/></td>
	</tr>
	<tr>
	   <td colspan="3" role="attdesc">
		  Controls the style of the long division layout.  The names are meant as a rough mnemonic that describes the position of the divisor and result in relation to the dividend. 		  
	   </td>
	</tr>
</tbody>
</table>
<p>See <specref ref="presm_mlongdiv_ex"/> for examples of how these notations are drawn.  The values listed above are used for long division notations in different countries around the world:</p>
<glist>
<gitem>
<label><attval>lefttop</attval></label>
<def><p>a notation that is commonly used in the United States, Great Britain, and elsewhere</p></def>
</gitem>
<gitem>
<label><attval>stackedrightright</attval></label>
<def><p>a notation that is commonly used in France and elsewhere</p></def>
</gitem>
<gitem>
<label><attval>mediumrightright</attval></label>
<def><p>a notation that is commonly used in Russia and elsewhere</p></def>
</gitem>
<gitem>
<label><attval>shortstackedrightright</attval></label>
<def><p>a notation that is commonly used in Brazil and elsewhere</p></def>
</gitem>
<gitem>
<label><attval>righttop</attval></label>
<def><p>a notation that is commonly used in China, Sweden, and elsewhere</p></def>
</gitem>
<gitem>
<label><attval>left/\right</attval></label>
<def><p>a notation that is commonly used in Netherlands</p></def>
</gitem>
<gitem>
<label><attval>left)(right</attval></label>
<def><p>a notation that is commonly used in India</p></def>
</gitem>
<gitem>
<label><attval diff="chg">:right=right</attval></label>
<def><p>a notation that is commonly used in Germany</p></def>
</gitem>
<gitem>
<label><attval diff="chg">stackedleftleft</attval></label>
<def><p>a notation that is commonly used in Arabic countries</p></def>
</gitem>
<gitem>
<label><attval>stackedleftlinetop</attval></label>
<def><p>a notation that is commonly used in Arabic countries</p></def>
</gitem>
</glist>
</div4>
</div3>

<div3 id="presm_msgroup">
<head>Group Rows with Similiar Positions <el role="defn starttag">msgroup</el></head>
<div4><head>Description</head>

<p><el>msgroup</el> is used to group rows inside of the <el>mstack</el> and <el>mlongdiv</el> elements
that have a similar position relative to the alignment of stack.
If not explicitly given, the children representing the stack in <el>mstack</el> and <el>mlongdiv</el>
are treated as if they are implicitly surrounded by an <el>msgroup</el> element.
</p>

</div4>

<div4><head>Attributes</head>

<p><el>msgroup</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">position</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal position of the rows within this group relative
the position determined by the containing <el>msgroup</el> (according to its
<att>position</att> and <att>shift</att> attributes).
The resulting position value is relative to the column specified by <att>stackalign</att> of the containing <el>mstack</el> or <el>mlongdiv</el>.
Positive values move each row towards the tens digit,
like multiplying by a power of 10,
effectively padding with empty columns on the right;
negative values move towards the ones digit,
effectively padding on the left.
The decimal point is counted as a column and should be taken into account for negative values.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">shift</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies an incremental shift of position for successive children (rows or groups)
within this group. The value is interpreted as with position, but specifies the
position of each child (except the first) with respect to the previous child in the group.
</td>
</tr>
</tbody>
</table>
</div4>
</div3>


<div3 id="presm_msrow">
<head>Rows in Elementary Math <el role="defn starttag">msrow</el></head>
<div4><head>Description</head>

<p>An <el>msrow</el> represents a row in an <el>mstack</el>.
In most cases it is implied by the context, but is useful
explicitly for putting multiple elements in a single row,
such as when placing an operator "+" or "-" alongside a number
within an addition or subtraction.</p>

<p>If an <el>mn</el> element is a child of <el>msrow</el>
(whether implicit or not), then the number is split into its digits
and the digits are placed into successive columns.
Any other element, with the exception of <el>mstyle</el> is treated effectively
as a single digit occupying the next column.
An <el>mstyle</el> is treated as if its children were 
directly the children of the <el>msrow</el>, but with their style affected
by the attributes of the <el>mstyle</el>.
The empty element <el>none</el> may be used to create an empty column.
</p>

<p>Note that a row is considered primarily as if it were a number,
which are always displayed left-to-right,
and so the directionality used to display the columns is always left-to-right;
textual bidirectionality within token elements (other than <el>mn</el>) still applies,
as does the overall directionality <emph>within</emph> any children of the <el>msrow</el>
(which end up treated as single digits);
see <specref ref="presm_bidi"/>.
</p>

</div4>

<div4><head>Attributes</head>

<p><el>msrow</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">position</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal position of the rows within this group relative
the position determined by the containing <el>msgroup</el> (according to its
<att>position</att> and <att>shift</att> attributes).
The resulting position value is relative to the column specified by <att>stackalign</att> of the containing <el>mstack</el> or <el>mlongdiv</el>.
Positive values move each row towards the tens digit,
like multiplying by a power of 10,
effectively padding with empty columns on the right;
negative values move towards the ones digit,
effectively padding on the left.
The decimal point is counted as a column and should be taken into account for negative values.
</td>
</tr>
</tbody>
</table>
</div4>
</div3>


<div3 id="presm_mscarries">
<head>Carries, Borrows, and Crossouts <el role="defn starttag">mscarries</el></head>
<div4><head>Description</head>

<p>The <el>mscarries</el> element is used for various annotations such as carries, borrows, and crossouts that occur in elementary math.
The children are associated with elements in the <emph>following</emph> row of the <el>mstack</el>.
It is an error for <el>mscarries</el> to be the last element of an <el>mstack</el> or <el>mlongdiv</el> element. Each child of the <el>mscarries</el> applies to the same column in the following row.
As these annotations are used to adorn what are treated as
numbers, the attachment of carries to columns proceeds from left-to-right;
The overall directionality does not apply to the ordering of the carries,
although it may apply to the contents of each carry;
see <specref ref="presm_bidi"/>.
</p>

<p>
Each child of <el>mscarries</el> other than <el>mscarry</el> or <el>none</el> is
treated as if implicitly surrounded by <el>mscarry</el>;
the element <el>none</el> is used when no carry for a particular column is needed.
The <el>mscarries</el> element sets <att>displaystyle</att> to <attval>false</attval>, and increments <att>scriptlevel</att> by 1, so the children are 
typically displayed in a smaller font. (See <specref ref="presm_scriptlevel"/>.)
It also changes the default value of <att>scriptsizemultiplier</att>.
The effect is that the inherited value of
<att>scriptsizemultiplier</att> should still override the default value,
but the default value, inside <el>mscarries</el>, should be <attval>0.6</attval>.
<att>scriptsizemultiplier</att> can be set on the <el>mscarries</el> element,
and the value should override the inherited value as usual.
</p>
<p>
If two rows of carries are adjacent to each other,
the first row of carries annotates the second (following) row as if the second row had
<att>location</att>=<attval>n</attval>.
This means that the second row, even if it does not draw,
visually uses some (undefined by this specification) amount of space when displayed.
</p>

</div4>

<div4><head>Attributes</head>

<p><el>mscarries</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">position</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal position of the rows within this group relative
the position determined by the containing <el>msgroup</el> (according to its
<att>position</att> and <att>shift</att> attributes).
The resulting position value is relative to the column specified by <att>stackalign</att> of the containing <el>mstack</el> or <el>mlongdiv</el>.
The interpretation of the value is the same as <att>position</att> for <el>msgroup</el> or <el>msrow</el>,
but it alters the association of each carry with the column below.
For example, <att>position</att>=1 would cause the rightmost carry to be associated with
the second digit column from the right.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">location</td>
<td>"w" | "nw" | "n" | "ne" | "e" | "se" | "s" | "sw" </td>
<td>n</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the location of the carry or borrow relative to the character below it in the associated column.
Compass directions are used for the values; the default is to place the carry above the character.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">crossout</td>
<td>("none" | "updiagonalstrike" | "downdiagonalstrike" | "verticalstrike" | "horizontalstrike")*  </td>
<td>none</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies how the column content below each carry is "crossed out";
one or more values may be given and all values are drawn.
If <attval>none</attval> is given with other values, it is ignored.
See <specref ref="presm_elemmath_examples"/> for examples of the different values.
The crossout is only applied for columns which have a corresponding
<el>mscarry</el>.
The crossouts should be drawn using the color specified by <att>mathcolor</att>.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">scriptsizemultiplier</td>
<td> <intref ref="type_number"><emph>number</emph></intref></td>
<td><emph>inherited (0.6)</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the factor to change the font size by.
See <specref ref="presm_scriptlevel"/> for a description of how this works with the <att>scriptsize</att> attribute.
</td>
</tr>
</tbody>
</table>
</div4>
</div3>

<div3 id="presm_mscarry">
<head>A Single Carry <el role="defn starttag">mscarry</el></head>
<div4><head>Description</head>

<p><el>mscarry</el> is used inside of <el>mscarries</el> to
represent the carry for an individual column.
A carry is treated as if its width were zero; it does not participate in
the calculation of the width of its corresponding column;
as such, it may extend beyond the column boundaries.
Although it is usually implied, the element may be used explicitly to override the
<att>location</att> and/or <att>crossout</att> attributes of 
the containing <el>mscarries</el>.
It may also be useful with <el>none</el> as its content in order
to display no actual carry, but still enable a <att>crossout</att>
due to the enclosing <el>mscarries</el> to be drawn for the given column.
</p>
</div4>

<div4><head>Attributes</head>

<p>The <el>mscarry</el> element accepts the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>


<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">location</td>
<td>"w" | "nw" | "n" | "ne" | "e" | "se" | "s" | "sw"</td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the location of the carry or borrow relative to the character in the corresponding column in the row below it.
Compass directions are used for the values.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">crossout</td>
<td>("none" | "updiagonalstrike" | "downdiagonalstrike" | "verticalstrike" | "horizontalstrike")*  </td>
<td><emph>inherited</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies how the column content associated with the carry is "crossed out";
one or more values may be given and all values are drawn.
If <attval>none</attval> is given with other values, it is essentially ignored.
The crossout should be drawn using the color specified by <att>mathcolor</att>.
</td>
</tr>
</tbody>
</table>
</div4>
</div3>


<div3 id="presm_msline"> <head>Horizontal Line <el role="defn emptytag">msline</el></head>

<div4><head>Description</head>

<p><el>msline</el> draws a horizontal line inside of a <el>mstack</el> element.
The position, length, and thickness of the line are specified as attributes.
If the length is specified, the line is positioned and drawn as if it were a number with the given number of digits.</p>
</div4>

<div4><head>Attributes</head>

<p><el>msline</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.
The line should be drawn using the color specified by <att>mathcolor</att>.
</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">position</td>
<td><intref ref="type_integer"><emph>integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
specifies the horizontal position of the rows within this group relative
the position determined by the containing <el>msgroup</el> (according to its
<att>position</att> and <att>shift</att> attributes).
The resulting position value is relative to the column specified by <att>stackalign</att> of the containing <el>mstack</el> or <el>mlongdiv</el>.
Positive values moves towards the tens digit (like multiplying by a power of 10);
negative values moves towards the ones digit.
The decimal point is counted as a column and should be taken into account for negative values.
Note that since the default line length spans the entire <el>mstack</el>,
the position has no effect unless the <att>length</att> is specified as non-zero.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">length</td>
<td><intref ref="type_unsigned-integer"><emph>unsigned-integer</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies the the number of columns that should be spanned by the line.
A value of '0' (the default) means that <emph>all</emph> columns in
the row are spanned (in which case <att>position</att> and <att>stackalign</att> have no effect).
</td>
</tr>
<tr>
<td rowspan="2" role="attname">leftoverhang</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies an extra amount that the line should overhang on the left of the leftmost column spanned by the line.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">rightoverhang</td>
<td><intref ref="type_length"><emph>length</emph></intref></td>
<td>0</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies an extra amount that the line should overhang on the right of the rightmost column spanned by the line.
</td>
</tr>
<tr>
<td rowspan="2" role="attname">mslinethickness</td>
<td><intref ref="type_length"><emph>length</emph></intref> | "thin" | "medium" | "thick"</td>
<td>medium</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies how thick the line should be drawn.
The line should have height=0, and depth=mslinethickness so that the top
of the <el>msline</el> is on the baseline of the surrounding context (if any).
(See <specref ref="presm_mfrac"/> for discussion of the thickness keywords
<attval>medium</attval>, <attval>thin</attval> and <attval>thick</attval>.)
</td>
</tr>
</tbody>
</table>
</div4>
</div3>


<div3 id="presm_elemmath_examples"><head>Elementary Math Examples</head>
<div4 id="presm_addsub">
<head>Addition and Subtraction</head>

<p>Two-dimensional addition, subtraction, and multiplication typically
involve numbers, carrries/borrows, lines, and the sign of the
operation.</p>


<p>Notice that the <el>msline</el> spans all of the columns and that <el>none</el> is used to make the "+" appear to the left of all of the operands.</p>
<graphic role="display" source="image/em-plus-shift.png" alt="\begin{array}{@{}r@{}}
   424 \\
  +\phantom0 33 \\
  \hline
\end{array}"/>
<p>The MathML for this is:</p>

<eg role="mathml"><![CDATA[
<mstack>
  <mn>424</mn>
  <msrow> <mo>+</mo> <none/> <mn>33</mn> </msrow>
  <msline/>
</mstack>
]]></eg>


<p>Here is an example with the operator on the right. Placing the
operator on the right is standard in the Netherlands and some other countries.
Notice that although there are a total of four columns in the example,
because the default alignment <phrase>is</phrase> on the implied decimal point to the right of the numbers,
it is not necessary to pad any row.</p>

<graphic role="display" source="image/em-plus-right.png" alt="\begin{array}{l}
  123 \\
  456+ \\
  \hline
  579
\end{array}"/>

<eg role="mathml"><![CDATA[
<mstack>
  <mn>123</mn> 
  <msrow> <mn>456</mn> <mo>+</mo> </msrow>
  <msline/>
  <mn>579</mn>
</mstack>
]]></eg>

<p>Because the default alignment is placed to the right of number, the
numbers align properly and none of the rows need to be shifted.</p>

<p>The following two examples illustrate the use of <el>mscarries</el>,
<el>mscarry</el> and using <el>none</el> to fill in a column.
The examples illustrate two different ways of displaying a borrow.</p>

<table>
<tbody>
<tr>
<td><graphic role="display" source="image/em-sub-borrow-above.png" /></td>
<td><graphic role="display" source="image/em-sub-borrow-aboveleft.png" /></td>
</tr>
</tbody>
</table>

<p>The MathML for the first example is:</p>
<eg role="mathml"><![CDATA[
<mstack>
  <mscarries crossout='updiagonalstrike'>
    <mn>2</mn>  <mn>12</mn>  <mscarry crossout='none'> <none/> </mscarry>
  </mscarries>
  <mn>2,327</mn>
  <msrow> <mo>-</mo> <mn> 1,156</mn> </msrow>
  <msline/>
  <mn>1,171</mn>
</mstack>
]]></eg>

<p>The MathML for the second example uses <el>mscarry</el> because a crossout should only happen on a single column:</p>
<eg role="mathml"><![CDATA[
<mstack>
  <mscarries location='nw'>
    <none/>
    <mscarry crossout='updiagonalstrike' location='n'> <mn>2</mn> </mscarry>
    <mn>1</mn>
    <none/>
  </mscarries>
  <mn>2,327</mn>
  <msrow> <mo>-</mo> <mn> 1,156</mn> </msrow>
  <msline/>
  <mn>1,171</mn>
</mstack>
]]></eg>

<p>Here is an example of subtraction where there is a borrow with
multiple digits in a single column and a cross out. The borrowed
amount is underlined (the example is from a <loc href="http://www.fritext.se/matte/grunder/posi2.html">Swedish
source</loc>):</p>


<graphic role="display" source="image/em-sub-borrow-swedish.png" alt="\begin{array}{r}
\underbar{\scriptsize 10}\!\\
5\llap{$/$}2\\
{}-{}7\\
\hline
45
\end{array}"/>


<p>There are two things to notice.
The first is that <el>menclose</el> is used in the carry and that <el>none</el> is used for
the empty element so that <el>mscarry</el> can be used to create a crossout.</p>

<eg role="mathml"><![CDATA[
<mstack>
  <mscarries>
    <mscarry crossout='updiagonalstrike'><none/></mscarry>
    <menclose notation='bottom'> <mn>10</mn> </menclose>
  </mscarries>
  <mn>52</mn>
  <msrow> <mo>-</mo> <mn> 7</mn> </msrow>
  <msline/>
  <mn>45</mn>
</mstack>
]]></eg>

</div4>
<div4 id="presm_mult">
<head>Multiplication</head>

<p>Below is a simple multiplication example that illustrates the use of <el>msgroup</el> and
the <att>shift</att> attribute. The first <el>msgroup</el> does nothing.
The second <el>msgroup</el> could also be removed, but <el>msrow</el> would be needed for its second and third children.
They would set the <att>position</att> or <att>shift</att> attributes, or would add <el>none</el> elements.
</p>

<graphic role="display" source="image/em-mult-simple.png" />

<eg role="mathml"><![CDATA[
<mstack>
  <msgroup>
    <mn>123</mn>
    <msrow><mo>&#xD7;</mo><mn>321</mn></msrow>
  </msgroup>
  <msline/>
  <msgroup shift="1">
    <mn>123</mn>
    <mn>246</mn>
    <mn>369</mn>
  </msgroup>
  <msline/>
</mstack>
]]></eg>

<p>This example has multiple rows of carries. It also (somewhat
artificially) includes commas (",") as digit separators. The encoding includes
these separators in the spacing attribute value, along non-ASCII
values. </p>


<graphic role="display" source="image/em-mult-carries.png" alt="\begin{array}{r}
 {}_1 {\hspace{0.05em}}_1\phantom{0} \\
 {}_1 {\hspace{0.05em}}_1\phantom{0} \\
  1,234 \\
  \times 4,321 \\
  \hline
 {}_1 \phantom{,} {\hspace{0.05em \,}}_1 {\hspace{0.05em}}_1 
{\hspace{0.05em}}_1 \phantom{,} {\hspace{0.05em \,}}_1 \phantom{00} \\
  1,234 \\
  24,68\phantom{0} \\
  370,2\phantom{00} \\
  4,936\phantom{,000} \\
  \hline
  5,332,114
\end{array}"/>

<eg role="mathml"><![CDATA[
<mstack>
  <mscarries><mn>1</mn><mn>1</mn><none/></mscarries>
  <mscarries><mn>1</mn><mn>1</mn><none/></mscarries>
  <mn>1,234</mn>
  <msrow><mo>&#xD7;</mo><mn>4,321</mn></msrow>
  <msline/>

  <mscarries position='2'>
    <mn>1</mn>
    <none/>
    <mn>1</mn>
    <mn>1</mn>
    <mn>1</mn>
    <none/>
    <mn>1</mn>
  </mscarries>
  <msgroup shift="1">
    <mn>1,234</mn>
    <mn>24,68</mn>
    <mn>370,2</mn>
    <msrow position="1"> <mn>4,936</mn> </msrow>
  </msgroup>
  <msline/>
  
  <mn>5,332,114</mn>
</mstack>
]]></eg>

</div4>



<div4 id="presm_mlongdiv_ex">

<head>Long Division</head>
<p>
The notation used for long division varies considerably among
countries.  Most notations share the common characteristics of
aligning intermediate results and drawing lines for the operands to be
subtracted. Minus signs are sometimes shown for the intermediate calculations, and sometimes they are not. The line that is drawn varies in length depending upon the notation. 
The most apparent difference among the notations is that the position of the divisor varies, as does the location of the quotient, remainder, and intermediate terms.
</p>
<p>
The layout used is controlled by the <att>longdivstyle</att> attribute.  Below are examples for the values listed in <specref ref="presm_mlongdiv_attrs"/>
</p>
<table>
<thead>
<tr>
<td><attval>lefttop</attval></td>
<td><attval>stackedrightright</attval></td>
<td><attval>mediumstackedrightright</attval></td>
<td><attval>shortstackedrightright</attval></td>
<td><attval>righttop</attval></td>
</tr>
</thead>
<tbody>
  <tr>
    <td>
		<graphic role="display" source="image/em-longdiv-us.png"/>
    </td>
    <td>
		<graphic role="display" source="image/em-longdiv-french.png"/>
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-medium-stacked-rightright.png" />
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-short-stacked-rightright.png" />
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-righttop.png" />
    </td>
  </tr>
</tbody>
</table>

<table>
<thead>
<tr>
<td><attval>left/\right</attval></td>
<td><attval>left)(right</attval></td>
<td><attval>:right=right</attval></td>
<td><attval>stackedleftleft</attval></td>
<td><attval>stackedleftlinetop</attval></td>
</tr>
</thead>
<tbody>
  <tr>
    <td>
		<graphic role="display" source="image/em-longdiv-leftright.png"/>
    </td>
    <td>
		<graphic role="display" source="image/em-longdiv-indian.png"/>
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-colonrightright.png" />
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-mirrored-french.png" />
    </td>
    <td>
       <graphic role="display" source="image/em-longdiv-arabic-lefttop.png" />
    </td>
  </tr>
</tbody>
</table>

<p>
The MathML for the first example is shown below.  It illustrates the use of nested <att>msgroup</att>s and how the <att>position</att> is calculated in those usages.
</p>
<eg role="mathml"><![CDATA[
<mlongdiv longdivstyle="lefttop">
  <mn> 3 </mn>
  <mn> 435.3</mn>

  <mn> 1306</mn>

  <msgroup position="2" shift="-1">
    <msgroup>
      <mn> 12</mn>
      <msline length="2"/>
    </msgroup>
    <msgroup>
      <mn> 10</mn>
      <mn> 9</mn>
      <msline length="2"/>
    </msgroup>
    <msgroup>
      <mn> 16</mn>
      <mn> 15</mn>
      <msline length="2"/>
      <mn> 1.0</mn>           <!-- aligns on '.', not the right edge ('0') -->
    </msgroup>
    <msgroup position='-1'>   <!-- extra shift to move to the right of the "." -->
       <mn> 9</mn>
      <msline length="3"/>
      <mn> 1</mn>
    </msgroup>
  </msgroup>
</mlongdiv>
]]></eg>
<p>
With the exception of the last example,
the encodings for the other examples are the same except that the values for
<att>longdivstyle</att> differ and that a "," is used instead of a "." for the decimal point.
For the last example, the only difference from the other examples besides a different value for
<att>longdivstyle</att> is that Arabic numerals have been used in place of Latin numerals, 
as shown  below.</p>
<eg role="mathml"><![CDATA[
<mstyle decimalpoint="&#x066B;">
<mlongdiv longdivstyle="stackedleftlinetop">
  <mn> &#x0663; </mn>
  <mn> &#x0664;&#x0663;&#x0665;&#x066B;&#x0663;</mn>

  <mn> &#x0661;&#x0663;&#x0660;&#x0666;</mn>
  <msgroup position="2" shift="-1">
    <msgroup>
      <mn> &#x0661;&#x0662;</mn>
      <msline length="2"/>
    </msgroup>
    <msgroup>
      <mn> &#x0661;&#x0660;</mn>
      <mn> &#x0669;</mn>
      <msline length="2"/>
    </msgroup>
    <msgroup>
      <mn> &#x0661;&#x0666;</mn>
      <mn> &#x0661;&#x0665;</mn>
      <msline length="2"/>
        <mn> &#x0661;&#x066B;&#x0660;</mn>
   </msgroup>
   <msgroup position='-1'>
       <mn> &#x0669;</mn>
      <msline length="3"/>
      <mn> &#x0661;</mn>
    </msgroup>
  </msgroup>
</mlongdiv>
</mstyle>]]></eg>

</div4>
<div4 id="presm_repeatdec">

<head>Repeating decimal</head>
<p>
Decimal numbers that have digits that repeat infinitely such as 1/3
(.3333...) are represented using several notations. One common notation
is to put a horizontal line over the digits that repeat (in Portugal an underline is used).
Another notation involves putting dots over the digits that repeat. These notations are shown below:
</p>


<graphic role="display" source="image/repeat1.png" alt="0.33333 \overline{3}"/> 
<graphic role="display" source="image/repeat2.png" alt="0.\overline{142857}"/> 
<graphic role="display" source="image/repeat3.png" alt="0.\underline{142857}"/> 
<graphic role="display" source="image/repeat4.png" alt="0.\dot{1}4285\dot{7}"/> 


<p>The MathML for these involves using <el>mstack</el>, <el>msrow</el>, and <el>msline</el>
in a straightforward manner.  The MathML for the preceding examples above is given below.</p>

<eg role="mathml"><![CDATA[
<mstack stackalign="right">
  <msline length="1"/>
  <mn> 0.3333 </mn>
</mstack>
]]></eg>

<eg role="mathml"><![CDATA[
<mstack stackalign="right">
  <msline length="6"/>
  <mn> 0.142857 </mn>
</mstack>
]]></eg>

<eg role="mathml"><![CDATA[
<mstack stackalign="right">
  <mn> 0.142857 </mn>
  <msline length="6"/>
</mstack>
]]></eg>

<eg role="mathml"><![CDATA[
<mstack stackalign="right">
  <msrow> <mo>.</mo> <none/><none/><none/><none/> <mo>.</mo> </msrow>
  <mn> 0.142857 </mn>
</mstack>
]]></eg>

</div4>
</div3>
</div2>




<div2 id="presm_enliven"><head>Enlivening Expressions</head>

<div3 id="presm_maction"><head>Bind Action to Sub-Expression
<el role="defn starttag">maction</el></head>

<issue role="closed" id="deprecate_maction">
<head>Deprecate <el>maction</el></head>
<p>There is concensus that <el>maction</el> should be deprecated or restricted
in some way.  There is also consensus that in any event, all attribute
values and their behavior should be fully specified (in contrast to
the present text). Note that <el>maction</el> is currently used for linking, so
the fate of <el>maction</el> is tied to producing a satisfactory substitute.
There is also a dependency on the decision on how to handle foreign
markup within MathML.  MathQTI has a requirement for form elements
that appear in typeset equations, e.g. an input field for an exponent,
which could be satisfied by either <el>maction</el> or XForms.</p>
</issue>

<p>To provide a mechanism for binding actions to expressions, MathML
provides the <el>maction</el> element. This element accepts any
number of sub-expressions as arguments and the type of action that should happen
is controlled by the <att>actiontype</att> attribute.
Only three actions are predefined by MathML, but the list of possible actions is open.
Additional predefined actions may be added in future versions of MathML.</p>

<p>Linking to other elements, either locally within the <el>math</el> element or to some URL,
is not handled by <el>maction</el>.
Instead, it is handled by adding a link directly on a MathML element as specified in
<specref ref="interf_link"/>.</p>



<div4><head>Attributes</head>

<p><el>maction</el> elements accept the attributes listed
below in addition to those specified in <specref ref="presm_presatt"/>.</p>



<p>By default, MathML applications that do not recognize the specified
<att>actiontype</att> should render the selected sub-expression as
defined below. If no selected sub-expression exists, it is a MathML
error; the appropriate rendering in that case is as described in
<specref ref="interf_error"/>.</p>

<table border="1" role="attributes">
<thead>
<tr>
<td>Name</td>
<td>values</td>
<td>default</td>
<td>Core</td>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="2" role="attname">actiontype</td>
<td><intref ref="type_string"><emph>string</emph></intref></td>
<td><emph>required</emph></td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies what should happen for this element.
The values allowed are open-ended. Conforming renderers may ignore any value they do not handle,
although renderers are encouraged to render the values listed below. 
</td>
</tr><tr>
<td rowspan="2" role="attname">selection</td>
<td><intref ref="type_positive-integer"><emph>positive-integer</emph></intref></td>
<td>1</td>
<td><coreref type="no"/></td>
</tr>
<tr>
<td colspan="3" role="attdesc">
Specifies which child should be used for viewing. Its value should be between 1 and the number of
children of the element. The specified child is referred to as the <quote>selected sub-expression</quote> of the
<el>maction</el> element. If the value specified is out of range, it is an error. When the
<att>selection</att> attribute is not specified (including for
action types for which it makes no sense), its default value is 1, so
the selected sub-expression will be the first sub-expression.
</td>
</tr>
</tbody>
</table>

<!-- 
<p>Note that the <att>selection</att> attribute of an
<el>maction</el> element affects not only the rendering of
the element itself, but potentially the rendering of elements
containing it; this can be due either to the reference to an
<el>maction</el>'s selected sub-expression in the
definition of embellished operator in <specref ref="presm_mo"/>, or to alignment
elements contained in the selected sub-expression (<specref
ref="presm_malign"/>). This means that a change of the selection
by the viewer may require a re-rendering of the surroundings, not just
their repositioning due to a change in size of the
<el>maction</el> element itself.</p>
-->

<p>If a MathML application responds to a user command to copy a MathML sub-expression to
the environment's <quote>clipboard</quote> (see <specref ref="world-int-transfers"/>), any <el>maction</el> elements present in what is copied should
be given <att>selection</att> values that correspond to their selection
state in the MathML rendering at the time of the copy command.</p>

<p>When a MathML application receives a mouse event that may be
processed by two or more nested maction elements, the innermost
maction element of each action type should respond to the event.</p>

<p>The meanings of the various <att>actiontype</att> values is given below.
Note that not all renderers support all of the <att>actiontype</att> values, and  that the allowed values are open-ended.</p>

<glist>
<gitem>
<label>&lt;maction actiontype="toggle" selection="positive-integer" &gt; (first expression) (second expression)... &lt;/maction&gt;</label>
<def><p>The renderer alternately display the
selected subexpression, cycling through them when there is a click on the selected subexpression.
Each click increments the <att>selection</att> value,
wrapping back to 1 when it reaches the last child.
Typical uses would be for exercises in education, ellipses in long
computer algebra output, or to illustrate alternate notations. Note
that the expressions may be of significantly different size, so that
size negotiation with the browser may be desirable. If size
negotiation is not available, scrolling, elision, panning, or some
other method may be necessary to allow full viewing.</p></def>
</gitem>

<gitem><label>&lt;maction actiontype="statusline"&gt; (expression) (message) &lt;/maction&gt;</label>
<def><p>The renderer displays the first child.
When a reader clicks on the expression or
moves the pointer over it, the renderer sends a rendering of the
message to the browser statusline. Because most browsers in the
foreseeable future are likely to be limited to displaying text on their
statusline, the second child should be an 
<el>mtext</el> element in most circumstances. 
For non-<el>mtext</el> messages, renderers might provide a
natural language translation of the markup, but this is not
required.</p></def>
</gitem>

<gitem><label>&lt;maction actiontype="tooltip"&gt; (expression) (message) &lt;/maction&gt;</label>
<def><p>The renderer displays the first child.
When the pointer pauses over the expression for a long
enough delay time, the renderer displays a rendering of the message in
a pop-up <quote>tooltip</quote> box near the expression. Many systems may limit
the popup to be text, so the second child should be an 
<el>mtext</el> element in most circumstances.
For non-<el>mtext</el> messages,
renderers may provide a natural language translation of the markup if
full MathML rendering is not practical, but this is not
required.</p></def>
</gitem>
<gitem><label>&lt;maction actiontype="input"&gt; (expression) &lt;/maction&gt;</label>
<def><p>The renderer displays the expression.
For renderers that allow editing, when focus is passed to this element,
the <el>maction</el> is replaced by what is entered, pasted, etc.
MathML does not restrict what is allowed as input, nor does it require an editor to allow arbitrary input.
Some renderers/editors may restrict the input to simple (linear) text.</p></def>
</gitem>
</glist>

<p>The <att>actiontype</att> values are open-ended. If another value is given and it requires additional attributes, the attributes must be in a different namespace
<phrase> in XML;
in HTML the attributes must begin with "data-"</phrase>.
<phrase>An XML example</phrase> is shown below:
</p>
<glist>
<gitem>
<label>&lt;maction actiontype="highlight" my:color="red" my:background="yellow"&gt; expression &lt;/maction&gt;</label>
<def><p>In the example,
non-standard attributes from another namespace are being used to pass
additional information to renderers that support them,
without violating the MathML Schema (see <specref ref="interf_unspecified"/>).
The <att namespace="my">my:color</att> attributes
might change the color of the characters in the presentation, while the
<att namespace="my">my:background</att> attribute might change the color of the background
behind the characters.</p></def>
</gitem>



</glist>

</div4>
</div3>
</div2>

<div2 id="presm_semantics"><head>Semantics and Presentation</head>

<p>MathML uses the <el>semantics</el> element to allow specifying semantic annotations to
presentation MathML elements; these can be content MathML or other notations.  As such,
<el>semantics</el> should be considered part of both presentation MathML and content
MathML. All MathML processors should process the <el>semantics</el> element, even if they
only process one of those subsets.</p>
 
<p>In semantic annotations a presentation MathML expression is typically the first child
of the <el>semantics</el> element.  However, it can also be given inside of an
<el>annotation-xml</el> element inside the <el>semantics</el> element. If it is part of an
<el>annotation-xml</el> element, then
<phrase><att>encoding</att>=<attval>application/mathml-presentation+xml</attval> or </phrase>
<att>encoding</att>=<attval>MathML-Presentation</attval> <phrase>may</phrase> be used and presentation
MathML processors should use this value for the presentation.</p>
 
<p>See <specref ref="mixing_semantic_annotations"/> for more details about the
<el>semantics</el> and <el>annotation-xml</el> elements.</p>
</div2>
</div1>

<!-- LocalWords:  WG mrow DifferentialD ExponentialE ImaginaryI InvisibleTimes -->
<!-- LocalWords:  InvisiblePlus ApplyFunction InvisibleComma mprescripts msqrt -->
<!-- LocalWords:  mstyle merror menclose mpadded mphantom mtd mfrac mroot msub -->
<!-- LocalWords:  mfenced msup msubsup munder underscript overscript munderover -->
<!-- LocalWords:  mmultiscripts presubscript presuperscript mtable mtr mstack -->
<!-- LocalWords:  mlabeledtr mlongdiv msrow msgroup mscarries msline mscarry mn -->
<!-- LocalWords:  maction actiontype LTR RTL dir ltr rtl mtext mglyph Bidi BiDi -->
<!-- LocalWords:  malignmark ALEF GIMEL DALET Displaystyle Scriptlevel largeop -->
<!-- LocalWords:  displaystyle scriptlevel movablelimits scriptsizemultiplier -->
<!-- LocalWords:  scriptminsize unreadably mathsize textstyle scriptstyle surds -->
<!-- LocalWords:  scriptscriptstyle Linebreaks linebreaks mspace linebreak SMP -->
<!-- LocalWords:  linewrapped subexpressions breakpoint indentingstyle nobreak -->
<!-- LocalWords:  badbreak goodbreak overstruck advancewidth overstriking BMP -->
<!-- LocalWords:  mathvariant maligngroup mathcolor mathbackground Fraktur src -->
<!-- LocalWords:  GIF JPEG PNG valign downloadable fontfamily fraktur monospace -->
<!-- LocalWords:  Helvetica Arial Kanji fontweight fontstyle fontsize ci af cn -->
<!-- LocalWords:  subscripted unslanted xFFEF MCMLXIX lspace thickmathspace lim -->
<!-- LocalWords:  rspace maxsize minsize overscripts lineleading linebreakstyle -->
<!-- LocalWords:  infixlinebreakstyle linebreakmultchar xB ie idref -->
<!-- LocalWords:  indentalignfirst indentshiftfirst linewrapping indentalign ic -->
<!-- LocalWords:  indentshift indenttarget indentalignlast indentshiftlast ip -->
<!-- LocalWords:  renderer's embellisher unstretched overlined rowalign rowspan -->
<!-- LocalWords:  columnspan renderable indentingnewline AlignMark firstop arg -->
<!-- LocalWords:  lquote rquote linethickness numalign denomalign overbar sep -->
<!-- LocalWords:  columnalign groupalign voffset decimalpoint namedspaces td th -->
<!-- LocalWords:  veryverythinmathspace verythinmathspace thinmathspace longdiv -->
<!-- LocalWords:  mediummathspace verythickmathspace veryverythickmathspace pre -->
<!-- LocalWords:  mfraction namedspace roundedbox updiagonalstrike madruwb -->
<!-- LocalWords:  downdiagonalstrike verticalstrike horizontalstrike paddings -->
<!-- LocalWords:  underscripts accentunder subscriptshift superscriptshift -->
<!-- LocalWords:  columnwidth rownumber alignmentscope linewrap rowspacing -->
<!-- LocalWords:  columnspacing rowlines columnlines framespacing equalrows -->
<!-- LocalWords:  equalcolumns leftoverlap rightoverlap minlabelspacing mcolumn -->
<!-- LocalWords:  columnalignment malignscope stackalign charalign charspacing -->
<!-- LocalWords:  decimalsperator decimalseparator multidigit longdivstyle -->
<!-- LocalWords:  lefttop stackedrightright mediumstackedrightright righttop -->
<!-- LocalWords:  shortstackedrightright stackedleftleft stackedleftlinetop nw  -->
<!-- LocalWords:  Crossouts crossouts ne se sw crossout scriptsize leftoverhang -->
<!-- LocalWords:  rightoverhang mslinethickness carrries MathQTI XForms tooltip -->
<!-- LocalWords:  statusline xml
-->
