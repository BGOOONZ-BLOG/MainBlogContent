{
  "ua": [
    "UC10"
  ],
  "results": {
    "/microdata/microdata-dom-api/001.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "document.getItems must exist": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must return a NodeList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must locate the correct number of items": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must return a live NodeList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "live NodeList must notice when itemscope changes": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "next request must notice when itemscope changes": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must locate the right number of items for each itemtype": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must return a live NodeList when using URLs": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "live NodeList must notice when itemtype changes": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "next request must notice when itemtype changes": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must locate items when parameters are separated by spaces": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must ignore duplicated tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems NodeList must be in source tree order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must not return the same NodeList for different parameters": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must treat no tokens as no parameter": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must not find items with itemtype but not itemscope": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems and itemtype must not resolve URLs": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "document.getItems must not see items that have the itemprop attribute set": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemscope attribute must be reflected by the .itemScope property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemScope property must be boolean": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemScope property must be read/write": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "writing to the itemScope property must toggle existence of the itemscope content attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "writing to the itemScope property must affect whether the element is returned by getItems": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "writing to the itemScope property must affect membership of live NodeLists": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemType attribute must be reflected by the .itemRef property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemType property must be an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemType property must implement DOMTokenList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemType property must always reference the same object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType must be correct for an element that has itemtype tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.length must be 0 for an element that has no tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType must not contain an undefined class": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.item() must return null for out-of-range index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.item() must return null for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType[index] must be undefined for out-of-range index": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType[index] must be undefined for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "empty itemType should stringify to contain the attribute's whitespace": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.add(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.toggle(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains must update when the underlying attribute is changed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains must not match when punctuation characters are added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.add must not remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.contains case sensitivity must match a case-specific string": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.length must correctly reflect the number of tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.item(0) must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.item must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType[0] must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType[index] must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType[index] must still be undefined for out-of-range index when earlier indexes exist": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemtype attribute must update correctly when items have been added through itemType": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType must stringify correctly when items have been added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.add must not make any changes if an existing token is added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove must not make any changes if a non-existing token is removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove must remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove must remove duplicated tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove must collapse whitespace around removed tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.remove must remove all useless whitespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.remove must collapse multiple whitespace around removed tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.remove must remove duplicates when removing tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.remove must collapse whitespace when removing multiple tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.add must remove unused whitespace when the token already exists": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.toggle must toggle tokens case-sensitively when adding": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.toggle must be able to remove tokens case-sensitively": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemtype attribute must be empty when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType must stringify to an empty string when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.item(0) must return null when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType[0] must be undefined when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.add should treat \" \" as a space": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.add should normalize \\t as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.add should normalize \\r as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.add should normalize \\n as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.add should normalize \\f as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemType.toggle must work after removing the itemtype attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType.length must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemType must be read-only": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the itemprop attribute must be reflected by the .itemProp property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemProp property must be an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemProp property must implement DOMTokenList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemProp property must always reference the same object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp must be correct for an element that has itemprop tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.length must be 0 for an element that has no tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp must not contain an undefined class": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.item() must return null for out-of-range index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.item() must return null for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp[index] must be undefined for out-of-range index": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp[index] must be undefined for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "empty itemProp should stringify to contain the attribute's whitespace": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.contains(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.add(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.toggle(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        ".contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.contains must update when the underlying attribute is changed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.contains must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.contains must not match when punctuation characters are added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.add must not remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.contains case sensitivity must match a case-specific string": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.length must correctly reflect the number of tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.item(0) must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.item must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp[0] must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp[index] must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp[index] must still be undefined for out-of-range index when earlier indexes exist": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemprop attribute must update correctly when items have been added through itemProp": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp must stringify correctly when items have been added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.add must not make any changes if an existing token is added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove must not make any changes if a non-existing token is removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove must remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove must remove duplicated tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove must collapse whitespace around removed tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.remove must remove all useless whitespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.remove must remove useless whitespace when removing multiple tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.add must remove useless whitespace and duplicates when the token already exists": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.toggle must toggle tokens case-sensitively when adding": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.toggle must be able to remove tokens case-sensitively": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemprop attribute must be empty when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp must stringify to an empty string when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.item(0) must return null when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp[0] must be undefined when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.add should treat \" \" as a space": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.add should normalize \\t as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.add should normalize \\r as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.add should normalize \\n as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.add should normalize \\f as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemProp.toggle must work after removing the itemprop attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp.length must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemProp must be read-only": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the itemid attribute must be reflected by the .itemId property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemId property must be read/write": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "writing to the itemId property must create the itemid content attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemId property must see the resolved itemid URL": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemId property must see the resolved itemId property URL on setting": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemid attribute must see the resolved itemId URL": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemref attribute must be reflected by the .itemRef property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemRef property must be an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemRef property must implement DOMTokenList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the itemRef property must always reference the same object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef must be correct for an element that has itemref tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.length must be 0 for an element that has no tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef must not contain an undefined class": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.item() must return null for out-of-range index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.item() must return null for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef[index] must be undefined for out-of-range index": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef[index] must be undefined for negative index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "empty itemRef should stringify to contain the attribute's whitespace": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.add(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.toggle(empty_string) must throw a SYNTAX_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains must update when the underlying attribute is changed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains must not match when punctuation characters are added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.add must not remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.contains case sensitivity must match a case-specific string": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.length must correctly reflect the number of tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.item(0) must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.item must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef[0] must return the first token": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef[index] must return case-sensitive strings and preserve token order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef[index] must still be undefined for out-of-range index when earlier indexes exist": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref attribute must update correctly when items have been added through itemRef": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef must stringify correctly when items have been added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.add must not make any changes if an existing token is added": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove must not make any changes if a non-existing token is removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove must remove existing tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove must remove duplicated tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove must collapse whitespace around removed tokens": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.remove must remove useless whitespace when removing tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.remove must remove useless whitespace when removing tokens (2)": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.remove must collapse whitespace when removing multiple tokens": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.add must remove whitespace and duplicate when the token already exists": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.toggle must toggle tokens case-sensitively when adding": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.toggle must be able to remove tokens case-sensitively": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemref attribute must be empty when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef must stringify to an empty string when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.item(0) must return null when all classes have been removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef[0] must be undefined when all classes have been removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.add should treat \" \" as a space": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.add should normalize \\t as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.add should normalize \\r as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.add should normalize \\n as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.add should normalize \\f as a space": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemRef.toggle must work after removing the itemref attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef.length must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemRef must be read-only": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemValue must be null if the element does not have an itemprop attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "writing to itemValue must throw an INVALID_ACCESS_ERR error if the element does not have an itemprop attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must return the element if the element has an itemscope attribute": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the content attribute on meta elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on audio elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on embed elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on iframe elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on img elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on source elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on track elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemValue must reflect the src attribute on video elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on anchor elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on area elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on link elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the src attribute on object elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the dateTime attribute of time elements with no datetime attribute": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemValue must reflect the datetime attribute of time elements with a datetime attribute": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemValue must reflect the textContent of other elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the textContent of unknown elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must reflect the textContent of unknown elements with known attributes": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemValue must not reflect the value of input elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "dynamic changes of itemscope should change the value exposed through itemValue": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "dynamic changes of itemprop should change the value exposed through itemValue": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the properties property must be an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the properties property must implement HTMLPropertiesCollection and HTMLCollection": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the properties property must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the properties property must always reference the same object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the properties collection must be empty if the element does not have an itemscope property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the properties collection must not support legacycaller": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the properties collection must become populated if the element is given an itemscope property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the properties collection must become empty if the element's itemscope property is removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.length must be the total number of properties": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item must give each property in tree order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item must have the right property names on it when enumerated": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item must give null for out of range index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties[index] must give each property in tree order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties[index] must give undefined for out of range index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item and length must ignore properties of nested items": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item and length must see items added with itemref when attached to the document's DOM": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item and length must see items added with itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref must reference the first element with a given ID": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref must ignore duplicated IDs": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref must ignore non-existent IDs": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref in a dislocated tree must not reference elements from another dislocated tree": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemref in a dislocated tree must not reference elements from the main document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref in the main document must not reference elements from a dislocated tree": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item and length must update when adding property elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item must update when re-ordering property elements, but length must not": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item and length must update when changing itemProp of children": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when changing id of referenced sibling": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when changing duplicated id of referenced sibling": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when changing itemref to point to an element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when changing children of elements referenced through itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when appending elements with itemref to different parents": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties.item and length must update when changing itemscope of children": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the namedItem must return an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        ".properties[] must also act as .properties.namedItem() when there are matching properties": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the namedItem must return an object even if there are no matching properties": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        ".properties[] must return undefined when no property exists with the given name": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "namedItem must return the same object for the same property name": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "namedItem must return a different object for a different property name": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "namedItem must return a different object for different elements with the same property name": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "namedItem() and properties[] must return the same object for the same property name": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the properties property must implement PropertyNodeList and NodeList": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the namedItem property must be read/write": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PropertyNodeList must contain the correct properties": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PropertyNodeList must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "namedItem must not match property names containing whitespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "namedItem must match property names containing other special characters": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PropertyNodeList must be live": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must ignore properties of nested items": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must see items added with itemref when attached to the document's DOM": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PropertyNodeList must see items added with itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when adding itemscope on the root": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when adding property elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when re-ordering property elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing itemProp of children": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing id of referenced sibling": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing duplicated id of referenced sibling": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing itemref to point to an element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing children of elements referenced through itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when appending elements with itemref to different parents": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "PropertyNodeList must update when changing itemscope of children": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "getValues must return an array": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "getValues must always return a newly constructed array": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "getValues array must contain the same item values as itemValue would return for the given properties": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "getValues array must not be live": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the names property must be an object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names property must implement DOMStringList": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names property must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names property must always reference the same object": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.item() must return null for out of range indexes": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names[index] must return undefined for out of range indexes": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "the names collection must be empty if the element does not have an itemscope property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names collection must become populated if the element is given an itemscope property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names collection must become empty if the element's itemscope property is removed": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names.item and names.contains methods should be overwriteable": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names.customProperty should be writeable": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.length must be read-only": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.length must be the total number of property names": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.item must give each property name in tree order": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must be case sensitive": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.contains must return boolean if the name exists": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.item must cast to number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names.contains must cast to string": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "the names collection must be live": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must reflect property names containing special characters": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must ignore properties of nested items": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must see items added with itemref when attached to the document's DOM": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must see items added with itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when adding itemscope on the root": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must update when adding property elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "names must update when re-ordering property elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing itemProp of children": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing id of referenced sibling when appended to document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing duplicated id of referenced sibling": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing itemref to point to an element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing children of elements referenced through itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when appending elements with itemref to different parents": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "names must update when changing itemscope of children": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "collections must survive the parent's removal from the document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "collections must survive the item's removal from the document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemprop names must not override builtin properties": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.item(integerString) should cast to a number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties[integerString] should act as a numeric index": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "properties.namedItem(integer) should cast to a string": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "properties[someObject] should cast toString before using whichever casting applies": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "simple nested itemscope": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "simple nested itemscope with itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "simple sibling itemref": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref pointing to itself": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref pointing to itself with child": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "nested itemref pointing to itself with child": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "mutually referencing siblings": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "mutually referencing siblings with item parent": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref referencing parent item": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref referencing parent without itemscope": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "itemref referencing element with same id": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "itemref pointing to child of nested itemscope": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    }
  }
}