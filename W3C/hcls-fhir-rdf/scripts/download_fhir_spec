#!/usr/bin/env python

# -*- coding: utf-8 -*-
# Copyright (c) 2015, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
from datetime import datetime
import os
import re
import shutil
import requests
import sys
import json
from typing import List, Tuple
from zipfile import ZipFile

if __name__ == "__main__":
    sys.path.append(os.path.join(os.path.join(os.getcwd(), os.path.dirname(__file__)), '..'))

from hcls_fhir_rdf.defaults import *

PROFILE_SUFFIX = ".profile.json"
VALUESET_PATTERN = re.compile(r'((/valueset-)|(^valueset-)).*\.json$')
DEFAULT_LOG_FILE = os.path.basename(__file__) + ".log"


def file_name_match(n: str) -> bool:
    return n.endswith(PROFILE_SUFFIX) or (VALUESET_PATTERN.search(n) and not '.canonical.' in n)

def download_spec(opts: argparse.Namespace) -> Tuple[bool, bool]:
    """ Download and unzip the FHIR specification (if necessary)
    :param opts: Parser options
    :return: success indicator, new download occurred
    """
    if opts.skipdownload:
        download_needed = False
        logging.info("Download step skipped")
    else:
        download_needed = opts.force or opts.clear
        target_file_modtime = None
        try:
            target_file_modtime = datetime.fromtimestamp(os.path.getmtime(opts.file))
        except FileNotFoundError:
            log_info(opts.file, "File does not currently exist")
            download_needed = True

        if not download_needed:
            try:
                r = requests.head(opts.url)
            except requests.ConnectionError as e:
                print(str(e))
                return False, False
            if r.status_code == 200:
                file_date = datetime.strptime(r.headers['Last-Modified'], '%a, %d %b %Y %H:%M:%S GMT')
                download_needed = file_date > target_file_modtime
                if download_needed:
                    log_info(opts.file, " %s is newer than %s: downloading newer copy" % (opts.url, opts.file))
            else:
                log_error(opts.file, "Error: %d on %s" % (r.status_code, opts.url))
                return False, False

    if download_needed:
        log_info(" Downloading %s:" % opts.url, opts.file)
        try:
            r = requests.get(opts.url, stream=True)
        except requests.ConnectionError as e:
            print(str(e))
            return False, False
        if r.status_code == 200:
            with open(opts.file, 'wb') as tf:
                for chunk in r.iter_content(DOWNLOAD_CHUNK_SIZE):
                    tf.write(chunk)
            return True, True
        else:
            logging.error(" Error: %d downloading %s" % (r.status_code, opts.url), extra={"fname": opts.file})
            return False, False
    else:
        logging.info("Zip file is current, not re-downloaded", extra={"fname": opts.file})

    opts.zipfile_timestamp = datetime.fromtimestamp(os.path.getmtime(opts.file)).isoformat()

    if opts.striptext:
        logging.info("Stripping text from *.%s files" % PROFILE_SUFFIX, extra={"fname": opts.file})
        for root, dirs, files in os.walk(opts.dir):
            [strip_text(os.path.join(root, f)) for f in files if file_name_match(f)]

    write_metadata(opts, opts.file)

    return True, False


def write_metadata(opts: argparse.Namespace, zipfilename: str) -> None:
    """ Write a metadata file along with the zip file so we know what happened
    :param opts: Input options
    :param zipfilename: location of the zip file
    """
    opts.date = datetime.now().isoformat()
    metadata_filename = zipfilename.replace('.zip', '.META')
    open(metadata_filename, 'w').write(json.dumps(opts.__dict__, indent='    '))


def strip_text(fname: str) -> None:
    f_as_json = json.load(open(fname))
    if 'text' in f_as_json:
        del f_as_json['text']
        open(fname, 'w').write(json.dumps(f_as_json, indent='    '))


def do_unzip(opts: argparse.Namespace) -> bool:
    """ Unzip the target file
    :param opts: input options
    :return: success indicator
    """
    log_info("Unzipping into %s" % opts.dir, opts.file)
    zf = ZipFile(opts.file)
    file_names = [n for n in zf.namelist() if file_name_match(n)]
    if not file_names:
        log_warning("No '%s' files found!" % PROFILE_SUFFIX, opts.file)
    zf.extractall(opts.dir, members=file_names)
    if opts.exampledir:
        log_info("Unzipping examples into %s" % opts.exampledir, opts.file)
        file_names = [n for n in zf.namelist() if n.endswith("-example.xml")]
        if not file_names:
            log_warning("No '-example.xml' files found!", opts.file)
        zf.extractall(opts.exampledir, members=file_names)
    return True


def parse_args(args: Optional[List[str]]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Download and unzip the FHIR spec")
    parser.add_argument("-u", "--url",
                        help="Base URL of the (default: %s)" % DEFAULT_SPEC_URL,
                        default=DEFAULT_SPEC_URL)
    parser.add_argument("-f", "--file", help="Download zip file name (default: %s)" % DEFAULT_TARGET_FILE,
                        default=DEFAULT_TARGET_FILE)
    parser.add_argument("-d", "--dir", help="target download directory (default: %s)" % DEFAULT_TARGET_DIRECTORY,
                        default=DEFAULT_TARGET_DIRECTORY)
    parser.add_argument("-e", "--exampledir", help="Example directory (default: %s)" % DEFAULT_EXAMPLE_DIRECTORY,
                        default=DEFAULT_EXAMPLE_DIRECTORY)
    parser.add_argument("--force", help="Force FHIR specification download ",
                        action="store_true")
    parser.add_argument("--clear", help="Clear output and examples directory before unzipping", action="store_true")
    parser.add_argument("--unzip", help="Force unzip", action="store_true")
    parser.add_argument("--skipdownload", help="Don't attempt to download zip file", action="store_true")
    parser.add_argument("--striptext", help="Remove the text section of profile definitions", action="store_true")
    add_default_args(parser, __file__)
    opts = parser.parse_args(args if args is not None else sys.argv[1:])

    return fill_defaults(opts)


def remove_folder(path):
    if os.path.exists(path):
        shutil.rmtree(path)


def main():
    opts = parse_args(None)
    if opts.clear:
        if input("Will remove %s and %s, ok? " % (opts.dir, opts.exampledir)).lower() in ("y", "yes", "ok"):
            logging.info("Removing %s" % opts.exampledir)
            remove_folder(opts.exampledir)
            logging.info("Removing %s" % opts.dir)
            remove_folder(opts.dir)
        else:
            sys.exit(1)

    logging.info("Creating %s" % opts.dir)
    os.makedirs(opts.dir, exist_ok=not opts.clear)
    logging.info("Creating %s" % opts.exampledir)
    os.makedirs(opts.exampledir, exist_ok=not opts.clear)

    start_logger(opts)
    log_info("Downloading %s " % opts.url, opts.file)
    log_info("Examples in: %s" % opts.exampledir, opts.file)

    success, new_download = download_spec(opts)
    if success and (new_download or opts.unzip):
        success = do_unzip(opts)
    log_info("Done" if success else "Failed", opts.file)
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
