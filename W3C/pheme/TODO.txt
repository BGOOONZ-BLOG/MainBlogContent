
TODO:
    - switch to a ZMQ architecture
    - split services into smaller pieces that all talk together


General:
    ✓ nodemon script (as part of package.json)

Event Server:
    ✓ time-based polling
        ✓ sources can request polling interval
        ✓ last polls are maintained for each source so that it knows what to do on start
    ✓ ensure data dir is available
    ✓ logging
    ✓ configuration loading
        ✓ needs to support sources too (e.g. all RSS sources)
    ✓ hook endpoint
        ✓ sources can provide handlers
        ✓ they are called in turn, the first to reply wins

Query Server:
    - technically the same as the event server
    - needs very simple filters (event type, source) and a "since" query
    - needs to be able to support auth and filter on access level
    - socket.io interface (percolations in Elastic?)
    - needs to install itself with the server

User Management:
    - we have to know users
    - store configuration for them
    - we can't have ACL
        - make a request against the W3C for login
        - try Team, Member
        - save Team or Member locally
        - don't save credentials
        - store the information we get in the session and give a cookie

Store:
    - needs several, at least one for file and one for whatever we use in production (Elastic?)
    - need some common fields for all events, plus a payload
        - store time (added by the store itself)
        - event time
        - event ID (which needs to be reliably calculated from the data so the event server can tell
          if it already has a given event and drop it, typically for RSS)
        - event type (rss, gh-issue, gh-commit)
        - event source (repo address, site)
        - ACL (public|member|team)

Configuration API:
    - eventually there will need to be a configuration API so that people with access can configure
      things like RSS sources and the such from the UI
    - needs to support auth
