{
  "ua": [
    "UC10"
  ],
  "results": {
    "/geolocation-API/PositionOptions.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Call getCurrentPosition with wrong type for enableHighAccuracy. No exception expected.": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Call watchPosition with wrong type for enableHighAccuracy. No exception expected.": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PositionOptions tests": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Set timeout and maximumAge to 0, check that timeout error raised (getCurrentPosition)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Set timeout and maximumAge to 0, check that timeout error raised (watchPosition)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Check that a negative timeout value is equivalent to a 0 timeout value (getCurrentLocation)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Check that a negative timeout value is equivalent to a 0 timeout value (watchPosition)": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/geolocation-API/clearWatch_TypeError.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test that calling clearWatch with invalid watch IDs does not cause an exception": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/geolocation-API/getCurrentPosition_IDL.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "getCurrentPosition success callback tests": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "getCurrentPosition error callback tests": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PositionError toString": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "PERMISSION_DENIED value is 1": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "POSITION_UNAVAILABLE is 2": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "TIMEOUT value is 3": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Position toString": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Position.coordinates toString": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Position.timestamp is type number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "speed is null or number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "speed readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "heading is null or number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "heading readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "altitudeAccuracy is null or number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "altitudeAccuracy readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "accuracy is type number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "accuracy readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "altitude is null or number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "altitude readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "longitude is type number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "longitude readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "latitude is type number": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "latitude readonly": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/geolocation-API/getCurrentPosition_TypeError.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Call getCurrentPosition without arguments, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call getCurrentPosition with null success callback, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call getCurrentPosition with null success and error callbacks, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call getCurrentPosition() with wrong type for first argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call getCurrentPosition() with wrong type for second argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call getCurrentPosition() with wrong type for third argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/geolocation-API/getCurrentPosition_permission_allow.html": {
      "byUA": {
        "UC10": "TIMEOUT"
      },
      "totals": {
        "TIMEOUT": 1
      },
      "subtests": {
        "User allows access, check that success callback is called or error callback is called with correct code.": {
          "byUA": {
            "UC10": "TIMEOUT"
          },
          "totals": {
            "TIMEOUT": 1
          }
        },
        "Check that getCurrentPosition returns synchronously before any callbacks are invoked.": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/geolocation-API/getCurrentPosition_permission_deny.html": {
      "byUA": {
        "UC10": "TIMEOUT"
      },
      "totals": {
        "TIMEOUT": 1
      },
      "subtests": {
        "User denies access, check that error callback is called with correct code": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/geolocation-API/interfaces.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Navigator interface: attribute geolocation": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Navigator must be primary interface of navigator": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Stringification of navigator": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Navigator interface: navigator must inherit property \"geolocation\" with the proper type (0)": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Stringification of navigator.geolocation": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Geolocation interface: navigator.geolocation must inherit property \"getCurrentPosition\" with the proper type (0)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Geolocation interface: calling getCurrentPosition(PositionCallback,PositionErrorCallback,PositionOptions) on navigator.geolocation with too few arguments must throw TypeError": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Geolocation interface: navigator.geolocation must inherit property \"watchPosition\" with the proper type (1)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Geolocation interface: calling watchPosition(PositionCallback,PositionErrorCallback,PositionOptions) on navigator.geolocation with too few arguments must throw TypeError": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Geolocation interface: navigator.geolocation must inherit property \"clearWatch\" with the proper type (2)": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Geolocation interface: calling clearWatch(long) on navigator.geolocation with too few arguments must throw TypeError": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/geolocation-API/watchPosition_TypeError.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Call watchPosition without arguments, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call watchPosition with null success callback, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call watchPosition with null success and error callbacks, check that exception is thrown": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call watchPosition() with wrong type for first argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call watchPosition() with wrong type for second argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Call watchPosition() with wrong type for third argument. Exception expected.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/geolocation-API/watchPosition_permission_deny.html": {
      "byUA": {
        "UC10": "TIMEOUT"
      },
      "totals": {
        "TIMEOUT": 1
      },
      "subtests": {
        "Check that watchPosition returns synchronously before any callbacks are invoked.": {
          "byUA": {
            "UC10": "TIMEOUT"
          },
          "totals": {
            "TIMEOUT": 1
          }
        },
        "Check that watchPosition returns a long": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    }
  }
}