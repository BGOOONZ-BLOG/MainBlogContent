<h1>UI Events KeyboardEvent code Values</h1>

<pre class="metadata">
Shortname: uievents-code
Level:
Group: webapps
Status: WD
TR: http://www.w3.org/TR/uievents-code/
ED: https://w3c.github.io/uievents-code/
Repository: w3c/uievents-code
Previous Version:
	http://www.w3.org/TR/2015/WD-uievents-code-20151215/
Editor: Gary Kacmarcik, Google, garykac@google.com
Editor: Travis Leithead, Microsoft, travil@microsoft.com
Abstract:
	This specification defines the values for the KeyboardEvent.code attribute,
	which is defined as part of the UI Events Specification [[!UIEvents]].
	The code value contains information about the key event that can be used to
	identify the physical key being pressed by the user.
</pre>

<pre class="biblio">
{
	"ISO9995-1": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51645",
		"title": "ISO/IEC 9995-1:2009 Information technology -- Keyboard layouts for text and office systems -- Part 1: General principles governing keyboard layouts",
		"publisher": "ISO"
	},
	"ISO9995-8": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51641",
		"title": "ISO/IEC 9995-8:2009 Information technology -- Keyboard layouts for text and office systems -- Part 8: Allocation of letters to the keys of a numeric keypad",
		"publisher": "ISO"
	},
	"USB-HID": {
		"href": "http://www.usb.org/developers/hidpage/Hut1_12v2.pdf",
		"title": "USB HID Usage Tables 1.12",
		"publisher": "USB Implementers' Forum"
	}
}
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/uievents/#interface-; type: interface; spec: uievents;
	text: KeyboardEvent
urlPrefix: http://www.w3.org/TR/uievents/#dom-keyboardevent-; type: attribute; for: KeyboardEvent; spec: uievents;
	text: key
	text: code
	text: location
url: http://www.w3.org/TR/uievents/#key-legends; type: dfn; spec: uievents-key;
	text: key cap
url: http://www.w3.org/TR/uievents-key/#key-value-tables; type: dfn; spec: uievents-key;
	text: key attribute value
</pre>

<pre class="include">
path: stylesheet-extra.include
</pre>

<h2 id="introduction">Introduction</h2>

	This document provides an overview of the various keyboard layouts and
	specifies the {{KeyboardEvent/code}} values that should be
	used for each of the keys. Unlike the {{KeyboardEvent/key}} values described
	in [[UIEvents-key]], the {{KeyboardEvent/code}} values are based only on the
	key's physical location on the keyboard and do not vary based on the user's
	current locale.

	This specification was formerly titled <em>DOM Level 3 KeyboardEvent
	{{KeyboardEvent/code}} Values</em>.

	<h3 id="style-conventions">Stylistic Conventions</h3>

		This specification uses the following conventions:

		* The <em>[=key cap=]</em></a> or label printed on a key is shown as
			KEYCAP{&darr;}, KEYCAP{=} or KEYCAP{Q}. This is used to refer to a
			key from the user's perspective without regard for the
			{{KeyboardEvent/key}} and {{KeyboardEvent/code}} values in the
			generated {{KeyboardEvent}}.

		* Glyphs representing character are shown as: GLYPH{&#x239C2;}.

		* Unicode character encodings are shown as: UNI{U+003d}.

		* Valid [=key attribute values=] (i.e., the value of
			a {{KeyboardEvent/key}} attribute) are shown as:
			KEY{ArrowDown}, KEY_NOLINK{=}, KEY_NOLINK{q} or KEY_NOLINK{Q}.

		* Valid [=key code attribute values=] (i.e., the
			value of a {{KeyboardEvent/code}} attribute) are shown as:
			CODE{ArrowDown}, CODE{Equal} or CODE{KeyQ}.

<h2 id="keyboard-layout">Keyboard Layout</h2>

	<em>This section is non-normative.</em>

	Alphanumeric keyboards are the most common way for users to generate
	keyboard events. This section provides an overview of standard keyboards and
	their physical layouts.

	<h3 id="keyboard-common-layouts">Standard Keyboard Layouts</h3>

		This section describes the physical layouts found on commonly available
		keyboards.

		<h4 id="keyboard-sections">Keyboard Sections</h4>

			When discussing keyboard layouts, it is convenient to divide the
			standard keyboard into distinct sections and to label each row.

			<figure id="figure-keyboard-sections">
				<img src="images/keyboard-sections.svg" width="684" height="225"
					alt="The five general sections of a standard keyboard" />
				<figcaption>The five general sections of a standard keyboard</figcaption>
			</figure>

			These keyboard sections are:

			*	The [=alphanumeric section=] is the main part of the
				keyboard and is where most of the keyboard variation occurs.
				When a user selects a keyboard layout, it is the keys in this
				sections that are most affected.
			*	The [=control pad=] and [=arrow pad=]
				sections contain the arrow keys and other editing keys.
			*	The [=numpad=] (also known as the "numeric [=keypad=]"
				or "number pad") contains number and math keys to make it easier
				to enter numeric data.
			*	And finally, the [=function section=] contains
				miscellaneous [=function keys=] and special keys like KEYCAP{Escape}.

			To make it easier to identify keys, the rows on the keyboard are
			named starting with "A" for the bottom row up to "E" for the top
			row. The row of keys in the [=function section=] are considered to be in
			row "K". These row names are consistent with those given in
			[[ISO9995-1]].

			Note that many keyboards (both modern and legacy) have extra keys
			that do not fit neatly into the above sections. Some of these keys
			are covered in [[#key-media]].

		<h4 id="keyboard-101">Standard "101" Keyboard Layout</h4>

			The standard "101" keyboard (commonly referred to as the "US
			layout") is the only layout that has a CODE{Backslash} key (labeled
			KEYCAP{\|}) above a single-row KEYCAP{Enter} key. All the other
			layouts omit this key and expand the KEYCAP{Enter} key to
			occupy two-rows.

			<figure id="figure-keyboard-101-us">
				<img src="images/keyboard-101-us.svg" width="684" height="225" alt="Standard '101' keyboard layout" />
				<figcaption>Standard "101" keyboard layout showing unmodified US key values</figcaption>
			</figure>

			Modern standard "101"-layout keyboards actually contain 104 keys: 61
			keys in the [=alphanumeric section=] and 43 keys in the
			[=numpad=], [=control pad=], [=arrow pad=] and [=function sections=].
			The "101" name for this keyboard layout dates to the
			time when this standard keyboard did in fact contain 101 keys. The
			two KEYCAP{Meta} keys (commonly given an OS-specific label), and the
			KEYCAP{Menu} key were added later to bring the total to 104 keys.

		<h4 id="keyboard-101alt">Alternate "101" Keyboard Layout</h4>

			The alternate "101" keyboard has a large KEYCAP{Enter} key and
			shrinks the KEYCAP{Backspace} key to make room for the CODE{IntlYen}
			key (which replaces the CODE{Backslash} key found in the standard
			101 layout). The CODE{IntlYen} name comes from the Japanese layout
			where this is the KEYCAP{¥} (PHONETIC{yen}) key — in the Russian
			layout shown below this key maps to a KEYCAP{\/}.

			<figure id="figure-keyboard-101-russian">
				<img src="images/keyboard-101-russian.svg" width="684" height="225" alt="Alternate '101' keyboard layout" />
				<figcaption>Alternate "101" keyboard layout showing unmodified Russian key values</figcaption>
			</figure>

			Modern alternate "101"-layout keyboards contain 104 keys: 61 keys in
			the [=alphanumeric section=] and 43 keys in the [=numpad=],
			[=control pad=], [=arrow pad=] and [=function sections=].

		<h4 id="keyboard-102">Standard "102" Keyboard Layout</h4>

			The standard "102" keyboard is common throughout Europe and adds a
			key that doesn't exist on the "101" layouts: The CODE{IntlBackslash}
			key (labelled KEYCAP{\|} on a UK keyboard) next to the left shift
			key.

			A second key is also added (labelled KEYCAP{#~} on a UK
			keyboard) which is partially tucked under the KEYCAP{Enter} key.
			This key is encoded as CODE{Backslash}, using the same code as the
			KEYCAP{\|} key found on the "101" keyboard layout.
			According to [[USB-HID]], the US KEYCAP{\|} and UK KEYCAP{#~} are
			actually two separate keys (named "Keyboard \ and |" and "Keyboard
			Non-US # and ~"), but since these two keys never co-occur on the
			same keyboard most platforms use the same scancode for both keys,
			making them difficult to distinguish. It is for this reason that the
			code CODE{Backslash} is used for both of these keys.

			<figure id="figure-keyboard-102-uk">
				<img src="images/keyboard-102-uk.svg" width="684" height="225" alt="Standard '102' keyboard layout" />
				<figcaption>Standard "102" keyboard layout showing unmodified UK key values</figcaption>
			</figure>

			Modern "102"-layout keyboards contain 105 keys: 62 keys in the
			[=alphanumeric section=] and 43 keys in the [=numpad=],
			[=control pad=], [=arrow pad=] and [=function sections=].

		<h4 id="keyboard-103">Korean "103" Keyboard Layout</h4>

			The Korean "103" keyboard is based on the alternate 101 layout and
			adds two additional keys (one on each side of the spacebar) to
			handle Korean-specific input modes. These keys are
				CODE{Lang2} ("Hanja", labelled KEYCAP{한자} PHONETIC{hanja})
			and
				CODE{Lang1} ("HangulMode", labelled KEYCAP{한/영} PHONETIC{han/yeong}).

			<figure id="figure-keyboard-103-korean">
				<img src="images/keyboard-103-korean.svg" width="684" height="225" alt="Korean '103' keyboard layout" />
				<figcaption>Korean "103" keyboard layout showing unmodified Korean key values</figcaption>
			</figure>

			Modern "103"-layout keyboards contain 106 keys: 63 keys in the
			[=alphanumeric section=] and 43 keys in the [=numpad=],
			[=control pad=], [=arrow pad=] and [=function sections=].

		<h4 id="keyboard-104">Brazilian "104" Keyboard Layout</h4>

			The "104" layout used in Brazil adds 4 new keys: two keys
			from the "102" layout (CODE{Backslash} and CODE{IntlBackslash}) plus
			the CODE{IntlRo} key (next to the right shift key) and an extra key
			on the [=numpad=]. This new [=numpad=] key is called
			CODE{NumpadComma} because it represents the thousands separator. On
			the Brazilian key layout, this key is labelled KEYCAP{.} and the
			CODE{NumpadDecimal} key is labelled KEYCAP{,}.

			<figure id="figure-keyboard-104-brazilian">
				<img src="images/keyboard-104-brazilian.svg" width="684" height="225" alt="Standard '104' keyboard layout" />
				<figcaption>Standard "104" keyboard layout showing unmodified Brazilian key values</figcaption>
			</figure>

			Modern "104"-layout keyboards contain 107 keys: 63 keys in the
			[=alphanumeric section=] and 44 keys in the [=numpad=],
			[=control pad=], [=arrow pad=] and [=function sections=].
			Some Brazilian keyboards lack the extra [=numpad=] key and have
			only 106 keys.

		<h4 id="keyboard-106">Japanese "106" Keyboard Layout</h4>

			The Japanese "106" keyboard layout adds 3 new keys:
				CODE{IntlYen} (labelled KEYCAP{¥_}),
				CODE{Backslash} (labelled KEYCAP{]む})
			and
				CODE{IntlRo} (labelled KEYCAP{\ろ}).
			It also shrinks the spacebar to make room for 3 input mode keys:
				CODE{NonConvert} (labelled KEYCAP{無変換} PHONETIC{muhenkan}),
				CODE{Convert} (labelled KEYCAP{変換} PHONETIC{henkan})
			and
				CODE{KanaMode} (labelled KEYCAP{カタカナ/ひらがな/ローマ字} PHONETIC{katakana/hiragana/romaji}).

			<figure id="figure-keyboard-106-japanese">
				<img src="images/keyboard-106-japanese.svg" width="684" height="225" alt="Standard '106' keyboard layout" />
				<figcaption>Standard "106" keyboard layout showing unmodified Japanese key values</figcaption>
			</figure>

			Modern "106"-layout keyboards contain 109 keys: 66 keys in the
			[=alphanumeric section=] and 43 keys in the [=numpad=],
			[=control pad=], [=arrow pad=] and [=function sections=].

		<h4 id="keyboard-mac">Apple Keyboard Layout</h4>

			In general, Apple keyboards follow the same layout as PC keyboards,
			but there are some differences as noted in the following figure.

			<figure id="figure-keyboard-mac">
				<img src="images/keyboard-mac.svg" width="684" height="225" alt="Apple extended keyboard layout" />
				<figcaption>Apple extended keyboard layout showing unmodified English key values</figcaption>
			</figure>

			In this figure, the green keys are those that have been moved to a
			new location while the blue keys indicate keys that have been added.

		<h4 id="keyboard-laptops">Laptop Keyboard Layouts</h4>

			The limited space available on laptop keyboards often means that the
			physical key layout needs to be adjusted to fit all the required
			keys. The [=writing system keys=] in the [=alphanumeric
			section=] tend to remain intact, but the other keyboard sections
			are usually combined with other keys or removed altogether.

			<figure id="figure-keyboard-laptop-mac">
				<img src="images/keyboard-laptop-mac.svg" width="420" height="180" alt="Apple laptop keyboard layout" />
				<figcaption>Apple laptop keyboard layout</figcaption>
			</figure>

			In this Apple laptop keyboard, the right control key has been
			removed to make room for half-height arrow keys and a KEYCAP{Fn} key
			is added on the left.

			<figure id="figure-keyboard-laptop">
				<img src="images/keyboard-laptop.svg" width="460" height="180" alt="Sample PC laptop keyboard layout" />
				<figcaption>Sample PC laptop keyboard layout</figcaption>
			</figure>

			PC laptop keyboards vary considerably, but this sample keyboard
			demonstrates some commonly found aspects. The [=control pad=]
			keys are added along the right-hand side with the [=arrow pad=]
			keys tucked in along the bottom. The right KEYCAP{Shift} key is
			often shrunk to make room for the up arrow key and the right
			KEYCAP{Meta} key is typically removed altogether.

		<h4 id="other-locales">Keyboard Layouts For Other Locales</h4>

			Other locales are not explicitly described in this specification because they
			start with one of the existing layouts and adapt it by changing the keycaps
			and the key mappings.

			Because these keyboards do not introduce new physical keys, they do not
			require explicit documentation.

			These keyboards are typically based on the "101" (standard or alternate)
			or "102" layouts.
			For example, the common Arabic, Cyrillic, Greek, Hindi, Khmer and Thai
			keyboards are all based on either the "101" or "102" keyboard layouts.

	<h3 id="keyboard-mobile">Mobile Keypads</h3>

		In the case where a content author wishes to rely on the mechanical
		layout of a mobile keypad, this specification suggests the keyboard
		configuration specified in [[ISO9995-8]], which defines a numeric keypad
		layout and secondary assignment of Unicode characters in the range
		UNI{U+0061} ... UNI{U+007A} (GLYPH{a} - GLYPH{z}) to the number keys
		KEYCAP{2} through KEYCAP{9}, as a common layout appropriate to some
		international uses.

		<p class="note">
		This keypad layout, and in particular the distribution of letters is for
		English devices, and will not match the keypads or configurations of
		many users.	 Content authors cannot rely upon any particular
		configuration, and are expected to create content in an
		internationalized and localizable manner.
		</p>

		<figure id="figure-numeric-keypad">
			<img src="images/mobile-keypad.svg" width="140" height="305" alt="Mobile keypad layout" />
			<figcaption>A graphical depiction of a generic mobile keypad.</figcaption>
		</figure>

	<h3 id="remote-control">Media Remote Controls</h3>

		Many keyboards contain special keys to control media functions.
		Increasingly, many media devices, especially televisions, are
		Web-enabled.  Hybrid keyboard/remote-control devices are becoming more
		common.	 To meet the needs of these hybrid Web/media devices, this
		specification defines keys that are common as remote control buttons, in
		addition to traditional keyboard keys.

		Because of the smaller form factor, keys (or buttons) on a remote
		control will often be modal, with one key performing different functions
		based on the context of the on-screen content. Additionally, many keys
		serve as toggles, to change back and forth between two or more states
		(see toggling keys). These remote control buttons typically do not have
		modifier states so each button is assigned a single function (like
		KEYCAP{Play}, KEYCAP{Pause}, KEYCAP{Up}, KEYCAP{Menu} or KEYCAP{Exit}).

		<figure id="figure-media-remote-control">
			<img src="images/remote-control.svg" width="102" height="422" alt="A sample media remote control" />
			<figcaption>A graphical depiction of a media remote control.</figcaption>
		</figure>

	<h3 id="keyboard-chording-virtual">Virtual Keyboards and Chording Keyboards</h3>

		Virtual keyboards are software-based sets of keys, in a variety of
		different arrangements, commonly found on touch-screen devices. They are
		often modal, with the ability to switch between different dynamic sets
		of keys, such as alphabetic, numeric, or symbolic keys.	 Because of the
		lack of physical constraints, these keyboards MAY present the widest
		range of characters, including emoticons and other symbols. Wherever possible,
		however, virtual keyboards SHOULD produce the normal range of keyboard events
		and values, for ease of authoring and compatibility with existing content.

		Chording keyboards, also known as chorded keysets or chord keyboards, are
		key input devices which produce values by pressing several keys in
		combination or sequence, normally to simulate a full range of characters
		or commands on a reduced set of keys, often for single-handed use.	A
		chording keyboard MAY have additional mode keys to switch between key
		values, and the number and type of keys pressed to produce a key value
		will vary, but the final key values produced by such keyboards SHOULD
		match the range of key values described in this specification.

		For these and other alternative modal keyboards, the
		{{KeyboardEvent/key}} values
			KEY{Alphanumeric},
			KEY{CapsLock},
			KEY{NumLock},
		and
			KEY{SymbolLock}
		are RECOMMENDED for the keys which switch between different modes.

<h2 id="code-value-tables">Keyboard Event {{KeyboardEvent/code}} Value Tables</h2>

	This section defines a list of values which are appropriate for use as
	{{KeyboardEvent/code}} values.

	A <dfn>key code attribute value</dfn> is any of the values given in the
	"<code>KeyboardEvent.code</code>" column of any of the tables in this section of the
	specification.

	Each table in this section has a "Required" column which indicates whether or not the
	value is required for a conforming implementation. Entries where the "Required" column
	is "No" are optional and may be used by implementations to support special keyboards
	(such as multimedia or legacy keyboards).
	
	<p class="note">
	Note: Some values listed in this specification as "Required" may not be available on
	all platforms or devices. For example, Mac keyboards do not have an KEYCAP{Insert} key
	whereas standard PC keyboards do not have a KEYCAP{Help} key.
	</p>

	For every key listed as "Required" in this specification, a conforming implementation
	of the {{KeyboardEvent}} interface MUST return the correct value as long as that key
	is available on that platform.
	
	<p class="note">
	Note: While every attempt has been made to make this list of values as complete as possible,
	new values will periodically need to be defined as new input devices are introduced.
	Rather than allowing user agents to define their own [=key code attribute values=]
	(which are unlikely to be consistent across multiple user agents), bugs SHOULD be
	filed so that this specification can be updated.
	</p>

	<h3 id="key-alphanumeric-section">Alphanumeric Section</h3>

		The <dfn>alphanumeric section</dfn> is the main section of the keyboard. It
		contains keys that fall into two general
		categories: [=writing system keys=] whose meaning
		changes based on the current keyboard layout, and
		[=functional keys=] which are (mostly) the same for all
		layouts.

		<h4 id="key-alphanumeric-writing-system">Writing System Keys</h4>

			The <dfn>writing system keys</dfn> are those that change
			meaning (i.e., they produce different {{KeyboardEvent/key}}
			values) based on the current locale and keyboard layout.

			<figure id="figure-keyboard-codes-alphanum1">
				<img src="images/keyboard-codes-alphanum1.svg" width="653" height="225" alt="The writing system keys" />
				<figcaption>The [=writing system keys=] in the [=alphanumeric section=]</figcaption>
			</figure>

			This figure shows a hypothetical keyboard that combines all the
			[=writing system keys=] (shown in blue and green) found on the
			various keyboards. Blue keys are present on all standard
			keyboards while green keys are only available on some keyboards.

			<div class="example">
				The CODE{Digit2} and CODE{KeyQ} keys are [=writing system keys=] that
				generate KEY_NOLINK{2} and KEY_NOLINK{q} when the US locale is
				active and KEY_NOLINK{é} and KEY_NOLINK{a} when the French locale is active.
			</div>

			The name shown on each key is the {{KeyboardEvent/code}}
			assigned to that key. Wherever possible, the
			{{KeyboardEvent/code}} names are based on the name for the US
			key in that position (i.e., they are based on the US keyboard
			layout). For keys that don't exist on the US keyboard, names
			from the UK or Japanese layouts are used instead.

			Note that there are two CODE{Backslash} keys in this figure: a
			large one at the end of Row D on the 101-key layout, and a
			smaller one between CODE{Quote} and CODE{Enter} on Row C of the
			102-, 104- and 106-key layouts. Only one CODE{Backslash} key
			may be present on a keyboard layout.

			BEGIN_CODE_TABLE alphanumeric-writing-system "List of code values for writing system keys in the Alphanumeric section."
				CODE Backquote		KEYCAP{`~} on a US keyboard. This is the KEYCAP{半角/全角/漢字}
									(PHONETIC{hankaku/zenkaku/kanji}) key on Japanese keyboards
				CODE Backslash		Used for both the US KEYCAP{\|} (on the 101-key layout) and also for the key
									located between the KEYCAP{"} and KEYCAP{Enter} keys on row C of the 102-,
									104- and 106-key layouts.
									Labelled KEYCAP{#~} on a UK (102) keyboard.
				CODE BracketLeft	KEYCAP{[{} on a US keyboard.
				CODE BracketRight	KEYCAP{]&rcub;} on a US keyboard.
				CODE Comma			KEYCAP{,&lt;} on a US keyboard.

				CODE Digit0			KEYCAP{0)} on a US keyboard.
				CODE Digit1			KEYCAP{1!} on a US keyboard.
				CODE Digit2			KEYCAP{2@} on a US keyboard.
				CODE Digit3			KEYCAP{3#} on a US keyboard.
				CODE Digit4			KEYCAP{4$} on a US keyboard.
				CODE Digit5			KEYCAP{5%} on a US keyboard.
				CODE Digit6			KEYCAP{6^} on a US keyboard.
				CODE Digit7			KEYCAP{7&} on a US keyboard.
				CODE Digit8			KEYCAP{8*} on a US keyboard.
				CODE Digit9			KEYCAP{9(} on a US keyboard.

				CODE Equal			KEYCAP{=+} on a US keyboard.
				CODE IntlBackslash	Located between the left KEYCAP{Shift} and KEYCAP{Z} keys.
									Labelled KEYCAP{\|} on a UK keyboard.
				CODE IntlRo			Located between the KEYCAP{/} and right KEYCAP{Shift} keys.
									Labelled KEYCAP{\ろ} (PHONETIC{ro}) on a Japanese keyboard.
				CODE IntlYen		Located between the KEYCAP{=} and KEYCAP{Backspace} keys.
									Labelled KEYCAP{¥} (PHONETIC{yen}) on a Japanese keyboard. KEYCAP{\/} on a
									Russian keyboard.

				CODE KeyA			KEYCAP{a} on a US keyboard.
									Labelled KEYCAP{q} on an AZERTY (e.g., French) keyboard.
				CODE KeyB			KEYCAP{b} on a US keyboard.
				CODE KeyC			KEYCAP{c} on a US keyboard.
				CODE KeyD			KEYCAP{d} on a US keyboard.
				CODE KeyE			KEYCAP{e} on a US keyboard.
				CODE KeyF			KEYCAP{f} on a US keyboard.
				CODE KeyG			KEYCAP{g} on a US keyboard.
				CODE KeyH			KEYCAP{h} on a US keyboard.
				CODE KeyI			KEYCAP{i} on a US keyboard.
				CODE KeyJ			KEYCAP{j} on a US keyboard.
				CODE KeyK			KEYCAP{k} on a US keyboard.
				CODE KeyL			KEYCAP{l} on a US keyboard.
				CODE KeyM			KEYCAP{m} on a US keyboard.
				CODE KeyN			KEYCAP{n} on a US keyboard.
				CODE KeyO			KEYCAP{o} on a US keyboard.
				CODE KeyP			KEYCAP{p} on a US keyboard.
				CODE KeyQ			KEYCAP{q} on a US keyboard.
									Labelled KEYCAP{a} on an AZERTY (e.g., French) keyboard.
				CODE KeyR			KEYCAP{r} on a US keyboard.
				CODE KeyS			KEYCAP{s} on a US keyboard.
				CODE KeyT			KEYCAP{t} on a US keyboard.
				CODE KeyU			KEYCAP{u} on a US keyboard.
				CODE KeyV			KEYCAP{v} on a US keyboard.
				CODE KeyW			KEYCAP{w} on a US keyboard.
									Labelled KEYCAP{z} on an AZERTY (e.g., French) keyboard.
				CODE KeyX			KEYCAP{x} on a US keyboard.
				CODE KeyY			KEYCAP{y} on a US keyboard.
									Labelled KEYCAP{z} on a QWERTZ (e.g., German) keyboard.
				CODE KeyZ			KEYCAP{z} on a US keyboard.
									Labelled KEYCAP{w} on an AZERTY (e.g., French) keyboard, and KEYCAP{y} on a
									QWERTZ (e.g., German) keyboard.

				CODE Minus			KEYCAP{-_} on a US keyboard.
				CODE Period			KEYCAP{.&gt;} on a US keyboard.
				CODE Quote			KEYCAP{'"} on a US keyboard.
				CODE Semicolon		KEYCAP{;:} on a US keyboard.
				CODE Slash			KEYCAP{/?} on a US keyboard.
			END_CODE_TABLE

		<h4 id="key-alphanumeric-functional">Functional Keys</h4>

			The <dfn>functional keys</dfn> (<em>not to be confused with the
			[=function keys=] described later</em>) are those keys in the
			[=alphanumeric section=] that provide general editing
			functions that are common to all locales (like KEYCAP{Shift},
			KEYCAP{Tab}, KEYCAP{Enter} and KEYCAP{Backspace}). With a few
			exceptions, these keys do not change meaning based on the
			current keyboard layout.

			<figure id="figure-keyboard-codes-alphanum2">
				<img src="images/keyboard-codes-alphanum2.svg" width="653" height="225" alt="The standard set of functional keys" />
				<figcaption>The standard set of [=functional keys=] in the [=alphanumeric section=]</figcaption>
			</figure>

			The CODE{AltRight} key (highlighted in green) is the only
			[=functional key=] that does not generate the same
			{{KeyboardEvent/key}} value for every locale. In some locales it
			produces KEY{Alt} while in others it produces KEY{AltGraph}.

			BEGIN_CODE_TABLE alphanumeric-functional-1 "List of code values for functional keys in the Alphanumeric section."
				CODE AltLeft		KEYCAP{Alt}, KEYCAP{Option} or KEYCAP{&#8997;}.
				CODE AltRight		KEYCAP{Alt}, KEYCAP{Option} or KEYCAP{&#8997;}.
									This is labelled KEYCAP{AltGr} key on many keyboard layouts.
				CODE Backspace		KEYCAP{Backspace} or KEYCAP{&#9003;}.
									Labelled KEYCAP{Delete} on Apple keyboards.
				CODE CapsLock		KEYCAP{CapsLock} or KEYCAP{&#8682;}
				CODE ContextMenu	The application context menu key, which is typically found between the right
									KEYCAP{Meta} key and the right KEYCAP{Control} key.
				CODE ControlLeft	KEYCAP{Control} or KEYCAP{&#8963;}
				CODE ControlRight	KEYCAP{Control} or KEYCAP{&#8963;}
				CODE Enter			KEYCAP{Enter} or KEYCAP{&crarr;}. Labelled KEYCAP{Return} on Apple keyboards.
				CODE MetaLeft		The Windows, KEYCAP{&#x2318;}, KEYCAP{Command} or other OS symbol key.
				CODE MetaRight		The Windows, KEYCAP{&#x2318;}, KEYCAP{Command} or other OS symbol key.
				CODE ShiftLeft		KEYCAP{Shift} or KEYCAP{&#8679;}
				CODE ShiftRight		KEYCAP{Shift} or KEYCAP{&#8679;}
				CODE Space			KEYCAP{&nbsp;} (space)
				CODE Tab			KEYCAP{Tab} or KEYCAP{&#8677;}
			END_CODE_TABLE

			On some keyboards (notably Japanese and Korean) the spacebar is
			reduced in size to make room for extra keys on the bottom row (Row A).
			These keys typically allow the users to change the current input
			mode. Note that even though some of these Japanese and Korean
			keys occupy the same physical location on the keyboard, they use
			different {{KeyboardEvent/code}} values.

			<figure id="figure-function-row-a">
				<img src="images/functional-row-a.svg" width="700" height="160" alt="Comparison of the lower row of functional keys" />
				<figcaption>Comparison of the lower row of [=functional keys=] on different keyboards</figcaption>
			</figure>

			BEGIN_CODE_TABLE alphanumeric-functional-2 "List of code values for functional keys found on Japanese and Korean keyboards."
				CODE Convert		Japanese: KEYCAP{変換} (PHONETIC{henkan})
				CODE KanaMode		Japanese: KEYCAP{カタカナ/ひらがな/ローマ字} (PHONETIC{katakana/hiragana/romaji})
				CODE_OPT Lang1		Korean: HangulMode KEYCAP{한/영} (PHONETIC{han/yeong})<br/>Japanese (Mac keyboard):
									KEYCAP{かな} (PHONETIC{kana})
				CODE_OPT Lang2		Korean: Hanja KEYCAP{한자} (PHONETIC{hanja})<br/>Japanese (Mac keyboard):
									KEYCAP{英数} (PHONETIC{eisu})
				CODE_OPT Lang3		Japanese (word-processing keyboard): Katakana
				CODE_OPT Lang4		Japanese (word-processing keyboard): Hiragana
				CODE_OPT Lang5		Japanese (word-processing keyboard): Zenkaku/Hankaku
				CODE NonConvert 	Japanese: KEYCAP{無変換} (PHONETIC{muhenkan})
			END_CODE_TABLE

			On Apple keyboards, some keys on the bottom row are omitted and
			others are arranged in a different order.

	<h3 id="key-controlpad-section">Control Pad Section</h3>

		The <dfn>control pad</dfn> section of the keyboard is the set of (usually 6) keys
		that perform navigating and editing operations, for example, KEYCAP{Home},
		KEYCAP{PageUp} and KEYCAP{Insert}.

		<figure id="figure-control-pad">
			<img src="images/control-pad.svg" width="495" height="135" alt="Standard Control Pad layouts" />
			<figcaption>Standard [=control pad=] layouts</figcaption>
		</figure>

		BEGIN_CODE_TABLE controlpad "List of code values for keys in the ControlPad section."
			CODE Delete		KEYCAP{&#8998;}. The forward delete key.
							Note that on Apple keyboards, the key labelled KEYCAP{Delete} on the main part of
							the keyboard should be encoded as CODE{Backspace}.
			CODE End		KEYCAP{Page Down}, KEYCAP{End} or KEYCAP{&#8600;}
			CODE Help		KEYCAP{Help}. Not present on standard PC keyboards.
			CODE Home		KEYCAP{Home} or KEYCAP{&#8598;}
			CODE Insert		KEYCAP{Insert} or KEYCAP{Ins}. Not present on Apple keyboards.
			CODE PageDown	KEYCAP{Page Down}, KEYCAP{PgDn} or KEYCAP{&#8671;}
			CODE PageUp		KEYCAP{Page Up}, KEYCAP{PgUp} or KEYCAP{&#8670;}
		END_CODE_TABLE

		<p class="note">
		The {{KeyboardEvent/code}} for the KEYCAP{Fn} key (found on some
		Apple keyboards) is defined below in the [=function section=].
		</p>

	<h3 id="key-arrowpad-section">Arrow Pad Section</h3>

		The <dfn>arrow pad</dfn> contains the 4 arrow keys. The keys are commonly
		arranged in an "upside-down T" configuration.


		<figure id="figure-arrow-pad">
			<img src="images/arrow-pad.svg" width="160" height="115" alt="Standard Arrow Pad layout" />
			<figcaption>Standard [=arrow pad=] layout</figcaption>
		</figure>

		BEGIN_CODE_TABLE arrowpad "List of code values for keys in the ArrowPad section."
			CODE ArrowDown	KEYCAP{&darr;}
			CODE ArrowLeft	KEYCAP{&larr;}
			CODE ArrowRight KEYCAP{&rarr;}
			CODE ArrowUp	KEYCAP{&uarr;}
		END_CODE_TABLE

	<h3 id="key-numpad-section">Numpad Section</h3>

		The <dfn>numpad</dfn> section is the set of keys on the keyboard arranged in
		a grid like a calculator or mobile phone. This section contains numeric and
		mathematical operator keys. Often this section will contain a KEYCAP{NumLock}
		key which causes the keys to switch between the standard numeric functions
		and mimicking the keys of the [=control pad=] and [=arrow pad=].
		Laptop computers and compact keyboards will commonly omit these
		keys to save space.

		A <dfn>keypad</dfn> is an alternate term for [=numpad=].

		<figure id="figure-numpad">
			<img src="images/numpad.svg" width="606" height="247" alt="Standard Numpad layouts" />
			<figcaption>Standard [=numpad=] Layouts</figcaption>
		</figure>

		The {{KeyboardEvent/code}} values in this section should also be
		used for phone keypads and remote control devices that
		arrange number keys in a grid.

		<figure id="figure-numpad-mobile">
			<img src="images/numpad-mobile.svg" width="135" height="180" alt="Standard mobile keypad layout" />
			<figcaption>Standard Mobile Keypad Layout</figcaption>
		</figure>

		The standard [=numpad=] is sometimes extended with additional keys for
		parentheses, operators, hexadecimal symbols, or calculator functions
		(like KEYCAP{Backspace}). Some of the commonly added keys are listed
		in the table below.

		BEGIN_CODE_TABLE numpad "List of code values for keys in the Numpad section."
			CODE NumLock				On the Mac, the CODE{NumLock} code should be used for the [=numpad=]
										KEYCAP{Clear} key.
			CODE Numpad0				KEYCAP{0 Ins} on a keyboard<br/>KEYCAP{0} on a phone or remote control
			CODE Numpad1				KEYCAP{1 End} on a keyboard<br/>KEYCAP{1} or KEYCAP{1 QZ} on a phone or
										remote control
			CODE Numpad2				KEYCAP{2 &darr;} on a keyboard<br/>KEYCAP{2 ABC} on a phone or remote control
			CODE Numpad3				KEYCAP{3 PgDn} on a keyboard<br/>KEYCAP{3 DEF} on a phone or remote control
			CODE Numpad4				KEYCAP{4 &larr;} on a keyboard<br/>KEYCAP{4 GHI} on a phone or remote control
			CODE Numpad5				KEYCAP{5} on a keyboard<br/>KEYCAP{5 JKL} on a phone or remote control
			CODE Numpad6				KEYCAP{6 &rarr;} on a keyboard<br/>KEYCAP{6 MNO} on a phone or remote control
			CODE Numpad7				KEYCAP{7 Home} on a keyboard<br/>KEYCAP{7 PQRS} or KEYCAP{7 PRS} on a phone
										or remote control
			CODE Numpad8				KEYCAP{8 &uarr;} on a keyboard<br/>KEYCAP{8 TUV} on a phone or remote control
			CODE Numpad9				KEYCAP{9 PgUp} on a keyboard<br/>KEYCAP{9 WXYZ} or KEYCAP{9 WXY} on a phone
										or remote control
			CODE NumpadAdd				KEYCAP{+}
			CODE_OPT NumpadBackspace	Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadClear		KEYCAP{C} or KEYCAP{AC} (All Clear). Also for use with [=numpads=] that have a
										KEYCAP{Clear} key that is separate from the
										KEYCAP{NumLock} key. On the Mac, the [=numpad=] KEYCAP{Clear} key should always
										be encoded as CODE{NumLock}.
			CODE_OPT NumpadClearEntry	KEYCAP{CE} (Clear Entry)
			CODE_OPT NumpadComma		KEYCAP{,} (thousands separator). For locales where the thousands separator
										is a "." (e.g., Brazil), this key may generate a KEYCAP{.}.
			CODE NumpadDecimal			KEYCAP{. Del}. For locales where the decimal separator is "," (e.g.,
										Brazil), this key may generate a KEYCAP{,}.
			CODE NumpadDivide			KEYCAP{/}
			CODE NumpadEnter
			CODE_OPT NumpadEqual		KEYCAP{=}
			CODE_OPT NumpadHash			KEYCAP{#} on a phone or remote control device. This key is typically found
										below the KEYCAP{9} key and to the right of the KEYCAP{0} key.
			CODE_OPT NumpadMemoryAdd	KEYCAP{M+} Add current entry to the value stored in memory.
			CODE_OPT NumpadMemoryClear	KEYCAP{MC} Clear the value stored in memory.
			CODE_OPT NumpadMemoryRecall	KEYCAP{MR} Replace the current entry with the value stored in memory.
			CODE_OPT NumpadMemoryStore	KEYCAP{MS} Replace the value stored in memory with the current entry.
			CODE_OPT NumpadMemorySubtract	KEYCAP{M-} Subtract current entry from the value stored in memory.
			CODE NumpadMultiply			KEYCAP{*} on a keyboard. For use with [=numpads=] that provide mathematical
										operations (KEYCAP{+}, KEYCAP{-}, KEYCAP{*} and KEYCAP{/}).<br/>Use
										CODE{NumpadStar} for the KEYCAP{*} key on phones and remote controls.
			CODE_OPT NumpadParenLeft	KEYCAP{(} Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadParenRight	KEYCAP{)} Found on the Microsoft Natural Keyboard.
			CODE_OPT NumpadStar			KEYCAP{*} on a phone or remote control device.
										This key is typically found below the KEYCAP{7} key and to the left of
										the KEYCAP{0} key.<br/>Use CODE{NumpadMultiply} for the KEYCAP{*} key on
										numeric keypads.
			CODE NumpadSubtract			KEYCAP{-}
		END_CODE_TABLE

		For [=numpads=] that provide keys not listed here, a
		{{KeyboardEvent/code}} value string should be created by starting
		with "Numpad" and appending an appropriate description of the key.

	<h3 id="key-function-section">Function Section</h3>

		The <dfn>function section</dfn> runs along the top of the keyboard (above
		the [=alphanumeric section=]) and
		contains the [=function keys=] and a few additional special keys
		(for example, KEYCAP{Esc} and KEYCAP{Print Screen}).

		A <dfn>function key</dfn> is any of the keys labelled KEYCAP{F1} ... KEYCAP{F12}
		that an application or operating system can associate with a custom function
		or action.

		On some keyboards (especially those found on laptops or other
		portable computers), the [=function keys=] (KEYCAP{F1} ...
		KEYCAP{F12}) are defined to have other primary functions (like
		controlling display brightness or audio volume) and require that a
		separate KEYCAP{Fn} key be pressed to make them act as function
		keys. Unfortunately, the primary functions assigned to these keys
		varies widely from one manufacturer to the next. Because of this,
		the {{KeyboardEvent/code}} is always set to the [=function key=]
		name.

		BEGIN_CODE_TABLE function "List of code values for keys in the Function section."
			CODE Escape			KEYCAP{Esc} or KEYCAP{⎋}
			CODE F1				KEYCAP{F1}
			CODE F2				KEYCAP{F2}
			CODE F3				KEYCAP{F3}
			CODE F4				KEYCAP{F4}
			CODE F5				KEYCAP{F5}
			CODE F6				KEYCAP{F6}
			CODE F7				KEYCAP{F7}
			CODE F8				KEYCAP{F8}
			CODE F9				KEYCAP{F9}
			CODE F10			KEYCAP{F10}
			CODE F11			KEYCAP{F11}
			CODE F12			KEYCAP{F12}
			CODE_OPT Fn			KEYCAP{Fn} This is typically a hardware key that does not generate a separate
								code. Most keyboards do not place this key in the [=function section=], but it is
								included here to keep it with related keys.
			CODE_OPT FnLock		KEYCAP{FLock} or KEYCAP{FnLock}. Function Lock key. Found on the Microsoft
								Natural Keyboard.
			CODE PrintScreen	KEYCAP{PrtScr SysRq} or KEYCAP{Print Screen}
			CODE ScrollLock		KEYCAP{Scroll Lock}
			CODE Pause			KEYCAP{Pause Break}
		END_CODE_TABLE

		For keyboards that provide more than 12 [=function keys=], the
		{{KeyboardEvent/code}} value follows the pattern shown above with
		"F" followed by the [=function key=] number - CODE_NOLINK{F13},
		CODE_NOLINK{F14}, CODE_NOLINK{F15}, and so on.

		<p class="note">
		Apple keyboards may have KEYCAP{Eject} or KEYCAP{Power} keys in the
		[=function section=]. The {{KeyboardEvent/code}} values for these
		keys are defined in [[#key-media]].
		</p>

	<h3 id="key-media">Media Keys</h3>

		<dfn>Media keys</dfn> are extra keys added to a keyboard that provide <em>media</em>
		related functionality like play, pause or volume control. These keys do not
		have a standard location on the keyboard so keyboards from different
		manufacturers are likely to have a different arrangement of keys or a
		completely different sets of keys.

		[=Media keys=] are often distinct from
		normal typing keys in appearance and may be recessed in the
		keyboard.

		On laptop keyboards, these keys are often merged with the
		[=function keys=], with the [=media key=] interpretation being
		the primary function of the key and the [=function key=]
		interpretation requiring the KEYCAP{Fn} key to be pressed at the
		same time. In this configuration the {{KeyboardEvent/code}} should
		be set to match the [=function key=] (CODE{F1} ... CODE{F12}).
		When the keys are merged in this fashion, the {{KeyboardEvent/code}}
		values are taken from the [=function key=] value because the
		[=media key=] value is not consistent across keyboards.

		BEGIN_CODE_TABLE media "List of code values for media keys."
			CODE_OPT BrowserBack		Some laptops place this key to the left of the KEYCAP{&uarr;} key.
			CODE_OPT BrowserFavorites
			CODE_OPT BrowserForward		Some laptops place this key to the right of the KEYCAP{&uarr;} key.
			CODE_OPT BrowserHome
			CODE_OPT BrowserRefresh
			CODE_OPT BrowserSearch
			CODE_OPT BrowserStop
			CODE_OPT Eject				KEYCAP{Eject} or KEYCAP{&#9167;}. This key is placed in the [=function
										section=] on some Apple keyboards.
			CODE_OPT LaunchApp1			Sometimes labelled KEYCAP{My Computer} on the keyboard
			CODE_OPT LaunchApp2			Sometimes labelled KEYCAP{Calculator} on the keyboard
			CODE_OPT LaunchMail
			CODE_OPT MediaPlayPause
			CODE_OPT MediaSelect
			CODE_OPT MediaStop
			CODE_OPT MediaTrackNext
			CODE_OPT MediaTrackPrevious
			CODE_OPT Power				This key is placed in the [=function section=] on some Apple keyboards,
										replacing the KEYCAP{Eject} key.
			CODE_OPT Sleep
			CODE_OPT AudioVolumeDown
			CODE_OPT AudioVolumeMute
			CODE_OPT AudioVolumeUp
			CODE_OPT WakeUp
		END_CODE_TABLE

	<h3 id="key-legacy">Legacy, Non-Standard and Special Keys</h3>

		These keys are not found on modern standard keyboards. They are
		listed here for reference purposes.

		BEGIN_CODE_TABLE legacy-modifier "List of code values for legacy modifier keys."
			CODE_OPT Hyper
			CODE_OPT Super
			CODE_OPT Turbo
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-process "List of code values for legacy process control keys."
			CODE_OPT Abort
			CODE_OPT Resume
			CODE_OPT Suspend
		END_CODE_TABLE

		&nbsp;

		BEGIN_CODE_TABLE legacy-editing "List of code values for legacy editing keys."
			CODE_OPT Again	Found on Sun's USB keyboard.
			CODE_OPT Copy	Found on Sun's USB keyboard.
			CODE_OPT Cut	Found on Sun's USB keyboard.
			CODE_OPT Find	Found on Sun's USB keyboard.
			CODE_OPT Open	Found on Sun's USB keyboard.
			CODE_OPT Paste	Found on Sun's USB keyboard.
			CODE_OPT Props	Found on Sun's USB keyboard.
			CODE_OPT Select Found on Sun's USB keyboard.
			CODE_OPT Undo	Found on Sun's USB keyboard.
		END_CODE_TABLE

		The following keys may be found on non-standard international keyboards.

		BEGIN_CODE_TABLE international "List of code values for keys found on international keyboards."
			CODE_OPT Hiragana	Use for dedicated KEYCAP{ひらがな} key found on some Japanese word processing keyboards.
			CODE_OPT Katakana	Use for dedicated KEYCAP{カタカナ} key found on some Japanese word processing keyboards.
		END_CODE_TABLE

		And finally, the following {{KeyboardEvent/code}} value should only
		be used when the corresponding key does not correspond to any of the
		{{KeyboardEvent/code}} values given elsewhere in this specification.
		This value is appropriate for use with virtual keyboards that do not
		have their keys arranged in a way that corresponds to those on a
		physical keyboard.

		BEGIN_CODE_TABLE special "List of special code values."
		CODE Unidentified	This value code should be used when no other
							value given in this specification is appropriate.
		END_CODE_TABLE

		<p class="warning">
		Conforming implementations MUST only use CODE{Unidentified} as a key code
		when there is no way for the implementation to determine the key code.
		Exposing only this value MUST NOT indicate a conforming implementation.
		</p>

<h2 id="accessibility">Accessibility</h2>

	This specification simply defines a set of values that are valid for use in the
	{{KeyboardEvent/code}} attribute. Thus, it does not introduce any features that have
	accessibility concerns.

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	Considerable thanks are due to the following participants of the WebApps
	Working Group for providing substantial material contributions in the
	process of developing this specification.

	Gary Kacmarcik (Google),
	Masayuki Nakano (Mozilla)
