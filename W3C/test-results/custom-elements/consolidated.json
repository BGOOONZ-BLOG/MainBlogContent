{
  "ua": [
    "UC10"
  ],
  "results": {
    "/custom-elements/concepts/custom-elements-type-allowed-chars-first-char.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Registering valid custom element name starting with '_' char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element name starting with base char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element name starting with ideographic char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering custom element starting with invalid character (general) should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering custom element starting with invalid character (combining char) should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering custom element starting with invalid character (extender char) should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering custom element starting with invalid character (digit char) should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/concepts/custom-elements-type-allowed-chars.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Registering valid custom element types with base char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element types with ideographic char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element types with digit chars": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element types with characters '.', '-', '_'": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element types with combining char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element types with extender char": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/concepts/custom-elements-type-naming.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Registering valid custom element types": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering invalid custom element types should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering forbidden custom element types should fail": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/creating-and-passing-registries/new-registry-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Document, loaded into browsing context, must have a new empty registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document, loaded into browsing context, must have a new empty registry, which is different from other documents' registries": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/creating-and-passing-registries/no-registry-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Document of type other than HTML, not loaded into browsing context, must not have a registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "XMLHttpRequest's asynchronous response HTML document must not have a registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/creating-and-passing-registries/share-registry-create-document.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Document created by createHTMLDocument should share an existing registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document created by createDocument with HTML namespace should share an existing registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/creating-and-passing-registries/share-registry-import-document.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Registry of the imported document should be shared with master document. Import is asynchronous": {
          "byUA": {
            "UC10": "TIMEOUT"
          },
          "totals": {
            "TIMEOUT": 1
          }
        },
        "Registry of the master document should be shared with imported document. Import is asynchronous": {
          "byUA": {
            "UC10": "TIMEOUT"
          },
          "totals": {
            "TIMEOUT": 1
          }
        },
        "Registry of the imported document should be shared with master document. Import is syncronous": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registry of the master document should be shared with imported document. Import is syncronous": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/enqueuing-and-invoking-callbacks/invoke-callbacks.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test 'this' value inside created callback.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test 'this' value inside attached callback.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test 'this' value inside detached callback.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test 'this' value inside attributeChanged callback.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/attached-callback-move-element-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attached callback if moving custom element inside document without browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if moving custom element from document without browsing context to document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if moving custom element from document with browsing context to document without browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if moving custom element inside document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if indirectly moving custom element inside document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if moving custom element from document with browsing context to document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/attached-callback-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attached callback if custom element is instantiated via constructor. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if custom element is created via innerHTML property. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if custom element is created via innerHTML property before registration. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback if custom element is unregistered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback. Registered element is created via document.createElement(). Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback. Unregistered element is created via document.createElement(). Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback. Registered element is created via innerHTML property. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback. Unresolved element is created via innerHTML property. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/attribute-changed-callback-change-attribute-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attributeChanged callback is called if attribute value is changed by method setAttribute(). The custom element is created via constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is changed by method setAttribute(). The custom element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is changed by method classList.add(). The custom element is created via constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is changed by method classList.add(). The custom element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is changed as property. The custom element is created via constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is changed as property. The custom element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is changed by classList.toggle(). The custom element is created via constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is changed by classList.toggle(). The custom element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if custom element is not registered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is changed. The document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is changed. The document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if custom element is not registered. The document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/attribute-changed-callback-remove-attribute-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attributeChanged callback if attribute is removed. The custom element created via constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback if attribute is removed. The custom element created via constructor and extends HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback if attribute is removed. The custom element created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute is removed. The custom element created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if attribute is removed. The custom element created via innerHTML property and unresolved at first": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute is removed. The custom element created via constructor and the document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute is removed. The custom element created via innerHTML property and the document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback if attribute is removed. The custom element created via innerHTML property and unresolved at first. The document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/attribute-changed-callback-set-attribute-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attributeChanged callback is called if attribute value is set by method setAttribute(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method setAttribute(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method classList.add(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method classList.add(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method classList.toggle(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method classList.toggle(). The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set as property. The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set as property. The custom element is created via constructor.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if attribute value is specified in HTML. The custom element is created via innerHTML property.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method setAttribute(). The custom element is created via innerHTML property.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method setAttribute(). The custom element is created via innerHTML property.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if attribute value of unresolved element is set by method setAttribute().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback of the custom element that extends some HTML element. Test that the callback is called": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute is set by method classList.add(). The custom element extends some HTML element.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method setAttribute(). The custom element extends some HTML element.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method setAttribute(). The document has browsing context.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method setAttribute(). The document has browsing context.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method classList.add(). The document has browsing context.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method classList.add(). The document has browsing context.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not called if attribute value of unresolved element is set by method setAttribute(). The document has browsing context.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is called if attribute value is set by method setAttribute(). The document has browsing context. The custom element extends some HTML element.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback arguments if attribute value is set by method setAttribute(). The document has browsing context. The custom element extends some HTML element.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/created-callback-element-prototype-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test custom element prototype inside created callback when custom element is created in HTML before registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element prototype inside created callback when custom element is created in HTML after registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element prototype inside created callback when custom element is created via document.createElement() before registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element prototype inside created callback when custom element is created via document.createElement() after registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element prototype inside created callback when custom element is created via constructor returned by method registerElement": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element prototype inside created callback when custom element is created by UA parser before registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/created-callback-invocation-order-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test attached callback is enqueued after created callback": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is enqueued after created callback. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is enqueued after created callback. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is enqueued after created callback.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not enqueued before created callback started. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is not enqueued before created callback started. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attributeChanged callback is enqueued after created callback started. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback is enqueued after created callback, but before created callback had started": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback is enqueued after created callback had started": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is not enqueued before created callback had started": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is enqueued after created callback had started": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test attached callback is enqueued after created callback after registration of custom element type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/created-callback-invocation-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test created callback when custom element is created by constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback when custom element is created in HTML": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback when custom element is created in HTML as descendant of another element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback when custom element is created by createElement": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback when custom element is created in HTML before registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback if custom element is unresolved.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback is called after custom element is created and registered. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback is called after custom element is registered and created. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback when custom element is created by createElement before registration of a custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback. Create several custom elements using different ways": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test created callback. Create several custom elements using different ways. Document has browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/detached-callback-move-element-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test detached callback is not called if moving custom element inside document without browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is not called if moving custom element from document without browsing context to document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if moving custom element from document with browsing context to document without browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if moving custom element inside document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if moving custom element from document with browsing context to document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/detached-callback-no-browsing-context-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test detached callback if custom element is created via innerHTML property. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if custom element is via innerHTML property before registration of a custom element. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if custom element is unregistered. Document has no browsing context": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Test detached callback if removing custom element via innerHTML property. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if removing perent of custom element. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback if removing perent of custom element via innerHTML property. Document has no browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is not called if document lose browsing context and custom element is removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is not called, if document's window is navigated to another document and custom element is removed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/custom-element-lifecycle/types-of-callbacks/detached-callback-with-browsing-context-test.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test detached callback is called if custom element is removed by method removeChild() from document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is called if ancestor node of custom element is removed by method removeChild() from document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is called if custom element is removed by method replaceChild() from document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is called if ancestor node of custom element is removed by method replaceChild() from document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is called after changing custom element direct parent innerHTML property in the document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test detached callback is called after changing custom element ancestor innerHTML property in the document with browsing context": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/changing-is-attribute.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test custom element type, after assigning IS attribute value. Element is created by constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after assigning IS attribute value. Element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after assigning IS attribute value to unresolved element. Element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after assigning IS attribute value. Element is defined in loaded HTML document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after assigning IS attribute value to unresolved element. Element is defined in loaded HTML document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type after changing IS attribute value. Element is HTML5 element with IS attribute referring to custom element type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type after changing IS attribute value several times. Element is HTML5 element with IS attribute referring to custom element type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after removing IS attribute value. Element is created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, after removing IS attribute value. Element is HTML5 element with IS attribute referring to custom element type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-constructor-is-attribute.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test that the constructor of a type extension sets the IS attribute value to the type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that the constructor of a custom element does not set the IS attribute if local name is the same as type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-constructor-local-name.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Custom element constructor sets local name to the name from custom element definition": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element constructor sets local name to the name from custom element definition. Test constructor of extended HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-constructor-namespace.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element constructor sets namespace to the namespace from custom element definition": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element constructor sets namespace to the namespace from custom element definition. Test constructor of extended HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-constructor-node-document.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element constructor sets owner document to the document, where custom element type is registered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element constructor sets owner document to the document, where custom element type is registered. Test constructor of extended HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element constructor sets owner document to the document, where custom element type is registered. Test different documents with shared registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element constructor sets owner document to the document, where custom element type is registered. Test constructor of extended HTML element for different documents with shared registry": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-constructor-prototype.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "If custom element type is registered with prototype, the custom element constructor should have the prototype specified in registerElement() call": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-prototype.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "If custom element type is registered with prototype, the custom element instance should have the prototype specified in registerElement() call": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-type-is-attribute.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Instantiation of custom element: custom element type is given as the value of the IS attribute": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Instantiation of custom element: custom element type is given as the value of the IS attribute. Custom element is unresolved at first": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-type-local-name-and-is-attribute.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element type must be taken from the local name of the element even if IS attribute provided.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element type must be taken from the local name of the element even if IS attribute provided. Custom element is unresolved at first": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element type must be taken from the local name of the element even if IS attribute provided. There's no definition for the value of IS attribute at first": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element type must be taken from the local name of the element even if IS attribute provided. IS attribute refers to another custom element type, which extends HTML5 elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element type must be taken from the local name of the custom element even if IS attribute provided. The element extends HTML5 elements, IS attribute refers to another custom element type.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/custom-element-type-local-name.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test custom element type, which is given via the local name of the custom element. Custom element created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test custom element type, which is given via the local name of the custom element. Custom element is defined in loaded HTML document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-interface-type-is-a-local-name.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() creates custom element of type, specified by localName argument, if an element definition with matching localName, namespace, and type is not registered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() creates custom element of type, specified by localName argument, if an element definition with matching localName, namespace, and type is not registered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-interface-type-is-a-type-extension.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() creates custom element of type, specified by typeExtension argument": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() creates custom element of type, specified by typeExtension argument": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElement() creates custom element of type, specified by typeExtension argument. Definition for localName is absent": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() creates custom element of type, specified by typeExtension argument. Definition for localName is absent": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-is-attribute.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() sets the element's IS attribute value to type, if type is not the same as localName": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElement() sets the element's IS attribute value to type, if type is not the same as localName and an element definition with matching localName, namespace, and type is not registered": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() sets the element's IS attribute value to type, if type is not the same as localName": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() sets the element's IS attribute value to type, if type is not the same as localNameand and an element definition with matching localName, namespace, and type is not registered ": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-namespace.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() sets custom element namespace to HTML Namespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElement() sets custom element namespace to HTML Namespace and an element definition with matching localName, namespace, and type is not registered": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Document.createElement() sets custom element namespace to HTML Namespace. Custom element is extending standard HTML tag": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document.createElement() sets custom element namespace to HTML Namespace. Document.createElement() is called with standard HTML tag name and type without registered custom element of such type": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-type-extension-is-a-type.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test Document.createElement() creates custom element of type, specified by typeExtension argument": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() creates custom element of type, specified by typeExtension argument": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-type-extension-unresolved.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "If typeExtension is unresolved when createElement called then local name is a type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "If typeExtension is unresolved when createElementNS called then local name is a type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/create-element-type-is-a-local-name.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() creates custom element of type, specified by single localName argument": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() creates custom element of type, specified by localName argument. Argument typeExtension is not passed": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/created-callback-create-element-ns.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElementNS() without typeExtension argument enqueues created callback": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() with typeExtension argument enqueues created callback": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document.createElementNS() should not enqueue created callback for unresolved custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElementNS() enqueues created callback for custom elements that are extensions of HTML5 elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/extensions-to-document-interface/created-callback-create-element.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.createElement() without typeExtension argument enqueues created callback": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElement() with typeExtension argument enqueues created callback": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document.createElement() should not enqueue created callback for unresolved custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.createElement() enqueues created callback for custom elements that are extensions of HTML5 elements": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/non-configurable-constructor-property.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test Document.registerElement() throws NotSupportedError if prototype has a non-configurable property named constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.registerElement() accepts prototype with a configurable property named constructor without throwing errors": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/instantiating-custom-elements/prototype-is-interface-prototype-object.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test Document.registerElement() throws NotSupportedError if prototype is already an interface prototype object": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.registerElement() throws NotSupportedError if prototype is already used for another custom element type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-default-namespace.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Default namespace is HTML namespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Default namespace is HTML namespace. Test constructor of extended HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-duplicate-definition.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Check duplicate definition": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Check duplicate definition. Specify constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Check duplicate definition. Test different prototypes and extends": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-invalid-type.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Registering invalid custom element type should throw SyntaxError": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-local-name-lowercased.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element local name should be lowercased if document is an HTML document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-name-is-null.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "If NAME is not specified then localName must be set to TYPE": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "If NAME is null then localName must be set to TYPE": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-no-interface-for-name.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Exception should be thrown in case of attempt to register a custom element which extends another custom element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-svg-namespace-name-is-null.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Error should be thrown if namespace is SVG and local name is not specified": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Error should be thrown if namespace is SVG and local name is null": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-svg-namespace.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "For SVG prototype namespace is SVG namespace": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/definition-construction-algorithm-type-name-lowercased.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element type should be lowercased. Test constructor": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Custom element type should be lowercased. Test constructor of extended HTML element": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/element-registration-algorithm-no-registry.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Registering valid custom element without options in document without registry should throw NotSupportedError": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Registering valid custom element with options in document without registry should throw NotSupportedError": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/extensions-to-document-interface/custom-element-name.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Custom element local name is the lowercased value of the EXTENDS property, supplied to Document.registerElement()": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/extensions-to-document-interface/custom-element-prototype.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Custom element should have HTMLElement prototype, if its type is registered without prototype": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/unresolved-element-pseudoclass/unresolved-element-pseudoclass-matching-query-selector-all.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test that single unresolved custom element is accessible by Document.querySelectorAll(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that single registered custom element is not accessible by :unresolved": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "If there are more than one unresolved custom element then all of them accessible by Document.querySelectorAll(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Unresolved custom element, created via Document.createElement(), should be accessible by Document.querySelectorAll(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "All unresolved custom element including nested ones are accessible by Document.querySelectorAll(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Unresolved custom element should be accessible by Document.querySelectorAll(':unresolved') in a loaded document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that Document.querySelectorAll(':unresolved') returns unresolved custom elements, extending HTML elements by IS attribute": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test Document.querySelectorAll(':unresolved') returns mix of custom elements of different types": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/unresolved-element-pseudoclass/unresolved-element-pseudoclass-matching-query-selector.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test that unresolved custom element is accessible by Document.querySelector(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that registered custom element are not accessible by :unresolved": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "If there are more than one unresolved custom element, all of them should be accessible by :unresolved pseudoclass": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Unresolved custom element, created via Document.createElement(), should be accessible by Document.querySelector(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Unresolved custom element inside div element should be accessible by :unresolved pseudoclass": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "All unresolved custom element including nested ones should be accessible by Document.querySelector(':unresolved')": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Document.querySelector(): Unresolved custom element should be accessible by :unresolved in loaded document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that Document.querySelector(':unresolved') returns custom element, extending HTML elements by IS attribute": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/unresolved-elements-interface-html-element.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test interface of unresolved element, created via innerHTML property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test interface of unresolved element, created by Document.createElement": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test interface of unresolved element, created by Document.createElementNS": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test unresolved element interface in loaded HTML document": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/unresolved-elements-interface-html-unknown-element.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test interface of unresolved element with MathML namespace, created via innerHTML property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Test interface of unresolved element with MathML namespace, created by Document.createElementNS": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Test interface of unresolved element in loaded HTML document with embedded MathML elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    },
    "/custom-elements/registering-custom-elements/unresolved-elements-interface-svg-element.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "Test interface of unresolved element with valid name, created by Document.createElementNS()": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Test interface of unresolved element with valid name, created via innerHTML property": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        },
        "Test interface of unresolved element in loaded HTML document with embedded SVG elements": {
          "byUA": {
            "UC10": "PASS"
          },
          "totals": {
            "PASS": 1
          }
        }
      }
    }
  }
}