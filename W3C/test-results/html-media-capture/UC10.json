{
  "results": [
    {
      "test": "/html-media-capture/capture_fallback_file_upload.html",
      "subtests": [
        {
          "name": "Check if input.capture fallback to file upload when the accept attribute value is set to a MIME type that has no associated capture control type",
          "status": "FAIL",
          "message": "assert_equals: file name string is \"upload.txt\" expected \"upload.txt\" but got \"httpwww.w3c-test.orghtml-media-capturesupportupload.mht\""
        }
      ],
      "status": "ERROR",
      "message": "Uncaught ReferenceError: getExtractedNovelData is not defined"
    },
    {
      "test": "/html-media-capture/capture_reflect.html",
      "subtests": [
        {
          "name": "Element input should have own property capture",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"capture\" missing"
        },
        {
          "name": "input.capture is false when the capture attribute is absent",
          "status": "FAIL",
          "message": "assert_false: expected false got undefined"
        },
        {
          "name": "input.capture is true when the capture attribute is present",
          "status": "FAIL",
          "message": "assert_true: expected true got undefined"
        },
        {
          "name": "input.capture is true when the capture attribute is present as empty string",
          "status": "FAIL",
          "message": "assert_true: expected true got undefined"
        },
        {
          "name": "input.capture is true when the capture attribute is present as canonical name",
          "status": "FAIL",
          "message": "assert_true: expected true got undefined"
        }
      ],
      "status": "ERROR",
      "message": "Uncaught ReferenceError: getExtractedNovelData is not defined"
    },
    {
      "test": "/html-media-capture/idlharness.html",
      "subtests": [
        {
          "name": "HTMLInputElement interface: attribute capture",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"capture\" expected true got false"
        },
        {
          "name": "HTMLInputElement must be primary interface of [object HTMLInputElement]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of [object HTMLInputElement]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "HTMLInputElement interface: [object HTMLInputElement] must inherit property \"capture\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"capture\" not found in prototype chain"
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}   "subtests": [
        {
          "name": "The import attribute must return null if the link does not represent an import.",
          "status": "FAIL",
          "message": "assert_equals: expected (object) null but got (undefined) undefined"
        },
        {
          "name": "The import attribute must return null if the link element is not in a Document.",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        },
        {
          "name": "The attribute must return the imported document for the import.",
          "status": "FAIL",
          "message": "Cannot read property 'body' of undefined(stack: TypeError: Cannot read property 'body' of undefined\n    at Object.<anonymous> (http://www.w3c-test.org/html-imports/html-link-element/import-attribute.html:31:35)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/html-imports/html-link-element/import-attribute.html:30:1)"
        },
        {
          "name": "The same object must be returned each time.",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}