{
  "results": [
    {
      "test": "/microdata/microdata-dom-api/001.html",
      "subtests": [
        {
          "name": "document.getItems must exist",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must return a NodeList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must locate the correct number of items",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must return a live NodeList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "live NodeList must notice when itemscope changes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "next request must notice when itemscope changes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must locate the right number of items for each itemtype",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must return a live NodeList when using URLs",
          "status": "PASS",
          "message": null
        },
        {
          "name": "live NodeList must notice when itemtype changes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "next request must notice when itemtype changes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must locate items when parameters are separated by spaces",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must ignore duplicated tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems NodeList must be in source tree order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must not return the same NodeList for different parameters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must treat no tokens as no parameter",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must not find items with itemtype but not itemscope",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems and itemtype must not resolve URLs",
          "status": "PASS",
          "message": null
        },
        {
          "name": "document.getItems must not see items that have the itemprop attribute set",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemscope attribute must be reflected by the .itemScope property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemScope property must be boolean",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemScope property must be read/write",
          "status": "PASS",
          "message": null
        },
        {
          "name": "writing to the itemScope property must toggle existence of the itemscope content attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "writing to the itemScope property must affect whether the element is returned by getItems",
          "status": "PASS",
          "message": null
        },
        {
          "name": "writing to the itemScope property must affect membership of live NodeLists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemType attribute must be reflected by the .itemRef property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemType property must be an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemType property must implement DOMTokenList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemType property must always reference the same object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType must be correct for an element that has itemtype tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.length must be 0 for an element that has no tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType must not contain an undefined class",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.item() must return null for out-of-range index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.item() must return null for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType[index] must be undefined for out-of-range index",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemType[index] must be undefined for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "empty itemType should stringify to contain the attribute's whitespace",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.add(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.toggle(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains must update when the underlying attribute is changed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains must not match when punctuation characters are added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.add must not remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.contains case sensitivity must match a case-specific string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.length must correctly reflect the number of tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.item(0) must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.item must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType[0] must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType[index] must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType[index] must still be undefined for out-of-range index when earlier indexes exist",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemtype attribute must update correctly when items have been added through itemType",
          "status": "FAIL",
          "message": "assert_equals: expected (string) \"foo FOO\" but got (object) null"
        },
        {
          "name": "itemType must stringify correctly when items have been added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.add must not make any changes if an existing token is added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove must not make any changes if a non-existing token is removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove must remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove must remove duplicated tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove must collapse whitespace around removed tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.remove must remove all useless whitespace",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1\" but got \" token1\""
        },
        {
          "name": "itemType.remove must collapse multiple whitespace around removed tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1 token3\" but got \"  token1 token3  \""
        },
        {
          "name": "itemType.remove must remove duplicates when removing tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1\" but got \"  token1 token1  \""
        },
        {
          "name": "itemType.remove must collapse whitespace when removing multiple tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token2\" but got \"token2  token3  \""
        },
        {
          "name": "itemType.add must remove unused whitespace when the token already exists",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1 token2\" but got \"  token1  token2  \""
        },
        {
          "name": "itemType.toggle must toggle tokens case-sensitively when adding",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.toggle must be able to remove tokens case-sensitively",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemtype attribute must be empty when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected \"\" but got \"foo FOO\""
        },
        {
          "name": "itemType must stringify to an empty string when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.item(0) must return null when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType[0] must be undefined when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemType.add should treat \" \" as a space",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.add should normalize \\t as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\t b\""
        },
        {
          "name": "itemType.add should normalize \\r as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\r b\""
        },
        {
          "name": "itemType.add should normalize \\n as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\n b\""
        },
        {
          "name": "itemType.add should normalize \\f as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\f b\""
        },
        {
          "name": "itemType.toggle must work after removing the itemtype attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType.length must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemType must be read-only",
          "status": "FAIL",
          "message": "assert_equals: attempting to write should modify the underlying string expected \"dummy\" but got \"test\""
        },
        {
          "name": "the itemprop attribute must be reflected by the .itemProp property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemProp property must be an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemProp property must implement DOMTokenList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemProp property must always reference the same object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp must be correct for an element that has itemprop tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.length must be 0 for an element that has no tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp must not contain an undefined class",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.item() must return null for out-of-range index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.item() must return null for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp[index] must be undefined for out-of-range index",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemProp[index] must be undefined for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "empty itemProp should stringify to contain the attribute's whitespace",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.contains(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.add(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.toggle(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": ".contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.contains must update when the underlying attribute is changed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.contains must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.contains must not match when punctuation characters are added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.add must not remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.contains case sensitivity must match a case-specific string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.length must correctly reflect the number of tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.item(0) must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.item must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp[0] must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp[index] must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp[index] must still be undefined for out-of-range index when earlier indexes exist",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemprop attribute must update correctly when items have been added through itemProp",
          "status": "FAIL",
          "message": "assert_equals: expected (string) \"foo FOO\" but got (object) null"
        },
        {
          "name": "itemProp must stringify correctly when items have been added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.add must not make any changes if an existing token is added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove must not make any changes if a non-existing token is removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove must remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove must remove duplicated tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove must collapse whitespace around removed tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.remove must remove all useless whitespace",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1 token3\" but got \"  token1 token3  \""
        },
        {
          "name": "itemProp.remove must remove useless whitespace when removing multiple tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token2\" but got \"token2  token3  \""
        },
        {
          "name": "itemProp.add must remove useless whitespace and duplicates when the token already exists",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1\" but got \"  token1  token1  \""
        },
        {
          "name": "itemProp.toggle must toggle tokens case-sensitively when adding",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.toggle must be able to remove tokens case-sensitively",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemprop attribute must be empty when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected \"\" but got \"foo FOO\""
        },
        {
          "name": "itemProp must stringify to an empty string when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.item(0) must return null when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp[0] must be undefined when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemProp.add should treat \" \" as a space",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.add should normalize \\t as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\t b\""
        },
        {
          "name": "itemProp.add should normalize \\r as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\r b\""
        },
        {
          "name": "itemProp.add should normalize \\n as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\n b\""
        },
        {
          "name": "itemProp.add should normalize \\f as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\f b\""
        },
        {
          "name": "itemProp.toggle must work after removing the itemprop attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp.length must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemProp must be read-only",
          "status": "FAIL",
          "message": "assert_equals: attempting to write should modify the underlying string expected \"dummy\" but got \"test\""
        },
        {
          "name": "the itemid attribute must be reflected by the .itemId property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemId property must be read/write",
          "status": "PASS",
          "message": null
        },
        {
          "name": "writing to the itemId property must create the itemid content attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemId property must see the resolved itemid URL",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemId property must see the resolved itemId property URL on setting",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemid attribute must see the resolved itemId URL",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemref attribute must be reflected by the .itemRef property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemRef property must be an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemRef property must implement DOMTokenList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the itemRef property must always reference the same object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef must be correct for an element that has itemref tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.length must be 0 for an element that has no tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef must not contain an undefined class",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.item() must return null for out-of-range index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.item() must return null for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef[index] must be undefined for out-of-range index",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemRef[index] must be undefined for negative index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "empty itemRef should stringify to contain the attribute's whitespace",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.add(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.toggle(empty_string) must throw a SYNTAX_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.add(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.toggle(string_with_spaces) must throw an INVALID_CHARACTER_ERR",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains must update when the underlying attribute is changed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains must not match when punctuation characters are added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.add must not remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.contains case sensitivity must match a case-specific string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.length must correctly reflect the number of tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.item(0) must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.item must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef[0] must return the first token",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef[index] must return case-sensitive strings and preserve token order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef[index] must still be undefined for out-of-range index when earlier indexes exist",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemref attribute must update correctly when items have been added through itemRef",
          "status": "FAIL",
          "message": "assert_equals: expected (string) \"foo FOO\" but got (object) null"
        },
        {
          "name": "itemRef must stringify correctly when items have been added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.add must not make any changes if an existing token is added",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove must not make any changes if a non-existing token is removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove must remove existing tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove must remove duplicated tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove must collapse whitespace around removed tokens",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.remove must remove useless whitespace when removing tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1\" but got \" token1\""
        },
        {
          "name": "itemRef.remove must remove useless whitespace when removing tokens (2)",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1 token3\" but got \"  token1 token3  \""
        },
        {
          "name": "itemRef.remove must collapse whitespace when removing multiple tokens",
          "status": "FAIL",
          "message": "assert_equals: expected \"token2\" but got \"token2  token3  \""
        },
        {
          "name": "itemRef.add must remove whitespace and duplicate when the token already exists",
          "status": "FAIL",
          "message": "assert_equals: expected \"token1\" but got \"  token1  token1  \""
        },
        {
          "name": "itemRef.toggle must toggle tokens case-sensitively when adding",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.toggle must be able to remove tokens case-sensitively",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemref attribute must be empty when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected \"\" but got \"foo FOO\""
        },
        {
          "name": "itemRef must stringify to an empty string when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.item(0) must return null when all classes have been removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef[0] must be undefined when all classes have been removed",
          "status": "FAIL",
          "message": "assert_equals: expected (undefined) undefined but got (object) null"
        },
        {
          "name": "itemRef.add should treat \" \" as a space",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.add should normalize \\t as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\t b\""
        },
        {
          "name": "itemRef.add should normalize \\r as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\r b\""
        },
        {
          "name": "itemRef.add should normalize \\n as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\n b\""
        },
        {
          "name": "itemRef.add should normalize \\f as a space",
          "status": "FAIL",
          "message": "assert_equals: expected \"a b\" but got \"a\\f b\""
        },
        {
          "name": "itemRef.toggle must work after removing the itemref attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef.length must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemRef must be read-only",
          "status": "FAIL",
          "message": "assert_equals: attempting to write should modify the underlying string expected \"dummy\" but got \"test\""
        },
        {
          "name": "itemValue must be null if the element does not have an itemprop attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "writing to itemValue must throw an INVALID_ACCESS_ERR error if the element does not have an itemprop attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must return the element if the element has an itemscope attribute",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the content attribute on meta elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on audio elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on embed elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on iframe elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on img elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on source elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on track elements",
          "status": "FAIL",
          "message": "assert_equals: reading expected \"http://www.w3c-test.org/\" but got \"\""
        },
        {
          "name": "itemValue must reflect the src attribute on video elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on anchor elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on area elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on link elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the src attribute on object elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the dateTime attribute of time elements with no datetime attribute",
          "status": "FAIL",
          "message": "assert_equals: writing (checking dateTime) expected (string) \"2001-02-03T04:05:06Z\" but got (undefined) undefined"
        },
        {
          "name": "itemValue must reflect the datetime attribute of time elements with a datetime attribute",
          "status": "FAIL",
          "message": "assert_equals: reading expected \"test\" but got \"te st ing\""
        },
        {
          "name": "itemValue must reflect the textContent of other elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the textContent of unknown elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must reflect the textContent of unknown elements with known attributes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemValue must not reflect the value of input elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "dynamic changes of itemscope should change the value exposed through itemValue",
          "status": "PASS",
          "message": null
        },
        {
          "name": "dynamic changes of itemprop should change the value exposed through itemValue",
          "status": "FAIL",
          "message": "assert_equals: itemprop tokens added on META index 0 expected (string) \"test\" but got (object) null"
        },
        {
          "name": "the properties property must be an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the properties property must implement HTMLPropertiesCollection and HTMLCollection",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the properties property must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the properties property must always reference the same object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the properties collection must be empty if the element does not have an itemscope property",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1494:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1489:1)"
        },
        {
          "name": "the properties collection must not support legacycaller",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the properties collection must become populated if the element is given an itemscope property",
          "status": "FAIL",
          "message": "Object #<NodeList> has no method 'getValues'(stack: TypeError: Object #<NodeList> has no method 'getValues'\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1512:59)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1504:1)"
        },
        {
          "name": "the properties collection must become empty if the element's itemscope property is removed",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1521:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1515:1)"
        },
        {
          "name": "properties.length must be the total number of properties",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item must give each property in tree order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item must have the right property names on it when enumerated",
          "status": "FAIL",
          "message": "assert_array_equals: lengths differ, expected 9 got 7"
        },
        {
          "name": "properties.item must give null for out of range index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties[index] must give each property in tree order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties[index] must give undefined for out of range index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item and length must ignore properties of nested items",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item and length must see items added with itemref when attached to the document's DOM",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item and length must see items added with itemref",
          "status": "FAIL",
          "message": "assert_equals: length expected 4 but got 1"
        },
        {
          "name": "itemref must reference the first element with a given ID",
          "status": "FAIL",
          "message": "assert_equals: length expected 2 but got 0"
        },
        {
          "name": "itemref must ignore duplicated IDs",
          "status": "FAIL",
          "message": "assert_equals: length expected 2 but got 0"
        },
        {
          "name": "itemref must ignore non-existent IDs",
          "status": "FAIL",
          "message": "assert_equals: length expected 2 but got 0"
        },
        {
          "name": "itemref in a dislocated tree must not reference elements from another dislocated tree",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemref in a dislocated tree must not reference elements from the main document",
          "status": "FAIL",
          "message": "assert_equals: expected 0 but got 1"
        },
        {
          "name": "itemref in the main document must not reference elements from a dislocated tree",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item and length must update when adding property elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item must update when re-ordering property elements, but length must not",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item and length must update when changing itemProp of children",
          "status": "FAIL",
          "message": "assert_equals: length (after test 1) expected 2 but got 1"
        },
        {
          "name": "properties.item and length must update when changing id of referenced sibling",
          "status": "FAIL",
          "message": "assert_equals: length after id is created expected 2 but got 0"
        },
        {
          "name": "properties.item and length must update when changing duplicated id of referenced sibling",
          "status": "FAIL",
          "message": "assert_equals: length (before test) expected 1 but got 0"
        },
        {
          "name": "properties.item and length must update when changing itemref to point to an element",
          "status": "FAIL",
          "message": "assert_equals: length after itemref is changed expected 1 but got 0"
        },
        {
          "name": "properties.item and length must update when changing children of elements referenced through itemref",
          "status": "FAIL",
          "message": "assert_equals: length after a referenced element is added expected 1 but got 0"
        },
        {
          "name": "properties.item and length must update when appending elements with itemref to different parents",
          "status": "FAIL",
          "message": "assert_equals: length (before test) expected 2 but got 1"
        },
        {
          "name": "properties.item and length must update when changing itemscope of children",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the namedItem must return an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": ".properties[] must also act as .properties.namedItem() when there are matching properties",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the namedItem must return an object even if there are no matching properties",
          "status": "PASS",
          "message": null
        },
        {
          "name": ".properties[] must return undefined when no property exists with the given name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "namedItem must return the same object for the same property name",
          "status": "FAIL",
          "message": "assert_equals: before modification expected object \"[object NodeList]\" but got object \"[object NodeList]\""
        },
        {
          "name": "namedItem must return a different object for a different property name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "namedItem must return a different object for different elements with the same property name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "namedItem() and properties[] must return the same object for the same property name",
          "status": "FAIL",
          "message": "assert_equals: expected object \"[object NodeList]\" but got object \"[object NodeList]\""
        },
        {
          "name": "the properties property must implement PropertyNodeList and NodeList",
          "status": "FAIL",
          "message": "PropertyNodeList is not defined(stack: ReferenceError: PropertyNodeList is not defined\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1980:68)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:1978:1)"
        },
        {
          "name": "the namedItem property must be read/write",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PropertyNodeList must contain the correct properties",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PropertyNodeList must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "namedItem must not match property names containing whitespace",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2023:62)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2021:1)"
        },
        {
          "name": "namedItem must match property names containing other special characters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PropertyNodeList must be live",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2041:27)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2037:1)"
        },
        {
          "name": "PropertyNodeList must ignore properties of nested items",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2048:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2044:1)"
        },
        {
          "name": "PropertyNodeList must see items added with itemref when attached to the document's DOM",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PropertyNodeList must see items added with itemref",
          "status": "FAIL",
          "message": "assert_equals: foo length expected 2 but got 1"
        },
        {
          "name": "PropertyNodeList must update when adding itemscope on the root",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2094:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2089:1)"
        },
        {
          "name": "PropertyNodeList must update when adding property elements",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2108:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2104:1)"
        },
        {
          "name": "PropertyNodeList must update when re-ordering property elements",
          "status": "FAIL",
          "message": "assert_equals: item 0 (after test) expected Element node <div itemprop=\"foo\"></div> but got Element node <div itemprop=\"foo\"></div>"
        },
        {
          "name": "PropertyNodeList must update when changing itemProp of children",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2137:30)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2133:1)"
        },
        {
          "name": "PropertyNodeList must update when changing id of referenced sibling",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2159:30)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2155:1)"
        },
        {
          "name": "PropertyNodeList must update when changing duplicated id of referenced sibling",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2194:30)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2190:1)"
        },
        {
          "name": "PropertyNodeList must update when changing itemref to point to an element",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2244:27)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2240:1)"
        },
        {
          "name": "PropertyNodeList must update when changing children of elements referenced through itemref",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2270:30)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2266:1)"
        },
        {
          "name": "PropertyNodeList must update when appending elements with itemref to different parents",
          "status": "FAIL",
          "message": "assert_equals: length (before test) expected 2 but got 1"
        },
        {
          "name": "PropertyNodeList must update when changing itemscope of children",
          "status": "FAIL",
          "message": "assert_equals: length after setting itemscope expected 0 but got 1"
        },
        {
          "name": "getValues must return an array",
          "status": "FAIL",
          "message": "Cannot call method 'getValues' of null(stack: TypeError: Cannot call method 'getValues' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2381:72)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2380:1)"
        },
        {
          "name": "getValues must always return a newly constructed array",
          "status": "FAIL",
          "message": "Cannot call method 'getValues' of null(stack: TypeError: Cannot call method 'getValues' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2389:34)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2386:1)"
        },
        {
          "name": "getValues array must contain the same item values as itemValue would return for the given properties",
          "status": "FAIL",
          "message": "Object #<NodeList> has no method 'getValues'(stack: TypeError: Object #<NodeList> has no method 'getValues'\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2412:31)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2391:1)"
        },
        {
          "name": "getValues array must not be live",
          "status": "FAIL",
          "message": "Object #<NodeList> has no method 'getValues'(stack: TypeError: Object #<NodeList> has no method 'getValues'\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2439:31)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2418:1)"
        },
        {
          "name": "the names property must be an object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names property must implement DOMStringList",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names property must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names property must always reference the same object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.item() must return null for out of range indexes",
          "status": "FAIL",
          "message": "INDEX_SIZE_ERR: DOM Exception 1"
        },
        {
          "name": "names[index] must return undefined for out of range indexes",
          "status": "FAIL",
          "message": "assert_equals: [0] expected (undefined) undefined but got (object) null"
        },
        {
          "name": "the names collection must be empty if the element does not have an itemscope property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names collection must become populated if the element is given an itemscope property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names collection must become empty if the element's itemscope property is removed",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names.item and names.contains methods should be overwriteable",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names.customProperty should be writeable",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.length must be read-only",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.length must be the total number of property names",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.item must give each property name in tree order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must be case sensitive",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.contains must return boolean if the name exists",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.item must cast to number",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names.contains must cast to string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "the names collection must be live",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must reflect property names containing special characters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must ignore properties of nested items",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must see items added with itemref when attached to the document's DOM",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must see items added with itemref",
          "status": "FAIL",
          "message": "assert_equals: length expected 4 but got 1"
        },
        {
          "name": "names must update when adding itemscope on the root",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must update when adding property elements",
          "status": "PASS",
          "message": null
        },
        {
          "name": "names must update when re-ordering property elements",
          "status": "FAIL",
          "message": "assert_equals: item 0 (after test) expected \"bar\" but got \"foo\""
        },
        {
          "name": "names must update when changing itemProp of children",
          "status": "FAIL",
          "message": "assert_equals: length after adding a token expected 2 but got 1"
        },
        {
          "name": "names must update when changing id of referenced sibling when appended to document",
          "status": "FAIL",
          "message": "assert_equals: length after id is created expected 2 but got 0"
        },
        {
          "name": "names must update when changing duplicated id of referenced sibling",
          "status": "FAIL",
          "message": "assert_equals: length (before test) expected 1 but got 0"
        },
        {
          "name": "names must update when changing itemref to point to an element",
          "status": "FAIL",
          "message": "assert_equals: length after itemref is changed expected 1 but got 0"
        },
        {
          "name": "names must update when changing children of elements referenced through itemref",
          "status": "FAIL",
          "message": "assert_equals: length after a referenced element is added expected 1 but got 0"
        },
        {
          "name": "names must update when appending elements with itemref to different parents",
          "status": "FAIL",
          "message": "assert_equals: length (before test) expected 2 but got 1"
        },
        {
          "name": "names must update when changing itemscope of children",
          "status": "FAIL",
          "message": "assert_equals: length after setting itemscope expected 0 but got 1"
        },
        {
          "name": "collections must survive the parent's removal from the document",
          "status": "FAIL",
          "message": "Cannot read property 'length' of undefined(stack: TypeError: Cannot read property 'length' of undefined\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2933:34)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2893:1)"
        },
        {
          "name": "collections must survive the item's removal from the document",
          "status": "FAIL",
          "message": "Cannot read property 'length' of undefined(stack: TypeError: Cannot read property 'length' of undefined\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2983:34)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:2945:1)"
        },
        {
          "name": "itemprop names must not override builtin properties",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.item(integerString) should cast to a number",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties[integerString] should act as a numeric index",
          "status": "PASS",
          "message": null
        },
        {
          "name": "properties.namedItem(integer) should cast to a string",
          "status": "FAIL",
          "message": "Type error(stack: TypeError: Type error\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3026:42)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3024:1)"
        },
        {
          "name": "properties[someObject] should cast toString before using whichever casting applies",
          "status": "PASS",
          "message": null
        },
        {
          "name": "simple nested itemscope",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3046:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3037:1)"
        },
        {
          "name": "simple nested itemscope with itemref",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3072:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3063:1)"
        },
        {
          "name": "simple sibling itemref",
          "status": "FAIL",
          "message": "assert_equals: length expected 3 but got 1"
        },
        {
          "name": "itemref pointing to itself",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3173:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3168:1)"
        },
        {
          "name": "itemref pointing to itself with child",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3197:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3191:1)"
        },
        {
          "name": "nested itemref pointing to itself with child",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3233:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3224:1)"
        },
        {
          "name": "mutually referencing siblings",
          "status": "FAIL",
          "message": "assert_equals: id1 length expected 1 but got 0"
        },
        {
          "name": "mutually referencing siblings with item parent",
          "status": "FAIL",
          "message": "assert_equals: id1 length expected 1 but got 0"
        },
        {
          "name": "itemref referencing parent item",
          "status": "FAIL",
          "message": "Cannot read property 'length' of null(stack: TypeError: Cannot read property 'length' of null\n    at Object.<anonymous> (http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3433:58)\n    at Object.Test.step (http://www.w3c-test.org/resources/testharness.js:798:25)\n    at test (http://www.w3c-test.org/resources/testharness.js:73:18)\n    at http://www.w3c-test.org/microdata/microdata-dom-api/001.html:3418:1)"
        },
        {
          "name": "itemref referencing parent without itemscope",
          "status": "FAIL",
          "message": "assert_equals: length expected 1 but got 0"
        },
        {
          "name": "itemref referencing element with same id",
          "status": "PASS",
          "message": null
        },
        {
          "name": "itemref pointing to child of nested itemscope",
          "status": "FAIL",
          "message": "assert_equals: outer length expected 3 but got 1"
        }
      ],
      "status": "ERROR",
      "message": "Uncaught ReferenceError: getExtractedNovelData is not defined"
    }
  ]
}