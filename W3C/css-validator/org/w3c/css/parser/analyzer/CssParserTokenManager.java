/* CssParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CssParserTokenManager.java */
package org.w3c.css.parser.analyzer;
import org.w3c.css.atrules.css.AtRuleCounterStyle;
import org.w3c.css.atrules.css.AtRuleFontFace;
import org.w3c.css.atrules.css.AtRuleKeyframes;
import org.w3c.css.atrules.css.AtRuleMedia;
import org.w3c.css.atrules.css.AtRulePage;
import org.w3c.css.atrules.css.AtRulePhoneticAlphabet;
import org.w3c.css.atrules.css.AtRulePreference;
import org.w3c.css.atrules.css.AtRuleSupports;
import org.w3c.css.atrules.css.AtRuleViewport;
import org.w3c.css.atrules.css.media.MediaFeature;
import org.w3c.css.atrules.css.media.MediaRangeFeature;
import org.w3c.css.atrules.css.supports.SupportsFeature;
import org.w3c.css.atrules.svg.AtRuleColorProfile;
import org.w3c.css.parser.AtRule;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssErrorToken;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.properties.css.CssProperty;
import org.w3c.css.selectors.AttributeSelector;
import org.w3c.css.selectors.ClassSelector;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.selectors.TypeSelector;
import org.w3c.css.selectors.UniversalSelector;
import org.w3c.css.selectors.attributes.AttributeAny;
import org.w3c.css.selectors.attributes.AttributeBegin;
import org.w3c.css.selectors.attributes.AttributeExact;
import org.w3c.css.selectors.attributes.AttributeOneOf;
import org.w3c.css.selectors.attributes.AttributeStart;
import org.w3c.css.selectors.attributes.AttributeSubstr;
import org.w3c.css.selectors.attributes.AttributeSuffix;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.CssProfile;
import org.w3c.css.util.CssVersion;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.StringUtils;
import org.w3c.css.util.Util;
import org.w3c.css.util.WarningParamException;
import org.w3c.css.values.CssANPlusB;
import org.w3c.css.values.CssAngle;
import org.w3c.css.values.CssAttr;
import org.w3c.css.values.CssBracket;
import org.w3c.css.values.CssCalc;
import org.w3c.css.values.CssCheckableValue;
import org.w3c.css.values.CssColor;
import org.w3c.css.values.CssComparator;
import org.w3c.css.values.CssExpression;
import org.w3c.css.values.CssFlexibleLength;
import org.w3c.css.values.CssFrequency;
import org.w3c.css.values.CssFunction;
import org.w3c.css.values.CssHashIdent;
import org.w3c.css.values.CssIdent;
import org.w3c.css.values.CssImage;
import org.w3c.css.values.CssLength;
import org.w3c.css.values.CssMathFunction;
import org.w3c.css.values.CssNumber;
import org.w3c.css.values.CssOperator;
import org.w3c.css.values.CssPercentage;
import org.w3c.css.values.CssRatio;
import org.w3c.css.values.CssResolution;
import org.w3c.css.values.CssSemitone;
import org.w3c.css.values.CssString;
import org.w3c.css.values.CssSwitch;
import org.w3c.css.values.CssTime;
import org.w3c.css.values.CssTypes;
import org.w3c.css.values.CssURL;
import org.w3c.css.values.CssUnicodeRange;
import org.w3c.css.values.CssValue;
import org.w3c.css.values.CssVariable;
import org.w3c.css.values.CssVolume;
import static org.w3c.css.util.StringUtils.convertIdent;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class CssParserTokenManager implements CssParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 146;
         return jjMoveNfa_0(7, 0);
      case 36:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 148;
         return jjMoveNfa_0(7, 0);
      case 38:
         jjmatchedKind = 149;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 58;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 57;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 45:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 56;
         return jjMoveNfa_0(7, 0);
      case 47:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 59:
         jjmatchedKind = 51;
         return jjMoveNfa_0(7, 0);
      case 60:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x4000000L);
      case 61:
         jjmatchedKind = 50;
         return jjMoveNfa_0(7, 0);
      case 63:
         jjmatchedKind = 151;
         return jjMoveNfa_0(7, 0);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffffff8000L, 0x0L);
      case 91:
         jjmatchedKind = 53;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 54;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 96:
         jjmatchedKind = 150;
         return jjMoveNfa_0(7, 0);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xd000000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x7fL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
      case 124:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 46;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 42:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1100000000000000L, active2, 0x4000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7c00000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x38000008000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000200000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000038000000L, active2, 0x1000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0xc000000000000000L, active2, 0x840L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x44000010000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400080000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3e0000L, active2, 0x203fL);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400010000L, active2, 0x1000L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800002838000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008000L, active2, 0x3fL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1001c0000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000039007fe0000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200004000000000L, active2, 0x4000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xd000000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2040L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0x800L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         break;
      case 45:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3fL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x104000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x38000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000001c0010000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x802003e0000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe000000007c00000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 4;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000003e0000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x5L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x800L);
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x800000400000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active1, 0x6000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active1, 0x1c0000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x2aL);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0x70000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x8200000000L, active2, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000000L, active2, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active1, 0x200000103fc00000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa6_0(active1, 0x1038000000L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x2aL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000080000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active1, 0x2000044000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x10L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x60000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active1, 0x80007c00000L, active2, 0x4L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x100000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active1, 0xa200300000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0x400008000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active1, 0x301c0000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active1, 0x81c0000000L, active2, 0x10L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active1, 0x300000e8000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active1, 0x300000L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active1, 0x17c00000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x8000100000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x84000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x2aL);
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x40008000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 7;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa8_0(active1, 0x7c00000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x1400000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active1, 0x60000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active1, 0x300000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x40010000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active1, 0x2080000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000080000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x28000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x120000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x80040000000L, active2, 0x3aL);
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0x2aL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x41401000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0x10000000L, active2, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0x300000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0xc00000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x140000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
         }
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x8006000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
         }
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000200a0000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000020000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L, active2, 0xaL);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x90000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000001c80000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x6000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000L, active2, 0x20L);
      case 80:
      case 112:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 83:
      case 115:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x120200000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000c00000L, active2, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active1, 0x6000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000L, active2, 0x8L);
      case 82:
      case 114:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 10;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x20100000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 11;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0x200000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 11;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active1, 0x6000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000000L, active2, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x40080000000L, active2, 0x8L);
      case 77:
      case 109:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 11;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x100020000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000001400000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 12;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x28000000000L, active2, 0x2L);
      case 77:
      case 109:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 12;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active1, 0x4000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);
      case 69:
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 13;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0x200000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 14;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x4000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0x200000L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x4000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active1, 0x400000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 16;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active1, 0x4000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active1, 0x4000000L);
      case 84:
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 17);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x4000000L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 18;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 18);
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 19);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 1082;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAddStates(0, 173); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(174, 199); }
                  }
                  else if (curChar == 33)
                     { jjCheckNAddStates(200, 203); }
                  else if (curChar == 46)
                     { jjCheckNAddStates(204, 234); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(235, 239); }
                  else if (curChar == 45)
                     { jjAddStates(240, 244); }
                  else if (curChar == 39)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(245, 249); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(250, 254); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 195;
                  else if (curChar == 44)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 43)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 45)
                     { jjAddStates(255, 256); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(257, 261); }
                  else if (curChar == 62)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 42)
                     { jjCheckNAddStates(262, 264); }
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(265, 267); }
                  break;
               case 6:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 9:
                  if (curChar == 43 && kind > 28)
                     kind = 28;
                  break;
               case 10:
                  if (curChar == 62 && kind > 30)
                     kind = 30;
                  break;
               case 11:
                  if (curChar == 61 && kind > 31)
                     kind = 31;
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 44 && kind > 32)
                     kind = 32;
                  break;
               case 17:
                  if (curChar == 45)
                     { jjAddStates(268, 269); }
                  break;
               case 19:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(270, 274); }
                  break;
               case 23:
                  if (curChar != 10)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 24:
               case 33:
                  if (curChar == 13)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(275, 282); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(283, 286); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(287, 291); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(292, 297); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(298, 304); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(305, 309); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(310, 317); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(318, 321); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(322, 326); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(327, 332); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(333, 339); }
                  break;
               case 39:
                  if (curChar == 40 && kind > 136)
                     kind = 136;
                  break;
               case 45:
                  if (curChar == 40 && kind > 137)
                     kind = 137;
                  break;
               case 52:
                  if (curChar == 40 && kind > 138)
                     kind = 138;
                  break;
               case 59:
                  if (curChar == 60)
                     { jjCheckNAddStates(257, 261); }
                  break;
               case 61:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(340, 344); }
                  break;
               case 62:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 63:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(63, 64); }
                  break;
               case 64:
                  if (curChar == 42)
                     { jjCheckNAddStates(345, 347); }
                  break;
               case 65:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 66:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if (curChar == 42)
                     { jjCheckNAddStates(348, 350); }
                  break;
               case 68:
                  if (curChar == 47)
                     { jjCheckNAddStates(340, 344); }
                  break;
               case 69:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 70:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(71, 180); }
                  break;
               case 72:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 73:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(357, 362); }
                  break;
               case 74:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 75:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 76:
                  if (curChar == 42)
                     { jjCheckNAddStates(363, 365); }
                  break;
               case 77:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 78:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if (curChar == 42)
                     { jjCheckNAddStates(366, 368); }
                  break;
               case 80:
                  if (curChar == 47)
                     { jjCheckNAddStates(357, 362); }
                  break;
               case 81:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 82:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(83, 99); }
                  break;
               case 84:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 85:
                  if (curChar == 61)
                     { jjCheckNAddStates(372, 376); }
                  break;
               case 86:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(87, 129); }
                  break;
               case 88:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 89:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(383, 388); }
                  break;
               case 90:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 91:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 92:
                  if (curChar == 42)
                     { jjCheckNAddStates(389, 391); }
                  break;
               case 93:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 94:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 95:
                  if (curChar == 42)
                     { jjCheckNAddStates(392, 394); }
                  break;
               case 96:
                  if (curChar == 47)
                     { jjCheckNAddStates(383, 388); }
                  break;
               case 97:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 98:
                  if (curChar == 62 && kind > 144)
                     kind = 144;
                  break;
               case 100:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(395, 400); }
                  break;
               case 103:
                  if (curChar == 10)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 104:
               case 112:
                  if (curChar == 13)
                     { jjCheckNAdd(103); }
                  break;
               case 105:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(401, 409); }
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(410, 414); }
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(415, 420); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(421, 427); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(428, 435); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(436, 441); }
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(442, 450); }
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(451, 455); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(456, 461); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(462, 468); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(469, 476); }
                  break;
               case 119:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(477, 484); }
                  break;
               case 121:
                  if (curChar == 10)
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 122:
               case 131:
                  if (curChar == 13)
                     { jjCheckNAdd(121); }
                  break;
               case 123:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(485, 493); }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(494, 504); }
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(505, 511); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(512, 519); }
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(520, 528); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(529, 538); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(539, 546); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(547, 557); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(558, 564); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(565, 572); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(573, 581); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(582, 591); }
                  break;
               case 137:
                  if (curChar == 34)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 138:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 139:
                  if (curChar == 34)
                     { jjCheckNAddStates(595, 599); }
                  break;
               case 141:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 142:
                  if (curChar == 10)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 143:
               case 146:
                  if (curChar == 13)
                     { jjCheckNAdd(142); }
                  break;
               case 144:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(600, 605); }
                  break;
               case 147:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(606, 614); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(615, 619); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(620, 625); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(626, 632); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(633, 640); }
                  break;
               case 153:
                  if (curChar == 39)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 154:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 155:
                  if (curChar == 39)
                     { jjCheckNAddStates(595, 599); }
                  break;
               case 157:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 158:
                  if (curChar == 10)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 159:
               case 162:
                  if (curChar == 13)
                     { jjCheckNAdd(158); }
                  break;
               case 160:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(644, 649); }
                  break;
               case 163:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(650, 658); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(659, 663); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(664, 669); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(670, 676); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(677, 684); }
                  break;
               case 170:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(685, 692); }
                  break;
               case 172:
                  if (curChar == 10)
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 173:
               case 182:
                  if (curChar == 13)
                     { jjCheckNAdd(172); }
                  break;
               case 174:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(693, 701); }
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(702, 712); }
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(713, 719); }
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(720, 727); }
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(728, 736); }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(737, 746); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(747, 754); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(755, 765); }
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(766, 772); }
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(773, 780); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(781, 789); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(790, 799); }
                  break;
               case 194:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 47)
                     { jjCheckNAddStates(800, 803); }
                  break;
               case 196:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(804, 808); }
                  break;
               case 197:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(198, 199); }
                  break;
               case 198:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(198, 199); }
                  break;
               case 199:
                  if (curChar == 42)
                     { jjCheckNAddStates(809, 811); }
                  break;
               case 200:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 201:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 202:
                  if (curChar == 42)
                     { jjCheckNAddStates(812, 814); }
                  break;
               case 203:
                  if (curChar == 47)
                     { jjCheckNAddStates(804, 808); }
                  break;
               case 204:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 205:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(206, 229); }
                  break;
               case 207:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 208:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(819, 821); }
                  break;
               case 209:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(210, 211); }
                  break;
               case 210:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(210, 211); }
                  break;
               case 211:
                  if (curChar == 42)
                     { jjCheckNAddStates(822, 824); }
                  break;
               case 212:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(213, 214); }
                  break;
               case 213:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(213, 214); }
                  break;
               case 214:
                  if (curChar == 42)
                     { jjCheckNAddStates(825, 827); }
                  break;
               case 215:
                  if (curChar == 47)
                     { jjCheckNAddStates(819, 821); }
                  break;
               case 216:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 217:
                  if (curChar == 62 && kind > 145)
                     kind = 145;
                  break;
               case 219:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(828, 833); }
                  break;
               case 221:
                  if (curChar == 10)
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 222:
               case 231:
                  if (curChar == 13)
                     { jjCheckNAdd(221); }
                  break;
               case 223:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(834, 839); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(840, 848); }
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(849, 853); }
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(854, 859); }
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(860, 866); }
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(867, 874); }
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(875, 880); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(881, 889); }
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(890, 894); }
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(895, 900); }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(901, 907); }
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(908, 915); }
                  break;
               case 237:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 247:
                  if (curChar == 45)
                     { jjAddStates(255, 256); }
                  break;
               case 248:
                  if (curChar == 40 && kind > 135)
                     kind = 135;
                  break;
               case 253:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 261:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 268:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(174, 199); }
                  break;
               case 269:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(270, 271); }
                  break;
               case 270:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(270, 271); }
                  break;
               case 271:
                  if (curChar == 42)
                     { jjCheckNAddStates(916, 918); }
                  break;
               case 272:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(273, 274); }
                  break;
               case 273:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(273, 274); }
                  break;
               case 274:
                  if (curChar == 42)
                     { jjCheckNAddStates(919, 921); }
                  break;
               case 275:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(276, 277); }
                  break;
               case 276:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 277:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(276, 277); }
                  break;
               case 278:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(279, 280); }
                  break;
               case 279:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(279, 280); }
                  break;
               case 280:
                  if (curChar == 42)
                     { jjCheckNAddStates(922, 924); }
                  break;
               case 281:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(282, 283); }
                  break;
               case 282:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(282, 283); }
                  break;
               case 283:
                  if (curChar == 42)
                     { jjCheckNAddStates(925, 927); }
                  break;
               case 284:
                  if (curChar == 47)
                     { jjCheckNAddStates(928, 930); }
                  break;
               case 285:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 286:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(928, 930); }
                  break;
               case 288:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 289:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(290, 291); }
                  break;
               case 290:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(290, 291); }
                  break;
               case 291:
                  if (curChar == 42)
                     { jjCheckNAddStates(931, 933); }
                  break;
               case 292:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(293, 294); }
                  break;
               case 293:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(293, 294); }
                  break;
               case 294:
                  if (curChar == 42)
                     { jjCheckNAddStates(934, 936); }
                  break;
               case 295:
                  if (curChar == 47)
                     { jjCheckNAddStates(937, 939); }
                  break;
               case 296:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 297:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(937, 939); }
                  break;
               case 298:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(299, 300); }
                  break;
               case 299:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(299, 300); }
                  break;
               case 300:
                  if (curChar == 42)
                     { jjCheckNAddStates(940, 942); }
                  break;
               case 301:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(302, 303); }
                  break;
               case 302:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(302, 303); }
                  break;
               case 303:
                  if (curChar == 42)
                     { jjCheckNAddStates(943, 945); }
                  break;
               case 304:
                  if (curChar == 47)
                     { jjCheckNAddStates(946, 948); }
                  break;
               case 305:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 306:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(946, 948); }
                  break;
               case 307:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(308, 309); }
                  break;
               case 308:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(308, 309); }
                  break;
               case 309:
                  if (curChar == 42)
                     { jjCheckNAddStates(949, 951); }
                  break;
               case 310:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(311, 312); }
                  break;
               case 311:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(311, 312); }
                  break;
               case 312:
                  if (curChar == 42)
                     { jjCheckNAddStates(952, 954); }
                  break;
               case 313:
                  if (curChar == 47)
                     { jjCheckNAddStates(955, 957); }
                  break;
               case 314:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 315:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(955, 957); }
                  break;
               case 316:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 317:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 318:
                  if (curChar == 42)
                     { jjCheckNAddStates(958, 960); }
                  break;
               case 319:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(320, 321); }
                  break;
               case 320:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(320, 321); }
                  break;
               case 321:
                  if (curChar == 42)
                     { jjCheckNAddStates(961, 963); }
                  break;
               case 322:
                  if (curChar == 47)
                     { jjCheckNAddStates(964, 966); }
                  break;
               case 323:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 324:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(964, 966); }
                  break;
               case 325:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(326, 327); }
                  break;
               case 326:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(326, 327); }
                  break;
               case 327:
                  if (curChar == 42)
                     { jjCheckNAddStates(967, 969); }
                  break;
               case 328:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(329, 330); }
                  break;
               case 329:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(329, 330); }
                  break;
               case 330:
                  if (curChar == 42)
                     { jjCheckNAddStates(970, 972); }
                  break;
               case 331:
                  if (curChar == 47)
                     { jjCheckNAddStates(973, 975); }
                  break;
               case 332:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 333:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(973, 975); }
                  break;
               case 334:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(335, 336); }
                  break;
               case 335:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(335, 336); }
                  break;
               case 336:
                  if (curChar == 42)
                     { jjCheckNAddStates(976, 978); }
                  break;
               case 337:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 338:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 339:
                  if (curChar == 42)
                     { jjCheckNAddStates(979, 981); }
                  break;
               case 340:
                  if (curChar == 47)
                     { jjCheckNAddStates(982, 984); }
                  break;
               case 341:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 342:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(982, 984); }
                  break;
               case 344:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(345, 346); }
                  break;
               case 345:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(345, 346); }
                  break;
               case 346:
                  if (curChar == 42)
                     { jjCheckNAddStates(985, 987); }
                  break;
               case 347:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(348, 349); }
                  break;
               case 348:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(348, 349); }
                  break;
               case 349:
                  if (curChar == 42)
                     { jjCheckNAddStates(988, 990); }
                  break;
               case 350:
                  if (curChar == 47)
                     { jjCheckNAddStates(991, 993); }
                  break;
               case 351:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 352:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(991, 993); }
                  break;
               case 354:
                  if (curChar != 34)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(250, 254); }
                  break;
               case 355:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 356:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 358:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 359:
                  if (curChar == 10)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 360:
               case 363:
                  if (curChar == 13)
                     { jjCheckNAdd(359); }
                  break;
               case 361:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 362:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(997, 1002); }
                  break;
               case 364:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 365:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1003, 1011); }
                  break;
               case 366:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1012, 1016); }
                  break;
               case 367:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1017, 1022); }
                  break;
               case 368:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1023, 1029); }
                  break;
               case 369:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1030, 1037); }
                  break;
               case 370:
                  if ((0xfffffffbffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 372:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 373:
                  if (curChar != 10)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 374:
               case 377:
                  if (curChar == 13)
                     { jjCheckNAdd(373); }
                  break;
               case 375:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 376:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1038, 1042); }
                  break;
               case 378:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 379:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1043, 1050); }
                  break;
               case 380:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1051, 1054); }
                  break;
               case 381:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1055, 1059); }
                  break;
               case 382:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1060, 1065); }
                  break;
               case 383:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1066, 1072); }
                  break;
               case 384:
                  if (curChar != 39)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(245, 249); }
                  break;
               case 385:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 386:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 388:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 389:
                  if (curChar == 10)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 390:
               case 393:
                  if (curChar == 13)
                     { jjCheckNAdd(389); }
                  break;
               case 391:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 392:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1076, 1081); }
                  break;
               case 394:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 395:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1082, 1090); }
                  break;
               case 396:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1091, 1095); }
                  break;
               case 397:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1096, 1101); }
                  break;
               case 398:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1102, 1108); }
                  break;
               case 399:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1109, 1116); }
                  break;
               case 400:
                  if ((0xffffff7fffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 402:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 403:
                  if (curChar != 10)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 404:
               case 407:
                  if (curChar == 13)
                     { jjCheckNAdd(403); }
                  break;
               case 405:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 406:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1117, 1121); }
                  break;
               case 408:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 409:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1122, 1129); }
                  break;
               case 410:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1130, 1133); }
                  break;
               case 411:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1134, 1138); }
                  break;
               case 412:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1139, 1144); }
                  break;
               case 413:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1145, 1151); }
                  break;
               case 414:
                  if (curChar == 45)
                     { jjAddStates(240, 244); }
                  break;
               case 416:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 418:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 419:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1152, 1156); }
                  break;
               case 420:
                  if (curChar != 10)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 421:
               case 474:
                  if (curChar == 13)
                     { jjCheckNAdd(420); }
                  break;
               case 422:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 423:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1157, 1164); }
                  break;
               case 424:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1165, 1168); }
                  break;
               case 425:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1169, 1173); }
                  break;
               case 426:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1174, 1179); }
                  break;
               case 427:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1180, 1186); }
                  break;
               case 428:
                  if (curChar != 45)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjAddStates(1187, 1188); }
                  break;
               case 430:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 432:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 433:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1189, 1193); }
                  break;
               case 434:
                  if (curChar != 10)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 435:
               case 444:
                  if (curChar == 13)
                     { jjCheckNAdd(434); }
                  break;
               case 436:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 437:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1194, 1201); }
                  break;
               case 438:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1202, 1205); }
                  break;
               case 439:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1206, 1210); }
                  break;
               case 440:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1211, 1216); }
                  break;
               case 441:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1217, 1223); }
                  break;
               case 443:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1224, 1228); }
                  break;
               case 445:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1229, 1236); }
                  break;
               case 446:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1237, 1240); }
                  break;
               case 447:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1241, 1245); }
                  break;
               case 448:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1246, 1251); }
                  break;
               case 449:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1252, 1258); }
                  break;
               case 451:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 452:
                  if (curChar == 40 && kind > 143)
                     kind = 143;
                  break;
               case 454:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 455:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1262, 1267); }
                  break;
               case 456:
                  if (curChar == 10)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 457:
               case 466:
                  if (curChar == 13)
                     { jjCheckNAdd(456); }
                  break;
               case 458:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 459:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1268, 1276); }
                  break;
               case 460:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1277, 1281); }
                  break;
               case 461:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1282, 1287); }
                  break;
               case 462:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1288, 1294); }
                  break;
               case 463:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1295, 1302); }
                  break;
               case 465:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1303, 1308); }
                  break;
               case 467:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1309, 1317); }
                  break;
               case 468:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1318, 1322); }
                  break;
               case 469:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1323, 1328); }
                  break;
               case 470:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1329, 1335); }
                  break;
               case 471:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1336, 1343); }
                  break;
               case 473:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1344, 1348); }
                  break;
               case 475:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1349, 1356); }
                  break;
               case 476:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1357, 1360); }
                  break;
               case 477:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1361, 1365); }
                  break;
               case 478:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1366, 1371); }
                  break;
               case 479:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1372, 1378); }
                  break;
               case 481:
                  if (curChar == 35)
                     { jjCheckNAddStates(235, 239); }
                  break;
               case 482:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(483, 496); }
                  break;
               case 484:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 486:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 487:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1379, 1383); }
                  break;
               case 488:
                  if (curChar != 10)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 489:
               case 498:
                  if (curChar == 13)
                     { jjCheckNAdd(488); }
                  break;
               case 490:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 491:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1384, 1391); }
                  break;
               case 492:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1392, 1395); }
                  break;
               case 493:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1396, 1400); }
                  break;
               case 494:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1401, 1406); }
                  break;
               case 495:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1407, 1413); }
                  break;
               case 497:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1414, 1418); }
                  break;
               case 499:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1419, 1426); }
                  break;
               case 500:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1427, 1430); }
                  break;
               case 501:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1431, 1435); }
                  break;
               case 502:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1436, 1441); }
                  break;
               case 503:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1442, 1448); }
                  break;
               case 504:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 506:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 507:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1449, 1453); }
                  break;
               case 508:
                  if (curChar != 10)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 509:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 508;
                  break;
               case 510:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 511:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1454, 1461); }
                  break;
               case 512:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1462, 1465); }
                  break;
               case 513:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1466, 1470); }
                  break;
               case 514:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1471, 1476); }
                  break;
               case 515:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1477, 1483); }
                  break;
               case 517:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 518;
                  break;
               case 519:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjAddStates(1484, 1485); }
                  break;
               case 520:
                  if (curChar == 41 && kind > 44)
                     kind = 44;
                  break;
               case 530:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 529;
                  break;
               case 547:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 546;
                  break;
               case 556:
                  if (curChar == 40)
                     { jjCheckNAddStates(1486, 1491); }
                  break;
               case 557:
                  if (curChar == 34)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 558:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 559:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(560, 569); }
                  break;
               case 560:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1495, 1497); }
                  break;
               case 561:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 562:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 563:
                  if (curChar == 42)
                     { jjCheckNAddStates(1498, 1500); }
                  break;
               case 564:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(565, 566); }
                  break;
               case 565:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(565, 566); }
                  break;
               case 566:
                  if (curChar == 42)
                     { jjCheckNAddStates(1501, 1503); }
                  break;
               case 567:
                  if (curChar == 47)
                     { jjCheckNAddStates(1495, 1497); }
                  break;
               case 568:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 561;
                  break;
               case 569:
                  if (curChar == 41 && kind > 60)
                     kind = 60;
                  break;
               case 571:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 572:
                  if (curChar == 10)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 573:
               case 576:
                  if (curChar == 13)
                     { jjCheckNAdd(572); }
                  break;
               case 574:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 575:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1504, 1509); }
                  break;
               case 577:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 578:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1510, 1518); }
                  break;
               case 579:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1519, 1523); }
                  break;
               case 580:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1524, 1529); }
                  break;
               case 581:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1530, 1536); }
                  break;
               case 582:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1537, 1544); }
                  break;
               case 583:
                  if (curChar == 39)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 584:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 585:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(560, 569); }
                  break;
               case 587:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 588:
                  if (curChar == 10)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 589:
               case 592:
                  if (curChar == 13)
                     { jjCheckNAdd(588); }
                  break;
               case 590:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 591:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1548, 1553); }
                  break;
               case 593:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 594:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1554, 1562); }
                  break;
               case 595:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1563, 1567); }
                  break;
               case 596:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1568, 1573); }
                  break;
               case 597:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1574, 1580); }
                  break;
               case 598:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1581, 1588); }
                  break;
               case 599:
                  if ((0xfffffc7a00000000L & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 601:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 602:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1593, 1598); }
                  break;
               case 603:
                  if (curChar == 10)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 604:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 603;
                  break;
               case 605:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1599, 1604); }
                  break;
               case 606:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1605, 1613); }
                  break;
               case 607:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1614, 1618); }
                  break;
               case 608:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1619, 1624); }
                  break;
               case 609:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1625, 1631); }
                  break;
               case 610:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1632, 1639); }
                  break;
               case 611:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1640, 1648); }
                  break;
               case 612:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(613, 614); }
                  break;
               case 613:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(613, 614); }
                  break;
               case 614:
                  if (curChar == 42)
                     { jjCheckNAddStates(1649, 1651); }
                  break;
               case 615:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(616, 617); }
                  break;
               case 616:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(616, 617); }
                  break;
               case 617:
                  if (curChar == 42)
                     { jjCheckNAddStates(1652, 1654); }
                  break;
               case 618:
                  if (curChar == 47)
                     { jjCheckNAddStates(1655, 1661); }
                  break;
               case 619:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 612;
                  break;
               case 622:
                  if (curChar == 43)
                     { jjAddStates(1662, 1663); }
                  break;
               case 623:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 624;
                  break;
               case 624:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1664, 1667); }
                  break;
               case 625:
                  if (curChar == 63 && kind > 119)
                     kind = 119;
                  break;
               case 626:
               case 642:
               case 646:
               case 649:
               case 652:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(625); }
                  break;
               case 627:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(625, 626); }
                  break;
               case 628:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1668, 1670); }
                  break;
               case 629:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjAddStates(1671, 1676); }
                  break;
               case 630:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 631;
                  break;
               case 631:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 632;
                  break;
               case 632:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 633;
                  break;
               case 633:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(634); }
                  break;
               case 634:
                  if ((0x3ff000000000000L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 635:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 636;
                  break;
               case 636:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 637;
                  break;
               case 637:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 638;
                  break;
               case 638:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(625); }
                  break;
               case 639:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 640;
                  break;
               case 640:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 641;
                  break;
               case 641:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 642;
                  break;
               case 643:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 644;
                  break;
               case 644:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 645;
                  break;
               case 645:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(625, 646); }
                  break;
               case 647:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 648;
                  break;
               case 648:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1677, 1679); }
                  break;
               case 650:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(625, 649); }
                  break;
               case 651:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1680, 1683); }
                  break;
               case 653:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(625, 652); }
                  break;
               case 654:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1684, 1686); }
                  break;
               case 655:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 656;
                  break;
               case 656:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(657, 663); }
                  break;
               case 657:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 658;
                  break;
               case 658:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 659;
                  break;
               case 659:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1687, 1690); }
                  break;
               case 660:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(634); }
                  break;
               case 661:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 660); }
                  break;
               case 662:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1691, 1693); }
                  break;
               case 663:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1694, 1698); }
                  break;
               case 664:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(657); }
                  break;
               case 665:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(664, 657); }
                  break;
               case 666:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1699, 1701); }
                  break;
               case 667:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1702, 1705); }
                  break;
               case 668:
                  if (curChar == 46)
                     { jjCheckNAddStates(204, 234); }
                  break;
               case 669:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1706, 1709); }
                  break;
               case 671:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(672); }
                  break;
               case 672:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1710, 1712); }
                  break;
               case 676:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1713, 1716); }
                  break;
               case 678:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(679); }
                  break;
               case 679:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1717, 1719); }
                  break;
               case 683:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1720, 1723); }
                  break;
               case 685:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(686); }
                  break;
               case 686:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1724, 1726); }
                  break;
               case 691:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1727, 1730); }
                  break;
               case 693:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(694); }
                  break;
               case 694:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1731, 1733); }
                  break;
               case 698:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1734, 1737); }
                  break;
               case 700:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(701); }
                  break;
               case 701:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1738, 1740); }
                  break;
               case 705:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1741, 1744); }
                  break;
               case 707:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(708); }
                  break;
               case 708:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1745, 1747); }
                  break;
               case 711:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1748, 1751); }
                  break;
               case 713:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(714); }
                  break;
               case 714:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1752, 1754); }
                  break;
               case 718:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1755, 1758); }
                  break;
               case 720:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(721); }
                  break;
               case 721:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1759, 1761); }
                  break;
               case 725:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1762, 1765); }
                  break;
               case 727:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(728); }
                  break;
               case 728:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1766, 1768); }
                  break;
               case 732:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1769, 1772); }
                  break;
               case 734:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(735); }
                  break;
               case 735:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1773, 1775); }
                  break;
               case 739:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1776, 1779); }
                  break;
               case 741:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(742); }
                  break;
               case 742:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1780, 1782); }
                  break;
               case 748:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1783, 1786); }
                  break;
               case 750:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(751); }
                  break;
               case 751:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1787, 1789); }
                  break;
               case 757:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1790, 1792); }
                  break;
               case 759:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(760); }
                  break;
               case 760:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(760, 762); }
                  break;
               case 763:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1793, 1795); }
                  break;
               case 765:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(766); }
                  break;
               case 766:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(766, 767); }
                  break;
               case 768:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1796, 1798); }
                  break;
               case 770:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(771); }
                  break;
               case 771:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(771, 772); }
                  break;
               case 773:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1799, 1801); }
                  break;
               case 775:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(776); }
                  break;
               case 776:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(776, 778); }
                  break;
               case 779:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1802, 1804); }
                  break;
               case 781:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(782); }
                  break;
               case 782:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(782, 784); }
                  break;
               case 785:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1805, 1807); }
                  break;
               case 787:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(788); }
                  break;
               case 788:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(788, 790); }
                  break;
               case 791:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1808, 1810); }
                  break;
               case 793:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(794); }
                  break;
               case 794:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(794, 796); }
                  break;
               case 797:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1811, 1813); }
                  break;
               case 799:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(800); }
                  break;
               case 800:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(800, 802); }
                  break;
               case 803:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1814, 1819); }
                  break;
               case 805:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(806); }
                  break;
               case 806:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1820, 1824); }
                  break;
               case 820:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1825, 1827); }
                  break;
               case 822:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(823); }
                  break;
               case 823:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(823, 825); }
                  break;
               case 826:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1828, 1830); }
                  break;
               case 828:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(829); }
                  break;
               case 829:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(829, 831); }
                  break;
               case 832:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1831, 1834); }
                  break;
               case 834:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(835); }
                  break;
               case 835:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1835, 1837); }
                  break;
               case 839:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1838, 1841); }
                  break;
               case 841:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(842); }
                  break;
               case 842:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1842, 1844); }
                  break;
               case 847:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1845, 1848); }
                  break;
               case 849:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(850); }
                  break;
               case 850:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1849, 1851); }
                  break;
               case 861:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1852, 1854); }
                  break;
               case 863:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(864); }
                  break;
               case 864:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(864, 865); }
                  break;
               case 866:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1855, 1858); }
                  break;
               case 868:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(869); }
                  break;
               case 869:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1859, 1861); }
                  break;
               case 871:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 872:
                  if (curChar == 57 && kind > 72)
                     kind = 72;
                  break;
               case 875:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 876:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1865, 1870); }
                  break;
               case 877:
                  if (curChar == 10)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 878:
               case 887:
                  if (curChar == 13)
                     { jjCheckNAdd(877); }
                  break;
               case 879:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 880:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1871, 1879); }
                  break;
               case 881:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1880, 1884); }
                  break;
               case 882:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1885, 1890); }
                  break;
               case 883:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1891, 1897); }
                  break;
               case 884:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1898, 1905); }
                  break;
               case 886:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1906, 1911); }
                  break;
               case 888:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1912, 1920); }
                  break;
               case 889:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1921, 1925); }
                  break;
               case 890:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1926, 1931); }
                  break;
               case 891:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1932, 1938); }
                  break;
               case 892:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1939, 1946); }
                  break;
               case 893:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1947, 1950); }
                  break;
               case 895:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(896); }
                  break;
               case 896:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1951, 1953); }
                  break;
               case 898:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 900:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 901:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1954, 1958); }
                  break;
               case 902:
                  if (curChar != 10)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 903:
               case 912:
                  if (curChar == 13)
                     { jjCheckNAdd(902); }
                  break;
               case 904:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 905:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1959, 1966); }
                  break;
               case 906:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1967, 1970); }
                  break;
               case 907:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1971, 1975); }
                  break;
               case 908:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1976, 1981); }
                  break;
               case 909:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1982, 1988); }
                  break;
               case 911:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1989, 1993); }
                  break;
               case 913:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1994, 2001); }
                  break;
               case 914:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2002, 2005); }
                  break;
               case 915:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2006, 2010); }
                  break;
               case 916:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2011, 2016); }
                  break;
               case 917:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2017, 2023); }
                  break;
               case 918:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2024, 2026); }
                  break;
               case 920:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(921); }
                  break;
               case 921:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(921, 922); }
                  break;
               case 922:
                  if (curChar == 37 && kind > 74)
                     kind = 74;
                  break;
               case 923:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddTwoStates(923, 924); }
                  break;
               case 925:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(926); }
                  break;
               case 926:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(926); }
                  break;
               case 927:
                  if (curChar == 33)
                     { jjCheckNAddStates(200, 203); }
                  break;
               case 928:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2027, 2029); }
                  break;
               case 929:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(930, 931); }
                  break;
               case 930:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(930, 931); }
                  break;
               case 931:
                  if (curChar == 42)
                     { jjCheckNAddStates(2030, 2032); }
                  break;
               case 932:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(933, 934); }
                  break;
               case 933:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(933, 934); }
                  break;
               case 934:
                  if (curChar == 42)
                     { jjCheckNAddStates(2033, 2035); }
                  break;
               case 935:
                  if (curChar == 47)
                     { jjCheckNAddStates(2027, 2029); }
                  break;
               case 936:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 929;
                  break;
               case 946:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2036, 2038); }
                  break;
               case 947:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(948, 949); }
                  break;
               case 948:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(948, 949); }
                  break;
               case 949:
                  if (curChar == 42)
                     { jjCheckNAddStates(2039, 2041); }
                  break;
               case 950:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(951, 952); }
                  break;
               case 951:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(951, 952); }
                  break;
               case 952:
                  if (curChar == 42)
                     { jjCheckNAddStates(2042, 2044); }
                  break;
               case 953:
                  if (curChar == 47)
                     { jjCheckNAddStates(2036, 2038); }
                  break;
               case 954:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 947;
                  break;
               case 956:
                  if ((0x280000000000000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 983:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 988:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddStates(0, 173); }
                  break;
               case 989:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2045, 2048); }
                  break;
               case 990:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(990, 991); }
                  break;
               case 991:
                  if (curChar == 46)
                     { jjCheckNAdd(669); }
                  break;
               case 992:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2049, 2052); }
                  break;
               case 993:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(993, 994); }
                  break;
               case 994:
                  if (curChar == 46)
                     { jjCheckNAdd(676); }
                  break;
               case 995:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2053, 2056); }
                  break;
               case 996:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(996, 997); }
                  break;
               case 997:
                  if (curChar == 46)
                     { jjCheckNAdd(683); }
                  break;
               case 998:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2057, 2060); }
                  break;
               case 999:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(999, 1000); }
                  break;
               case 1000:
                  if (curChar == 46)
                     { jjCheckNAdd(691); }
                  break;
               case 1001:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2061, 2064); }
                  break;
               case 1002:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1002, 1003); }
                  break;
               case 1003:
                  if (curChar == 46)
                     { jjCheckNAdd(698); }
                  break;
               case 1004:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2065, 2068); }
                  break;
               case 1005:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1005, 1006); }
                  break;
               case 1006:
                  if (curChar == 46)
                     { jjCheckNAdd(705); }
                  break;
               case 1007:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2069, 2072); }
                  break;
               case 1008:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1008, 1009); }
                  break;
               case 1009:
                  if (curChar == 46)
                     { jjCheckNAdd(711); }
                  break;
               case 1010:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2073, 2076); }
                  break;
               case 1011:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1011, 1012); }
                  break;
               case 1012:
                  if (curChar == 46)
                     { jjCheckNAdd(718); }
                  break;
               case 1013:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2077, 2080); }
                  break;
               case 1014:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1014, 1015); }
                  break;
               case 1015:
                  if (curChar == 46)
                     { jjCheckNAdd(725); }
                  break;
               case 1016:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2081, 2084); }
                  break;
               case 1017:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1017, 1018); }
                  break;
               case 1018:
                  if (curChar == 46)
                     { jjCheckNAdd(732); }
                  break;
               case 1019:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2085, 2088); }
                  break;
               case 1020:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1020, 1021); }
                  break;
               case 1021:
                  if (curChar == 46)
                     { jjCheckNAdd(739); }
                  break;
               case 1022:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2089, 2092); }
                  break;
               case 1023:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1023, 1024); }
                  break;
               case 1024:
                  if (curChar == 46)
                     { jjCheckNAdd(748); }
                  break;
               case 1025:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2093, 2095); }
                  break;
               case 1026:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1026, 1027); }
                  break;
               case 1027:
                  if (curChar == 46)
                     { jjCheckNAdd(757); }
                  break;
               case 1028:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2096, 2098); }
                  break;
               case 1029:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1029, 1030); }
                  break;
               case 1030:
                  if (curChar == 46)
                     { jjCheckNAdd(763); }
                  break;
               case 1031:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2099, 2101); }
                  break;
               case 1032:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1032, 1033); }
                  break;
               case 1033:
                  if (curChar == 46)
                     { jjCheckNAdd(768); }
                  break;
               case 1034:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2102, 2104); }
                  break;
               case 1035:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1035, 1036); }
                  break;
               case 1036:
                  if (curChar == 46)
                     { jjCheckNAdd(773); }
                  break;
               case 1037:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2105, 2107); }
                  break;
               case 1038:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1038, 1039); }
                  break;
               case 1039:
                  if (curChar == 46)
                     { jjCheckNAdd(779); }
                  break;
               case 1040:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2108, 2110); }
                  break;
               case 1041:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1041, 1042); }
                  break;
               case 1042:
                  if (curChar == 46)
                     { jjCheckNAdd(785); }
                  break;
               case 1043:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2111, 2113); }
                  break;
               case 1044:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1044, 1045); }
                  break;
               case 1045:
                  if (curChar == 46)
                     { jjCheckNAdd(791); }
                  break;
               case 1046:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2114, 2116); }
                  break;
               case 1047:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1047, 1048); }
                  break;
               case 1048:
                  if (curChar == 46)
                     { jjCheckNAdd(797); }
                  break;
               case 1049:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2117, 2122); }
                  break;
               case 1050:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1050, 1051); }
                  break;
               case 1051:
                  if (curChar == 46)
                     { jjCheckNAdd(803); }
                  break;
               case 1052:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2123, 2125); }
                  break;
               case 1053:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1053, 1054); }
                  break;
               case 1054:
                  if (curChar == 46)
                     { jjCheckNAdd(820); }
                  break;
               case 1055:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2126, 2128); }
                  break;
               case 1056:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1056, 1057); }
                  break;
               case 1057:
                  if (curChar == 46)
                     { jjCheckNAdd(826); }
                  break;
               case 1058:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2129, 2132); }
                  break;
               case 1059:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1059, 1060); }
                  break;
               case 1060:
                  if (curChar == 46)
                     { jjCheckNAdd(832); }
                  break;
               case 1061:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2133, 2136); }
                  break;
               case 1062:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1062, 1063); }
                  break;
               case 1063:
                  if (curChar == 46)
                     { jjCheckNAdd(839); }
                  break;
               case 1064:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2137, 2140); }
                  break;
               case 1065:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1065, 1066); }
                  break;
               case 1066:
                  if (curChar == 46)
                     { jjCheckNAdd(847); }
                  break;
               case 1067:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2141, 2143); }
                  break;
               case 1068:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1068, 1069); }
                  break;
               case 1069:
                  if (curChar == 46)
                     { jjCheckNAdd(861); }
                  break;
               case 1070:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2144, 2147); }
                  break;
               case 1071:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1071, 1072); }
                  break;
               case 1072:
                  if (curChar == 46)
                     { jjCheckNAdd(866); }
                  break;
               case 1073:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2148, 2151); }
                  break;
               case 1074:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1074, 1075); }
                  break;
               case 1075:
                  if (curChar == 46)
                     { jjCheckNAdd(893); }
                  break;
               case 1076:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2152, 2154); }
                  break;
               case 1077:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1077, 1078); }
                  break;
               case 1078:
                  if (curChar == 46)
                     { jjCheckNAdd(918); }
                  break;
               case 1079:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddTwoStates(1079, 924); }
                  break;
               case 1080:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1080, 1081); }
                  break;
               case 1081:
                  if (curChar == 46)
                     { jjCheckNAdd(923); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAddStates(2155, 2159); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(2160, 2163); }
                  else if (curChar == 126)
                  {
                     if (kind > 33)
                        kind = 33;
                     { jjCheckNAdd(288); }
                  }
                  else if (curChar == 64)
                     { jjAddStates(2164, 2166); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 123)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(2167, 2171); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(2172, 2174); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(2175, 2176); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2177, 2179); }
                  else if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(2180, 2181); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(2182, 2184); }
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 1:
                  { jjAddStates(2185, 2186); }
                  break;
               case 3:
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 8:
                  if (curChar == 123 && kind > 27)
                     kind = 27;
                  break;
               case 14:
                  if (curChar == 124 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 64)
                     { jjAddStates(2164, 2166); }
                  break;
               case 18:
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 21:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(270, 274); }
                  break;
               case 26:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(275, 282); }
                  break;
               case 27:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(283, 286); }
                  break;
               case 28:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(287, 291); }
                  break;
               case 29:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(292, 297); }
                  break;
               case 30:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(298, 304); }
                  break;
               case 31:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(21, 32); }
                  break;
               case 32:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(305, 309); }
                  break;
               case 34:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(310, 317); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(318, 321); }
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(322, 326); }
                  break;
               case 37:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(327, 332); }
                  break;
               case 38:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(333, 339); }
                  break;
               case 40:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 41:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
               case 239:
               case 244:
               case 972:
               case 978:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 47:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 50:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x8000000080L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 57:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2187, 2190); }
                  break;
               case 63:
                  { jjAddStates(2191, 2192); }
                  break;
               case 65:
               case 66:
                  { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 71:
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 75:
                  { jjAddStates(2193, 2194); }
                  break;
               case 77:
               case 78:
                  { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 83:
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 87:
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 91:
                  { jjAddStates(2195, 2196); }
                  break;
               case 93:
               case 94:
                  { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 99:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(100, 111); }
                  break;
               case 100:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 101:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(100, 102); }
                  break;
               case 102:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(395, 400); }
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(401, 409); }
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(410, 414); }
                  break;
               case 108:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(415, 420); }
                  break;
               case 109:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(421, 427); }
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(428, 435); }
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(436, 441); }
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(442, 450); }
                  break;
               case 114:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(451, 455); }
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(456, 461); }
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(462, 468); }
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(469, 476); }
                  break;
               case 118:
                  if (curChar == 92)
                     { jjCheckNAddStates(2197, 2200); }
                  break;
               case 119:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(477, 484); }
                  break;
               case 124:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(494, 504); }
                  break;
               case 125:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(505, 511); }
                  break;
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(512, 519); }
                  break;
               case 127:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(520, 528); }
                  break;
               case 128:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(529, 538); }
                  break;
               case 129:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(119, 130); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(539, 546); }
                  break;
               case 132:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(547, 557); }
                  break;
               case 133:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(558, 564); }
                  break;
               case 134:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(565, 572); }
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(573, 581); }
                  break;
               case 136:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(582, 591); }
                  break;
               case 138:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 140:
                  if (curChar == 92)
                     { jjAddStates(2201, 2204); }
                  break;
               case 144:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 145:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(600, 605); }
                  break;
               case 148:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(606, 614); }
                  break;
               case 149:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(615, 619); }
                  break;
               case 150:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(620, 625); }
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(626, 632); }
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(633, 640); }
                  break;
               case 154:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 156:
                  if (curChar == 92)
                     { jjAddStates(2205, 2208); }
                  break;
               case 160:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 161:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(644, 649); }
                  break;
               case 164:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(650, 658); }
                  break;
               case 165:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(659, 663); }
                  break;
               case 166:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(664, 669); }
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(670, 676); }
                  break;
               case 168:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(677, 684); }
                  break;
               case 169:
                  if (curChar == 92)
                     { jjCheckNAddStates(2209, 2212); }
                  break;
               case 170:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 171:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(685, 692); }
                  break;
               case 175:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(702, 712); }
                  break;
               case 176:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(713, 719); }
                  break;
               case 177:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(720, 727); }
                  break;
               case 178:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(728, 736); }
                  break;
               case 179:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(737, 746); }
                  break;
               case 180:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(170, 181); }
                  break;
               case 181:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(747, 754); }
                  break;
               case 183:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(755, 765); }
                  break;
               case 184:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(766, 772); }
                  break;
               case 185:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(773, 780); }
                  break;
               case 186:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(781, 789); }
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(790, 799); }
                  break;
               case 188:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 189:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 198:
                  { jjAddStates(2213, 2214); }
                  break;
               case 200:
               case 201:
                  { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 206:
               case 207:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 210:
                  { jjAddStates(2215, 2216); }
                  break;
               case 212:
               case 213:
                  { jjCheckNAddTwoStates(213, 214); }
                  break;
               case 218:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(219, 220); }
                  break;
               case 219:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 220:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(828, 833); }
                  break;
               case 224:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(840, 848); }
                  break;
               case 225:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(849, 853); }
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(854, 859); }
                  break;
               case 227:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(860, 866); }
                  break;
               case 228:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(867, 874); }
                  break;
               case 229:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(219, 230); }
                  break;
               case 230:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(875, 880); }
                  break;
               case 232:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(881, 889); }
                  break;
               case 233:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(890, 894); }
                  break;
               case 234:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(895, 900); }
                  break;
               case 235:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(901, 907); }
                  break;
               case 236:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(908, 915); }
                  break;
               case 238:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(2182, 2184); }
                  break;
               case 240:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 242:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 245:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 249:
               case 257:
               case 959:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(248); }
                  break;
               case 250:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 254:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 258:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 262:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 270:
                  { jjAddStates(2217, 2218); }
                  break;
               case 272:
               case 273:
                  { jjCheckNAddTwoStates(273, 274); }
                  break;
               case 279:
                  { jjAddStates(2219, 2220); }
                  break;
               case 281:
               case 282:
                  { jjCheckNAddTwoStates(282, 283); }
                  break;
               case 287:
                  if (curChar == 126)
                     { jjCheckNAdd(288); }
                  break;
               case 290:
                  { jjAddStates(2221, 2222); }
                  break;
               case 292:
               case 293:
                  { jjCheckNAddTwoStates(293, 294); }
                  break;
               case 299:
                  { jjAddStates(2223, 2224); }
                  break;
               case 301:
               case 302:
                  { jjCheckNAddTwoStates(302, 303); }
                  break;
               case 308:
                  { jjAddStates(2225, 2226); }
                  break;
               case 310:
               case 311:
                  { jjCheckNAddTwoStates(311, 312); }
                  break;
               case 317:
                  { jjAddStates(2227, 2228); }
                  break;
               case 319:
               case 320:
                  { jjCheckNAddTwoStates(320, 321); }
                  break;
               case 326:
                  { jjAddStates(2229, 2230); }
                  break;
               case 328:
               case 329:
                  { jjCheckNAddTwoStates(329, 330); }
                  break;
               case 335:
                  { jjAddStates(2231, 2232); }
                  break;
               case 337:
               case 338:
                  { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 343:
                  if (curChar == 126 && kind > 33)
                     kind = 33;
                  break;
               case 345:
                  { jjAddStates(2233, 2234); }
                  break;
               case 347:
               case 348:
                  { jjCheckNAddTwoStates(348, 349); }
                  break;
               case 353:
                  if (curChar != 126)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(288); }
                  break;
               case 355:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 357:
                  if (curChar == 92)
                     { jjAddStates(2235, 2238); }
                  break;
               case 361:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 362:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(997, 1002); }
                  break;
               case 365:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1003, 1011); }
                  break;
               case 366:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1012, 1016); }
                  break;
               case 367:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1017, 1022); }
                  break;
               case 368:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1023, 1029); }
                  break;
               case 369:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1030, 1037); }
                  break;
               case 370:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 371:
                  if (curChar == 92)
                     { jjAddStates(2239, 2242); }
                  break;
               case 375:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 376:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1038, 1042); }
                  break;
               case 379:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1043, 1050); }
                  break;
               case 380:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1051, 1054); }
                  break;
               case 381:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1055, 1059); }
                  break;
               case 382:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1060, 1065); }
                  break;
               case 383:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1066, 1072); }
                  break;
               case 385:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 387:
                  if (curChar == 92)
                     { jjAddStates(2243, 2246); }
                  break;
               case 391:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 392:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1076, 1081); }
                  break;
               case 395:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1082, 1090); }
                  break;
               case 396:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1091, 1095); }
                  break;
               case 397:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1096, 1101); }
                  break;
               case 398:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1102, 1108); }
                  break;
               case 399:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1109, 1116); }
                  break;
               case 400:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 401:
                  if (curChar == 92)
                     { jjAddStates(2247, 2250); }
                  break;
               case 405:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 406:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1117, 1121); }
                  break;
               case 409:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1122, 1129); }
                  break;
               case 410:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1130, 1133); }
                  break;
               case 411:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1134, 1138); }
                  break;
               case 412:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1139, 1144); }
                  break;
               case 413:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1145, 1151); }
                  break;
               case 415:
               case 416:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 417:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 418:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 419:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1152, 1156); }
                  break;
               case 423:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1157, 1164); }
                  break;
               case 424:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1165, 1168); }
                  break;
               case 425:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1169, 1173); }
                  break;
               case 426:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1174, 1179); }
                  break;
               case 427:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1180, 1186); }
                  break;
               case 429:
               case 430:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 431:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(432, 433); }
                  break;
               case 432:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 433:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1189, 1193); }
                  break;
               case 437:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1194, 1201); }
                  break;
               case 438:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1202, 1205); }
                  break;
               case 439:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1206, 1210); }
                  break;
               case 440:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1211, 1216); }
                  break;
               case 441:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1217, 1223); }
                  break;
               case 442:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(432, 443); }
                  break;
               case 443:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1224, 1228); }
                  break;
               case 445:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1229, 1236); }
                  break;
               case 446:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1237, 1240); }
                  break;
               case 447:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1241, 1245); }
                  break;
               case 448:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1246, 1251); }
                  break;
               case 449:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1252, 1258); }
                  break;
               case 450:
               case 451:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 453:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(454, 455); }
                  break;
               case 454:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 455:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1262, 1267); }
                  break;
               case 459:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1268, 1276); }
                  break;
               case 460:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1277, 1281); }
                  break;
               case 461:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1282, 1287); }
                  break;
               case 462:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1288, 1294); }
                  break;
               case 463:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1295, 1302); }
                  break;
               case 464:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(454, 465); }
                  break;
               case 465:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1303, 1308); }
                  break;
               case 467:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1309, 1317); }
                  break;
               case 468:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1318, 1322); }
                  break;
               case 469:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1323, 1328); }
                  break;
               case 470:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1329, 1335); }
                  break;
               case 471:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1336, 1343); }
                  break;
               case 472:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(418, 473); }
                  break;
               case 473:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1344, 1348); }
                  break;
               case 475:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1349, 1356); }
                  break;
               case 476:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1357, 1360); }
                  break;
               case 477:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1361, 1365); }
                  break;
               case 478:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1366, 1371); }
                  break;
               case 479:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1372, 1378); }
                  break;
               case 480:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(2155, 2159); }
                  break;
               case 483:
               case 484:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 485:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(486, 487); }
                  break;
               case 486:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 487:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1379, 1383); }
                  break;
               case 491:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1384, 1391); }
                  break;
               case 492:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1392, 1395); }
                  break;
               case 493:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1396, 1400); }
                  break;
               case 494:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1401, 1406); }
                  break;
               case 495:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1407, 1413); }
                  break;
               case 496:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(486, 497); }
                  break;
               case 497:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1414, 1418); }
                  break;
               case 499:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1419, 1426); }
                  break;
               case 500:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1427, 1430); }
                  break;
               case 501:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1431, 1435); }
                  break;
               case 502:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1436, 1441); }
                  break;
               case 503:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1442, 1448); }
                  break;
               case 504:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 505:
                  if (curChar == 92)
                     { jjAddStates(2251, 2252); }
                  break;
               case 506:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 507:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1449, 1453); }
                  break;
               case 511:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1454, 1461); }
                  break;
               case 512:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1462, 1465); }
                  break;
               case 513:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1466, 1470); }
                  break;
               case 514:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1471, 1476); }
                  break;
               case 515:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1477, 1483); }
                  break;
               case 516:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(2180, 2181); }
                  break;
               case 518:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(518, 519); }
                  break;
               case 519:
                  { jjCheckNAddTwoStates(519, 520); }
                  break;
               case 521:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 517;
                  break;
               case 522:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 521;
                  break;
               case 523:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 522;
                  break;
               case 524:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 523;
                  break;
               case 525:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 524;
                  break;
               case 526:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 525;
                  break;
               case 527:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 526;
                  break;
               case 528:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 527;
                  break;
               case 529:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 528;
                  break;
               case 531:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 530;
                  break;
               case 532:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 533:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 532;
                  break;
               case 534:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 535:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 536:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 535;
                  break;
               case 537:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 536;
                  break;
               case 538:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 539:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 538;
                  break;
               case 540:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 539;
                  break;
               case 541:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 540;
                  break;
               case 542:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 543:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 542;
                  break;
               case 544:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 543;
                  break;
               case 545:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 544;
                  break;
               case 546:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 545;
                  break;
               case 548:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 547;
                  break;
               case 549:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 548;
                  break;
               case 550:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 551:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 550;
                  break;
               case 552:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 553:
                  if ((0x80000000800000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 554:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 553;
                  break;
               case 555:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2177, 2179); }
                  break;
               case 558:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 562:
                  { jjAddStates(2253, 2254); }
                  break;
               case 564:
               case 565:
                  { jjCheckNAddTwoStates(565, 566); }
                  break;
               case 570:
                  if (curChar == 92)
                     { jjAddStates(2255, 2258); }
                  break;
               case 574:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 575:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1504, 1509); }
                  break;
               case 578:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1510, 1518); }
                  break;
               case 579:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1519, 1523); }
                  break;
               case 580:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1524, 1529); }
                  break;
               case 581:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1530, 1536); }
                  break;
               case 582:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1537, 1544); }
                  break;
               case 584:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 586:
                  if (curChar == 92)
                     { jjAddStates(2259, 2262); }
                  break;
               case 590:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 591:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1548, 1553); }
                  break;
               case 594:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1554, 1562); }
                  break;
               case 595:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1563, 1567); }
                  break;
               case 596:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1568, 1573); }
                  break;
               case 597:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1574, 1580); }
                  break;
               case 598:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1581, 1588); }
                  break;
               case 599:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 600:
                  if (curChar == 92)
                     { jjAddStates(2263, 2264); }
                  break;
               case 601:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 602:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1593, 1598); }
                  break;
               case 606:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1605, 1613); }
                  break;
               case 607:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1614, 1618); }
                  break;
               case 608:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1619, 1624); }
                  break;
               case 609:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1625, 1631); }
                  break;
               case 610:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1632, 1639); }
                  break;
               case 613:
                  { jjAddStates(2265, 2266); }
                  break;
               case 615:
               case 616:
                  { jjCheckNAddTwoStates(616, 617); }
                  break;
               case 620:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 556;
                  break;
               case 621:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 620;
                  break;
               case 629:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjAddStates(1671, 1676); }
                  break;
               case 630:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 631;
                  break;
               case 631:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 632;
                  break;
               case 632:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 633;
                  break;
               case 633:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(634); }
                  break;
               case 634:
                  if ((0x7e0000007eL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 635:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 636;
                  break;
               case 636:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 637;
                  break;
               case 637:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 638;
                  break;
               case 638:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 625;
                  break;
               case 639:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 640;
                  break;
               case 640:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 641;
                  break;
               case 641:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 642;
                  break;
               case 643:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 644;
                  break;
               case 644:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 645;
                  break;
               case 647:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 648;
                  break;
               case 656:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(657, 663); }
                  break;
               case 658:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 659;
                  break;
               case 659:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1687, 1690); }
                  break;
               case 660:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(634); }
                  break;
               case 661:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 660); }
                  break;
               case 662:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1691, 1693); }
                  break;
               case 663:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1694, 1698); }
                  break;
               case 664:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(657); }
                  break;
               case 665:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(664, 657); }
                  break;
               case 666:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1699, 1701); }
                  break;
               case 667:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1702, 1705); }
                  break;
               case 670:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2267, 2268); }
                  break;
               case 673:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 675;
                  break;
               case 674:
                  if ((0x200000002000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 675:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 674;
                  break;
               case 677:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2269, 2270); }
                  break;
               case 680:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 682;
                  break;
               case 681:
                  if ((0x100000001000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 682:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 681;
                  break;
               case 684:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2271, 2272); }
                  break;
               case 687:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 690;
                  break;
               case 688:
                  if ((0x1000000010000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 689:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 688;
                  break;
               case 690:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 689;
                  break;
               case 692:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2273, 2274); }
                  break;
               case 695:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 697;
                  break;
               case 696:
                  if ((0x10000000100L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 697:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(696); }
                  break;
               case 699:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2275, 2276); }
                  break;
               case 702:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 704;
                  break;
               case 703:
                  if ((0x800000008L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 704:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 703;
                  break;
               case 706:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2277, 2278); }
                  break;
               case 709:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 710;
                  break;
               case 710:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(696); }
                  break;
               case 712:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2279, 2280); }
                  break;
               case 715:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 717;
                  break;
               case 716:
                  if ((0x80000000800000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 717:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 716;
                  break;
               case 719:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2281, 2282); }
                  break;
               case 722:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 724;
                  break;
               case 723:
                  if ((0x10000000100L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 724:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 723;
                  break;
               case 726:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2283, 2284); }
                  break;
               case 729:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 731;
                  break;
               case 730:
                  if ((0x20000000200L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 731:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 730;
                  break;
               case 733:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2285, 2286); }
                  break;
               case 736:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 738;
                  break;
               case 737:
                  if ((0x400000004L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 738:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 737;
                  break;
               case 740:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2287, 2288); }
                  break;
               case 743:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 747;
                  break;
               case 744:
                  if ((0x400000004000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 745:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 744;
                  break;
               case 746:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 745;
                  break;
               case 747:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 746;
                  break;
               case 749:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2289, 2290); }
                  break;
               case 752:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 756;
                  break;
               case 753:
                  if ((0x100000001000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 754:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 753;
                  break;
               case 755:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 754;
                  break;
               case 756:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 755;
                  break;
               case 758:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2291, 2292); }
                  break;
               case 761:
                  if ((0x200000002000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 762:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(761); }
                  break;
               case 764:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2293, 2294); }
                  break;
               case 767:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(761); }
                  break;
               case 769:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2295, 2296); }
                  break;
               case 772:
                  if ((0x2000000020000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 774:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2297, 2298); }
                  break;
               case 777:
                  if ((0x400000004000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 778:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 777;
                  break;
               case 780:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2299, 2300); }
                  break;
               case 783:
                  if ((0x10000000100000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 784:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 783;
                  break;
               case 786:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2301, 2302); }
                  break;
               case 789:
                  if ((0x800000008L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 790:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 789;
                  break;
               case 792:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2303, 2304); }
                  break;
               case 795:
                  if ((0x100000001000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 796:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 795;
                  break;
               case 798:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2305, 2306); }
                  break;
               case 801:
                  if ((0x4000000040000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 802:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 801;
                  break;
               case 804:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2307, 2308); }
                  break;
               case 807:
                  if ((0x8000000080L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 808:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 807;
                  break;
               case 809:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 808;
                  break;
               case 810:
                  if ((0x1000000010L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 811:
               case 814:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(810); }
                  break;
               case 812:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 811;
                  break;
               case 813:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 812;
                  break;
               case 815:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 814;
                  break;
               case 816:
                  if ((0x400000004000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 817:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 816;
                  break;
               case 818:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 817;
                  break;
               case 819:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 818;
                  break;
               case 821:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2309, 2310); }
                  break;
               case 824:
                  if ((0x400000004L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 825:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 824;
                  break;
               case 827:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2311, 2312); }
                  break;
               case 830:
                  if ((0x10000000100000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 831:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 830;
                  break;
               case 833:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2313, 2314); }
                  break;
               case 836:
               case 838:
                  if ((0x8000000080000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 837:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 836;
                  break;
               case 840:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2315, 2316); }
                  break;
               case 843:
                  if ((0x400000004000000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 844:
               case 845:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(843); }
                  break;
               case 846:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 845;
                  break;
               case 848:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2317, 2318); }
                  break;
               case 851:
               case 858:
                  if ((0x100000001000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 852:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(2319, 2321); }
                  break;
               case 853:
                  if ((0x20000000200L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 854:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 853;
                  break;
               case 855:
                  if ((0x200000002000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 856:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 855;
                  break;
               case 857:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 856;
                  break;
               case 859:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 858;
                  break;
               case 860:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 859;
                  break;
               case 862:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2322, 2323); }
                  break;
               case 865:
                  if ((0x400000004000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 867:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2324, 2325); }
                  break;
               case 870:
               case 871:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 873:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 872;
                  break;
               case 874:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(875, 876); }
                  break;
               case 875:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 876:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1865, 1870); }
                  break;
               case 880:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1871, 1879); }
                  break;
               case 881:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1880, 1884); }
                  break;
               case 882:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1885, 1890); }
                  break;
               case 883:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1891, 1897); }
                  break;
               case 884:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1898, 1905); }
                  break;
               case 885:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(875, 886); }
                  break;
               case 886:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1906, 1911); }
                  break;
               case 888:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1912, 1920); }
                  break;
               case 889:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1921, 1925); }
                  break;
               case 890:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1926, 1931); }
                  break;
               case 891:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1932, 1938); }
                  break;
               case 892:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1939, 1946); }
                  break;
               case 894:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2326, 2327); }
                  break;
               case 897:
               case 898:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 899:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(900, 901); }
                  break;
               case 900:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 901:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1954, 1958); }
                  break;
               case 905:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1959, 1966); }
                  break;
               case 906:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1967, 1970); }
                  break;
               case 907:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1971, 1975); }
                  break;
               case 908:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1976, 1981); }
                  break;
               case 909:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1982, 1988); }
                  break;
               case 910:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(900, 911); }
                  break;
               case 911:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1989, 1993); }
                  break;
               case 913:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1994, 2001); }
                  break;
               case 914:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2002, 2005); }
                  break;
               case 915:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2006, 2010); }
                  break;
               case 916:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2011, 2016); }
                  break;
               case 917:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2017, 2023); }
                  break;
               case 919:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2328, 2329); }
                  break;
               case 924:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2330, 2331); }
                  break;
               case 930:
                  { jjAddStates(2332, 2333); }
                  break;
               case 932:
               case 933:
                  { jjCheckNAddTwoStates(933, 934); }
                  break;
               case 937:
                  if ((0x10000000100000L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 938:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 937;
                  break;
               case 939:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 938;
                  break;
               case 940:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 939;
                  break;
               case 941:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 940;
                  break;
               case 942:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 941;
                  break;
               case 943:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 942;
                  break;
               case 944:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 943;
                  break;
               case 945:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 944;
                  break;
               case 948:
                  { jjAddStates(2334, 2335); }
                  break;
               case 950:
               case 951:
                  { jjCheckNAddTwoStates(951, 952); }
                  break;
               case 955:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 956;
                  break;
               case 957:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 955;
                  break;
               case 958:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(2175, 2176); }
                  break;
               case 960:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 959;
                  break;
               case 961:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 960;
                  break;
               case 962:
               case 975:
               case 981:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 963:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 962;
                  break;
               case 964:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(2172, 2174); }
                  break;
               case 965:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 966:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 965;
                  break;
               case 967:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 968:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 967;
                  break;
               case 969:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 970:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 969;
                  break;
               case 971:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(2167, 2171); }
                  break;
               case 973:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 972;
                  break;
               case 974:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 973;
                  break;
               case 976:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 975;
                  break;
               case 977:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 976;
                  break;
               case 979:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 978;
                  break;
               case 980:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 979;
                  break;
               case 982:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 981;
                  break;
               case 984:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 983;
                  break;
               case 985:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 984;
                  break;
               case 986:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 985;
                  break;
               case 987:
                  if (curChar == 92)
                     { jjCheckNAddStates(2160, 2163); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(2155, 2159); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2185, 2186); }
                  break;
               case 3:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 18:
               case 19:
               case 21:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2191, 2192); }
                  break;
               case 65:
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 71:
               case 72:
               case 170:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(351, 356); }
                  break;
               case 75:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2193, 2194); }
                  break;
               case 77:
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 83:
               case 84:
               case 100:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(369, 371); }
                  break;
               case 87:
               case 88:
               case 119:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(377, 382); }
                  break;
               case 91:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2195, 2196); }
                  break;
               case 93:
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 138:
               case 144:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(592, 594); }
                  break;
               case 154:
               case 160:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(641, 643); }
                  break;
               case 198:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2213, 2214); }
                  break;
               case 200:
               case 201:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 206:
               case 207:
               case 219:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(815, 818); }
                  break;
               case 210:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2215, 2216); }
                  break;
               case 212:
               case 213:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(213, 214); }
                  break;
               case 270:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2217, 2218); }
                  break;
               case 272:
               case 273:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(273, 274); }
                  break;
               case 279:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2219, 2220); }
                  break;
               case 281:
               case 282:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(282, 283); }
                  break;
               case 290:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2221, 2222); }
                  break;
               case 292:
               case 293:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(293, 294); }
                  break;
               case 299:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2223, 2224); }
                  break;
               case 301:
               case 302:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(302, 303); }
                  break;
               case 308:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2225, 2226); }
                  break;
               case 310:
               case 311:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(311, 312); }
                  break;
               case 317:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2227, 2228); }
                  break;
               case 319:
               case 320:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(320, 321); }
                  break;
               case 326:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2229, 2230); }
                  break;
               case 328:
               case 329:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(329, 330); }
                  break;
               case 335:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2231, 2232); }
                  break;
               case 337:
               case 338:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 345:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2233, 2234); }
                  break;
               case 347:
               case 348:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(348, 349); }
                  break;
               case 355:
               case 361:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(994, 996); }
                  break;
               case 370:
               case 375:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 385:
               case 391:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1073, 1075); }
                  break;
               case 400:
               case 405:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(400, 401); }
                  break;
               case 415:
               case 416:
               case 418:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 429:
               case 430:
               case 432:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(430, 431); }
                  break;
               case 450:
               case 451:
               case 454:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1259, 1261); }
                  break;
               case 483:
               case 484:
               case 486:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(484, 485); }
                  break;
               case 504:
               case 506:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(504, 505); }
                  break;
               case 519:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1484, 1485); }
                  break;
               case 558:
               case 574:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 562:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2253, 2254); }
                  break;
               case 564:
               case 565:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(565, 566); }
                  break;
               case 584:
               case 590:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 599:
               case 601:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 613:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2265, 2266); }
                  break;
               case 615:
               case 616:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(616, 617); }
                  break;
               case 870:
               case 871:
               case 875:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 897:
               case 898:
               case 900:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(898, 899); }
                  break;
               case 930:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2332, 2333); }
                  break;
               case 932:
               case 933:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(933, 934); }
                  break;
               case 948:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2334, 2335); }
                  break;
               case 950:
               case 951:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(951, 952); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1082 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   989, 990, 991, 670, 673, 675, 992, 993, 994, 677, 680, 682, 995, 996, 997, 684, 
   687, 690, 998, 999, 1000, 692, 695, 697, 1001, 1002, 1003, 699, 702, 704, 1004, 1005, 
   1006, 706, 709, 710, 1007, 1008, 1009, 712, 715, 717, 1010, 1011, 1012, 719, 722, 724, 
   1013, 1014, 1015, 726, 729, 731, 1016, 1017, 1018, 733, 736, 738, 1019, 1020, 1021, 740, 
   743, 747, 1022, 1023, 1024, 749, 752, 756, 1025, 1026, 1027, 758, 762, 1028, 1029, 1030, 
   764, 767, 1031, 1032, 1033, 769, 772, 1034, 1035, 1036, 774, 778, 1037, 1038, 1039, 780, 
   784, 1040, 1041, 1042, 786, 790, 1043, 1044, 1045, 792, 796, 1046, 1047, 1048, 798, 802, 
   1049, 1050, 1051, 804, 809, 813, 815, 819, 1052, 1053, 1054, 821, 825, 1055, 1056, 1057, 
   827, 831, 1058, 1059, 1060, 833, 837, 838, 1061, 1062, 1063, 840, 844, 846, 1064, 1065, 
   1066, 848, 851, 1067, 1068, 1069, 862, 865, 1070, 1071, 1072, 867, 870, 1073, 1074, 1075, 
   894, 897, 1076, 1077, 1078, 919, 922, 1079, 1080, 1081, 924, 910, 885, 852, 276, 277, 
   285, 286, 287, 296, 297, 8, 305, 306, 9, 314, 315, 10, 323, 324, 12, 332, 
   333, 13, 341, 342, 343, 351, 352, 15, 928, 945, 946, 957, 669, 676, 683, 691, 
   698, 705, 711, 718, 725, 732, 739, 748, 757, 763, 768, 773, 779, 785, 791, 797, 
   803, 820, 826, 832, 839, 847, 861, 866, 893, 918, 923, 482, 483, 504, 505, 496, 
   415, 428, 450, 464, 472, 385, 386, 400, 401, 387, 355, 356, 370, 371, 357, 256, 
   267, 194, 61, 70, 71, 180, 2, 3, 6, 3, 5, 6, 18, 31, 19, 24, 
   25, 20, 26, 19, 27, 24, 25, 20, 28, 29, 30, 19, 24, 25, 20, 19, 
   27, 24, 25, 20, 19, 27, 24, 25, 20, 28, 19, 27, 24, 25, 20, 28, 
   29, 33, 25, 19, 20, 34, 35, 33, 25, 19, 20, 36, 37, 38, 33, 25, 
   19, 20, 35, 33, 25, 19, 20, 35, 33, 25, 19, 20, 36, 35, 33, 25, 
   19, 20, 36, 37, 69, 70, 71, 180, 61, 64, 65, 68, 65, 67, 68, 72, 
   73, 82, 83, 98, 169, 81, 82, 83, 98, 99, 73, 76, 77, 80, 77, 79, 
   80, 84, 85, 101, 86, 87, 137, 153, 129, 82, 83, 88, 89, 98, 118, 82, 
   83, 97, 98, 99, 89, 92, 93, 96, 93, 95, 96, 84, 104, 105, 85, 101, 
   106, 84, 107, 104, 105, 85, 101, 108, 109, 110, 84, 104, 105, 85, 101, 84, 
   107, 104, 105, 85, 101, 84, 107, 104, 105, 85, 101, 108, 84, 107, 104, 105, 
   85, 101, 108, 109, 112, 105, 84, 85, 101, 113, 114, 112, 105, 84, 85, 101, 
   115, 116, 117, 112, 105, 84, 85, 101, 114, 112, 105, 84, 85, 101, 114, 112, 
   105, 84, 85, 101, 115, 114, 112, 105, 84, 85, 101, 115, 116, 82, 83, 88, 
   122, 98, 118, 123, 124, 82, 83, 88, 89, 97, 98, 99, 89, 118, 82, 83, 
   88, 125, 122, 98, 118, 123, 126, 127, 128, 82, 83, 88, 122, 98, 118, 123, 
   82, 83, 88, 125, 122, 98, 118, 123, 82, 83, 88, 125, 122, 98, 118, 123, 
   126, 82, 83, 88, 125, 122, 98, 118, 123, 126, 127, 82, 83, 131, 88, 98, 
   118, 123, 132, 82, 83, 133, 131, 88, 98, 118, 123, 134, 135, 136, 82, 83, 
   131, 88, 98, 118, 123, 82, 83, 133, 131, 88, 98, 118, 123, 82, 83, 133, 
   131, 88, 98, 118, 123, 134, 82, 83, 133, 131, 88, 98, 118, 123, 134, 135, 
   138, 139, 140, 82, 83, 89, 98, 99, 138, 146, 147, 139, 140, 148, 138, 149, 
   146, 147, 139, 140, 150, 151, 152, 138, 146, 147, 139, 140, 138, 149, 146, 147, 
   139, 140, 138, 149, 146, 147, 139, 140, 150, 138, 149, 146, 147, 139, 140, 150, 
   151, 154, 155, 156, 154, 162, 163, 155, 156, 164, 154, 165, 162, 163, 155, 156, 
   166, 167, 168, 154, 162, 163, 155, 156, 154, 165, 162, 163, 155, 156, 154, 165, 
   162, 163, 155, 156, 166, 154, 165, 162, 163, 155, 156, 166, 167, 72, 173, 82, 
   83, 98, 169, 174, 175, 72, 73, 81, 82, 83, 98, 99, 73, 169, 72, 176, 
   173, 82, 83, 98, 169, 174, 177, 178, 179, 72, 173, 82, 83, 98, 169, 174, 
   72, 176, 173, 82, 83, 98, 169, 174, 72, 176, 173, 82, 83, 98, 169, 174, 
   177, 72, 176, 173, 82, 83, 98, 169, 174, 177, 178, 182, 72, 82, 83, 98, 
   169, 174, 183, 184, 182, 72, 82, 83, 98, 169, 174, 185, 186, 187, 182, 72, 
   82, 83, 98, 169, 174, 184, 182, 72, 82, 83, 98, 169, 174, 184, 182, 72, 
   82, 83, 98, 169, 174, 185, 184, 182, 72, 82, 83, 98, 169, 174, 185, 186, 
   196, 205, 206, 229, 204, 205, 206, 229, 196, 199, 200, 203, 200, 202, 203, 207, 
   208, 217, 218, 216, 217, 208, 211, 212, 215, 212, 214, 215, 207, 222, 217, 218, 
   223, 224, 207, 208, 216, 217, 208, 218, 207, 225, 222, 217, 218, 223, 226, 227, 
   228, 207, 222, 217, 218, 223, 207, 225, 222, 217, 218, 223, 207, 225, 222, 217, 
   218, 223, 226, 207, 225, 222, 217, 218, 223, 226, 227, 231, 207, 217, 218, 223, 
   232, 233, 231, 207, 217, 218, 223, 234, 235, 236, 231, 207, 217, 218, 223, 233, 
   231, 207, 217, 218, 223, 233, 231, 207, 217, 218, 223, 234, 233, 231, 207, 217, 
   218, 223, 234, 235, 271, 272, 275, 272, 274, 275, 280, 281, 284, 281, 283, 284, 
   285, 286, 287, 291, 292, 295, 292, 294, 295, 296, 297, 8, 300, 301, 304, 301, 
   303, 304, 305, 306, 9, 309, 310, 313, 310, 312, 313, 314, 315, 10, 318, 319, 
   322, 319, 321, 322, 323, 324, 12, 327, 328, 331, 328, 330, 331, 332, 333, 13, 
   336, 337, 340, 337, 339, 340, 341, 342, 343, 346, 347, 350, 347, 349, 350, 351, 
   352, 15, 355, 356, 357, 355, 363, 364, 356, 357, 365, 355, 366, 363, 364, 356, 
   357, 367, 368, 369, 355, 363, 364, 356, 357, 355, 366, 363, 364, 356, 357, 355, 
   366, 363, 364, 356, 357, 367, 355, 366, 363, 364, 356, 357, 367, 368, 370, 377, 
   378, 371, 379, 370, 380, 377, 378, 371, 381, 382, 383, 370, 377, 378, 371, 370, 
   380, 377, 378, 371, 370, 380, 377, 378, 371, 381, 370, 380, 377, 378, 371, 381, 
   382, 385, 386, 387, 385, 393, 394, 386, 387, 395, 385, 396, 393, 394, 386, 387, 
   397, 398, 399, 385, 393, 394, 386, 387, 385, 396, 393, 394, 386, 387, 385, 396, 
   393, 394, 386, 387, 397, 385, 396, 393, 394, 386, 387, 397, 398, 400, 407, 408, 
   401, 409, 400, 410, 407, 408, 401, 411, 412, 413, 400, 407, 408, 401, 400, 410, 
   407, 408, 401, 400, 410, 407, 408, 401, 411, 400, 410, 407, 408, 401, 411, 412, 
   416, 421, 422, 417, 423, 416, 424, 421, 422, 417, 425, 426, 427, 416, 421, 422, 
   417, 416, 424, 421, 422, 417, 416, 424, 421, 422, 417, 425, 416, 424, 421, 422, 
   417, 425, 426, 429, 442, 430, 435, 436, 431, 437, 430, 438, 435, 436, 431, 439, 
   440, 441, 430, 435, 436, 431, 430, 438, 435, 436, 431, 430, 438, 435, 436, 431, 
   439, 430, 438, 435, 436, 431, 439, 440, 444, 436, 430, 431, 445, 446, 444, 436, 
   430, 431, 447, 448, 449, 444, 436, 430, 431, 446, 444, 436, 430, 431, 446, 444, 
   436, 430, 431, 447, 446, 444, 436, 430, 431, 447, 448, 451, 452, 453, 451, 457, 
   458, 452, 453, 459, 451, 460, 457, 458, 452, 453, 461, 462, 463, 451, 457, 458, 
   452, 453, 451, 460, 457, 458, 452, 453, 451, 460, 457, 458, 452, 453, 461, 451, 
   460, 457, 458, 452, 453, 461, 462, 466, 458, 451, 452, 453, 467, 468, 466, 458, 
   451, 452, 453, 469, 470, 471, 466, 458, 451, 452, 453, 468, 466, 458, 451, 452, 
   453, 468, 466, 458, 451, 452, 453, 469, 468, 466, 458, 451, 452, 453, 469, 470, 
   474, 422, 416, 417, 475, 476, 474, 422, 416, 417, 477, 478, 479, 474, 422, 416, 
   417, 476, 474, 422, 416, 417, 476, 474, 422, 416, 417, 477, 476, 474, 422, 416, 
   417, 477, 478, 484, 489, 490, 485, 491, 484, 492, 489, 490, 485, 493, 494, 495, 
   484, 489, 490, 485, 484, 492, 489, 490, 485, 484, 492, 489, 490, 485, 493, 484, 
   492, 489, 490, 485, 493, 494, 498, 490, 484, 485, 499, 500, 498, 490, 484, 485, 
   501, 502, 503, 498, 490, 484, 485, 500, 498, 490, 484, 485, 500, 498, 490, 484, 
   485, 501, 500, 498, 490, 484, 485, 501, 502, 504, 509, 510, 505, 511, 504, 512, 
   509, 510, 505, 513, 514, 515, 504, 509, 510, 505, 504, 512, 509, 510, 505, 504, 
   512, 509, 510, 505, 513, 504, 512, 509, 510, 505, 513, 514, 519, 520, 557, 583, 
   599, 569, 600, 611, 558, 559, 570, 568, 569, 560, 563, 564, 567, 564, 566, 567, 
   558, 576, 577, 559, 570, 578, 558, 579, 576, 577, 559, 570, 580, 581, 582, 558, 
   576, 577, 559, 570, 558, 579, 576, 577, 559, 570, 558, 579, 576, 577, 559, 570, 
   580, 558, 579, 576, 577, 559, 570, 580, 581, 584, 585, 586, 584, 592, 593, 585, 
   586, 594, 584, 595, 592, 593, 585, 586, 596, 597, 598, 584, 592, 593, 585, 586, 
   584, 595, 592, 593, 585, 586, 584, 595, 592, 593, 585, 586, 596, 584, 595, 592, 
   593, 585, 586, 596, 597, 599, 560, 569, 600, 599, 604, 569, 600, 605, 606, 599, 
   560, 568, 569, 560, 600, 599, 607, 604, 569, 600, 605, 608, 609, 610, 599, 604, 
   569, 600, 605, 599, 607, 604, 569, 600, 605, 599, 607, 604, 569, 600, 605, 608, 
   599, 607, 604, 569, 600, 605, 608, 609, 619, 557, 583, 599, 568, 569, 560, 600, 
   611, 614, 615, 618, 615, 617, 618, 619, 557, 583, 599, 569, 600, 611, 623, 629, 
   625, 626, 627, 628, 625, 626, 627, 630, 635, 639, 643, 647, 651, 625, 649, 650, 
   625, 652, 653, 654, 625, 652, 653, 634, 660, 661, 662, 634, 660, 661, 664, 657, 
   665, 666, 667, 664, 657, 665, 664, 657, 665, 666, 669, 670, 673, 675, 672, 673, 
   675, 676, 677, 680, 682, 679, 680, 682, 683, 684, 687, 690, 686, 687, 690, 691, 
   692, 695, 697, 694, 695, 697, 698, 699, 702, 704, 701, 702, 704, 705, 706, 709, 
   710, 708, 709, 710, 711, 712, 715, 717, 714, 715, 717, 718, 719, 722, 724, 721, 
   722, 724, 725, 726, 729, 731, 728, 729, 731, 732, 733, 736, 738, 735, 736, 738, 
   739, 740, 743, 747, 742, 743, 747, 748, 749, 752, 756, 751, 752, 756, 757, 758, 
   762, 763, 764, 767, 768, 769, 772, 773, 774, 778, 779, 780, 784, 785, 786, 790, 
   791, 792, 796, 797, 798, 802, 803, 804, 809, 813, 815, 819, 806, 809, 813, 815, 
   819, 820, 821, 825, 826, 827, 831, 832, 833, 837, 838, 835, 837, 838, 839, 840, 
   844, 846, 842, 844, 846, 847, 848, 851, 852, 850, 851, 852, 861, 862, 865, 866, 
   867, 870, 885, 869, 870, 885, 871, 873, 874, 871, 878, 879, 873, 874, 880, 871, 
   881, 878, 879, 873, 874, 882, 883, 884, 871, 878, 879, 873, 874, 871, 881, 878, 
   879, 873, 874, 871, 881, 878, 879, 873, 874, 882, 871, 881, 878, 879, 873, 874, 
   882, 883, 887, 879, 871, 873, 874, 888, 889, 887, 879, 871, 873, 874, 890, 891, 
   892, 887, 879, 871, 873, 874, 889, 887, 879, 871, 873, 874, 889, 887, 879, 871, 
   873, 874, 890, 889, 887, 879, 871, 873, 874, 890, 891, 893, 894, 897, 910, 896, 
   897, 910, 898, 903, 904, 899, 905, 898, 906, 903, 904, 899, 907, 908, 909, 898, 
   903, 904, 899, 898, 906, 903, 904, 899, 898, 906, 903, 904, 899, 907, 898, 906, 
   903, 904, 899, 907, 908, 912, 904, 898, 899, 913, 914, 912, 904, 898, 899, 915, 
   916, 917, 912, 904, 898, 899, 914, 912, 904, 898, 899, 914, 912, 904, 898, 899, 
   915, 914, 912, 904, 898, 899, 915, 916, 918, 919, 922, 936, 945, 928, 931, 932, 
   935, 932, 934, 935, 954, 957, 946, 949, 950, 953, 950, 952, 953, 989, 670, 673, 
   675, 992, 677, 680, 682, 995, 684, 687, 690, 998, 692, 695, 697, 1001, 699, 702, 
   704, 1004, 706, 709, 710, 1007, 712, 715, 717, 1010, 719, 722, 724, 1013, 726, 729, 
   731, 1016, 733, 736, 738, 1019, 740, 743, 747, 1022, 749, 752, 756, 1025, 758, 762, 
   1028, 764, 767, 1031, 769, 772, 1034, 774, 778, 1037, 780, 784, 1040, 786, 790, 1043, 
   792, 796, 1046, 798, 802, 1049, 804, 809, 813, 815, 819, 1052, 821, 825, 1055, 827, 
   831, 1058, 833, 837, 838, 1061, 840, 844, 846, 1064, 848, 851, 852, 1067, 862, 865, 
   1070, 867, 870, 885, 1073, 894, 897, 910, 1076, 919, 922, 416, 451, 452, 453, 417, 
   418, 473, 454, 465, 17, 18, 31, 974, 977, 980, 982, 986, 966, 968, 970, 961, 
   963, 621, 622, 655, 552, 554, 240, 243, 246, 1, 2, 61, 70, 71, 180, 63, 
   64, 75, 76, 91, 92, 100, 111, 119, 120, 141, 143, 144, 145, 157, 159, 160, 
   161, 170, 171, 100, 111, 198, 199, 210, 211, 270, 271, 279, 280, 290, 291, 299, 
   300, 308, 309, 317, 318, 326, 327, 335, 336, 345, 346, 358, 360, 361, 362, 372, 
   374, 375, 376, 388, 390, 391, 392, 402, 404, 405, 406, 506, 507, 562, 563, 571, 
   573, 574, 575, 587, 589, 590, 591, 601, 602, 613, 614, 671, 672, 678, 679, 685, 
   686, 693, 694, 700, 701, 707, 708, 713, 714, 720, 721, 727, 728, 734, 735, 741, 
   742, 750, 751, 759, 760, 765, 766, 770, 771, 775, 776, 781, 782, 787, 788, 793, 
   794, 799, 800, 805, 806, 822, 823, 828, 829, 834, 835, 841, 842, 849, 850, 854, 
   857, 860, 863, 864, 868, 869, 895, 896, 920, 921, 925, 926, 930, 931, 948, 949, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\57\52", "\74\41\55\55", 
"\55\55\76", null, "\174\75", null, null, "\55", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\175", "\136\75", "\44\75", 
"\52\75", "\75", "\73", "\57", "\133", "\135", "\52", "\56", "\51", "\50", "\72", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\72\72", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\41", "\44", "\45", "\46", "\140", "\77", "\74", "\174", "\74\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CssParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CssParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 1082; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffe00001L, 0xff803fffffffffffL, 0x7ffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[1082];
    private final int[] jjstateSet = new int[2 * 1082];

    
    protected char curChar;
}
