{
  "ua": [
    "UC10"
  ],
  "results": {
    "/media-source/SourceBuffer-abort-readyState.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "SourceBuffer#abort() (video/mp4) : If the readyState attribute of the parent media source is not in the \"open\" state then throw an INVALID_STATE_ERR exception and abort these steps.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/SourceBuffer-abort-removed.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "SourceBuffer#abort (video/webm; codecs=\"vorbis,vp8\") : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "SourceBuffer#abort (video/mp4) : if this object has been removed from the sourceBuffers attribute of the parent media source, then throw an INVALID_STATE_ERR exception and abort these steps.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/SourceBuffer-abort-updating.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {
        "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\") : Check the algorithm when the updating attribute is true.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "SourceBuffer#abort() (video/mp4) : Check the algorithm when the updating attribute is true.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/SourceBuffer-abort.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "SourceBuffer#abort() (video/webm; codecs=\"vorbis,vp8\"): Check the values of appendWindowStart and appendWindowEnd.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "SourceBuffer#abort() (video/mp4): Check the values of appendWindowStart and appendWindowEnd.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/URL-createObjectURL-null.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "URL.createObjectURL(null)": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/URL-createObjectURL-revoke.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Check revoking behavior of URL.revokeObjectURL(url).": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/URL-createObjectURL.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "URL.createObjectURL(mediaSource) should return a unique Blob URI.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/interfaces.html": {
      "byUA": {
        "UC10": "ERROR"
      },
      "totals": {
        "ERROR": 1
      },
      "subtests": {}
    },
    "/media-source/mediasource-addsourcebuffer.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test addSourceBuffer() with empty type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() with unsupported type": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() with Vorbis and VP8": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() with Vorbis and VP8 in separate SourceBuffers": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() with AAC and H.264": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() with AAC and H.264 in separate SourceBuffers": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-append-buffer.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test SourceBuffer.appendBuffer() event dispatching.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test SourceBuffer.appendBuffer() call during a pending appendBuffer().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test SourceBuffer.abort() call during a pending appendBuffer().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test SourceBuffer.appendBuffer() triggering an 'ended' to 'open' transition.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test MediaSource.removeSourceBuffer() call during a pending appendBuffer().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test set MediaSource.duration during a pending appendBuffer() for one of its SourceBuffers.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test MediaSource.endOfStream() during a pending appendBuffer() for one of its SourceBuffers.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test set SourceBuffer.timestampOffset during a pending appendBuffer().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test appending an empty ArrayBufferView.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test appending an empty ArrayBuffer.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-appendwindow.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test correctly reset appendWindowStart and appendWindowEnd values": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test set wrong values to appendWindowStart and appendWindowEnd.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test appendwindow throw error when mediasource object is not associated with a sourebuffer.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test set appendWindowStart and appendWindowEnd when source buffer updating.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test appendWindowStart and appendWindowEnd value after a sourceBuffer.abort().": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-buffered.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "SourceBuffer.buffered test cases.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-closed.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test attribute values on a closed MediaSource object.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test addSourceBuffer() while closed.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test removeSourceBuffer() while closed.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test endOfStream() while closed.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting duration while closed.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-a-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 audio-only bitrate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-av-audio-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 audio bitrate changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-av-framesize.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 frame size changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-av-video-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 video bitrate changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-v-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 video-only bitrate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-v-framerate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 video-only frame rate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-mp4-v-framesize.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests mp4 video-only frame size changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-a-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm audio-only bitrate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-av-audio-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm audio bitrate changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-av-framesize.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm frame size changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-av-video-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm video bitrate changes in multiplexed content.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-v-bitrate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm video-only bitrate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-v-framerate.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm video-only frame rate changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-config-change-webm-v-framesize.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests webm video-only frame size changes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-duration.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test seek starts on duration truncation below currentTime": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test appendBuffer completes previous seek to truncated duration": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test endOfStream completes previous seek to truncated duration": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting same duration multiple times does not fire duplicate durationchange": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-endofstream-invaliderror.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test MediaSource.endOfStream() with invalid non-empty error string.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test MediaSource.endOfStream() with invalid empty error string.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test MediaSource.endOfStream() with invalid null error parameter.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-getvideoplaybackquality.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test HTMLVideoElement.getVideoPlaybackQuality() with MediaSource API": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-is-type-supported.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test invalid MIME format \"video\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;codecs\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;codecs=\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;codecs=\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;codecs=\"\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid MIME format \"video/webm;codecs=\",\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between major type and codec ID \"audio/webm;codecs=\"vp8\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between major type and codec ID \"audio/mp4;codecs=\"avc1.4d001e\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between minor type and codec ID \"audio/mp4;codecs=\"vorbis\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between minor type and codec ID \"audio/webm;codecs=\"mp4a.40.2\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between minor type and codec ID \"video/mp4;codecs=\"vp8\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid mismatch between minor type and codec ID \"video/webm;codecs=\"mp4a.40.2\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 2
          }
        },
        "Test invalid mismatch between minor type and codec ID \"video/mp4;codecs=\"vorbis\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid codec ID \"audio/mp4;codecs=\"mp4a\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.40\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.40.\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test invalid codec ID \"audio/mp4;codecs=\"mp4a.67.3\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid WebM type \"video/webm;codecs=\"vp8\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid WebM type \"video/webm;codecs=\"vorbis\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid WebM type \"video/webm;codecs=\"vp8,vorbis\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid WebM type \"video/webm;codecs=\"vorbis, vp8\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid WebM type \"audio/webm;codecs=\"vorbis\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"avc1.42001e\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.40.2\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.40.5\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"audio/mp4;codecs=\"mp4a.67\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"mp4a.40.2\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e,mp4a.40.2\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"mp4a.40.2 , avc1.4d001e \"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test valid MP4 type \"video/mp4;codecs=\"avc1.4d001e,mp4a.40.5\"\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-multiple-attach.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test exactly one succeeds when two MediaElements attach to same MediaSource": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that MediaSource can reattach if closed first": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-play-then-seek-back.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test playing then seeking back.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-play.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test normal playback case with MediaSource API": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-redundant-seek.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test redundant fully prebuffered seek": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-remove.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test remove with an negative start.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test remove with a start beyond the duration.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test remove with a start larger than the end.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test remove after SourceBuffer removed from mediaSource.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test remove while update pending.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test aborting a remove operation.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test remove transitioning readyState from 'ended' to 'open'.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test removing all appended data.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test removing beginning of appended data.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test removing the middle of appended data.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test removing the end of appended data.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-seek-beyond-duration.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test seeking beyond updated media duration.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test seeking beyond media duration.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-seek-during-pending-seek.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test seeking to a new location before transitioning beyond HAVE_METADATA.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test seeking to a new location during a pending seek.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-sourcebuffer-mode.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test initial value of SourceBuffer.mode is \"segments\"": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting SourceBuffer.mode": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting a removed SourceBuffer's mode": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting SourceBuffer.mode while still updating": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting SourceBuffer.mode triggers parent MediaSource 'ended' to 'open' transition.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test setting SourceBuffer.mode and SourceBuffer.timestampOffset while parsing media segment.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/media-source/mediasource-sourcebufferlist.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Test SourceBufferList event dispatching.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "Test that only 1 removesourcebuffer event fires on each SourceBufferList when the MediaSource closes.": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/api-present.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "getUserMedia() is present on navigator": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/deny.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that the error callback is triggered when permission is denied": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/empty-option-param.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that getUserMedia raises a NOT_SUPPORTED_ERR exception when used with an empty options parameter": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/getusermedia-impossible-constraint.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that setting an impossible constraint in getUserMedia fails": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/getusermedia-optional-constraint.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that setting an optional constraint in getUserMedia is handled as optional": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/getusermedia-trivial-constraint.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that setting a trivial mandatory constraint in getUserMedia works": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/obtaining-local-multimedia-content/navigatorusermedia/unknownkey-option-param.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "getUserMedia({doesnotexist:true}) aborts with NOT_SUPPORTED_ERR": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/introduction/disabled-audio-silence.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a disabled audio track in a MediaStream is rendered as silence": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/introduction/disabled-video-black.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a disabled video track in a MediaStream is rendered as blackness": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/audio.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a MediaStream with exactly one audio track is returned": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/mediastream-addtrack.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that adding a track to a MediaStream works as expected": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/mediastream-finished-add.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that an addition to a finished MediaStream raises an exception": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/mediastream-gettrackid.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that MediaStream.getTrackById works as expected": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/mediastream-idl.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a MediaStream constructor follows the algorithm set in the spec": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/mediastream-removetrack.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a removal from a MediaStream works as expected": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/stream-ended.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a MediaStream handles ended correctly": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastream/video.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that a MediaStream with at least one video track is returned": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastreamtrack/mediastreamtrack-end.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that the video MediaStreamTrack objects are properly ended on permission revocation": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastreamtrack/mediastreamtrack-id.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that distinct mediastream tracks have distinct ids ": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/mediastreamtrack/mediastreamtrack-init.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "Tests that the video MediaStreamTrack objects are properly initialized": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/video-and-audio-tracks/audiostreamtrack.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "AudioStreamTrack interface: existence and properties of interface object": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "AudioStreamTrack interface object length": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "AudioStreamTrack interface: existence and properties of interface prototype object": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "AudioStreamTrack interface: existence and properties of interface prototype object's \"constructor\" property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "AudioStreamTrack interface: operation getSourceIds()": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    },
    "/mediacapture-streams/stream-api/video-and-audio-tracks/videostreamtrack.html": {
      "byUA": {
        "UC10": "OK"
      },
      "totals": {
        "OK": 1
      },
      "subtests": {
        "VideoStreamTrack interface: existence and properties of interface object": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "VideoStreamTrack interface object length": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "VideoStreamTrack interface: existence and properties of interface prototype object": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "VideoStreamTrack interface: existence and properties of interface prototype object's \"constructor\" property": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        },
        "VideoStreamTrack interface: operation getSourceIds()": {
          "byUA": {
            "UC10": "FAIL"
          },
          "totals": {
            "FAIL": 1
          }
        }
      }
    }
  }
}