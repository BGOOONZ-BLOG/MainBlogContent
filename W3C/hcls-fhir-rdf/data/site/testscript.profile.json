{
    "id": "TestScript",
    "date": "2015-10-24T07:41:03+11:00",
    "differential": {
        "element": [
            {
                "type": [
                    {
                        "code": "DomainResource"
                    }
                ],
                "max": "*",
                "definition": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
                "short": "Describes a set of tests",
                "min": 0,
                "mapping": [
                    {
                        "map": "conformance.misc",
                        "identity": "w5"
                    }
                ],
                "path": "TestScript"
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "1",
                "definition": "An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.",
                "short": "Absolute URL used to reference this TestScript",
                "min": 1,
                "alias": [
                    "url",
                    "authoritative-url",
                    "destination",
                    "identity"
                ],
                "isSummary": true,
                "path": "TestScript.url",
                "mapping": [
                    {
                        "map": "id",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually.",
                "requirements": "There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.",
                "short": "Logical id for this version of the TestScript",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.version",
                "mapping": [
                    {
                        "map": "id.version",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A free text natural language name identifying the TestScript.",
                "short": "Informal name for this TestScript",
                "min": 1,
                "comments": "Not expected to be globally unique.",
                "path": "TestScript.name",
                "isSummary": true
            },
            {
                "isModifier": true,
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The status of the TestScript.",
                "requirements": "Allows filtering of TestScripts that are appropriate for use vs. not.",
                "short": "draft | active | retired",
                "min": 1,
                "binding": {
                    "description": "The lifecycle status of a Value Set or Concept Map.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/conformance-resource-status"
                    },
                    "strength": "required"
                },
                "isSummary": true,
                "path": "TestScript.status",
                "mapping": [
                    {
                        "map": "status",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Identifier"
                    }
                ],
                "max": "1",
                "definition": "Identifier for the TestScript assigned for external purposes outside the context of FHIR.",
                "short": "External identifier",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.identifier",
                "mapping": [
                    {
                        "map": "id",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
                "requirements": "Allows filtering of TestScripts that are appropriate for use vs. not.",
                "short": "If for testing purposes, not real usage",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.experimental",
                "mapping": [
                    {
                        "map": "class",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of the individual or organization that published the Test Script.",
                "requirements": "Helps establish the \"authority/credibility\" of the Test Script.  May also allow for contact.",
                "mapping": [
                    {
                        "map": "who.witness",
                        "identity": "w5"
                    }
                ],
                "short": "Name of the publisher (Organization or individual)",
                "min": 0,
                "comments": "Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.",
                "path": "TestScript.publisher",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Contacts to assist a user in finding and communicating with the publisher.",
                "short": "Contact details of the publisher",
                "min": 0,
                "comments": "May be a web site, an email address, a telephone number (tel:), etc.",
                "path": "TestScript.contact",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of an individual to contact regarding the Test Script.",
                "short": "Name of a individual to contact",
                "min": 0,
                "comments": "If there is no named individual, the telecom is for the organization as a whole.",
                "path": "TestScript.contact.name",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "ContactPoint"
                    }
                ],
                "max": "*",
                "definition": "Contact details for individual (if a name was provided) or the publisher.",
                "short": "Contact details for individual or publisher",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.contact.telecom"
            },
            {
                "type": [
                    {
                        "code": "dateTime"
                    }
                ],
                "max": "1",
                "definition": "The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.",
                "mapping": [
                    {
                        "map": "when.recorded",
                        "identity": "w5"
                    }
                ],
                "short": "Date for this version of the TestScript",
                "min": 0,
                "comments": "Additional specific dates may be added as extensions.",
                "path": "TestScript.date",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A free text natural language description of the TestScript and its use.",
                "short": "Natural language description of the TestScript",
                "min": 0,
                "comments": "This field can be used for things such as why the TestScript was written, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc.  It is *not* a rendering of the TestScript as conveyed in TestScript.text. This item SHOULD be populated unless the information is available from context.",
                "path": "TestScript.description",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "CodeableConcept"
                    }
                ],
                "max": "*",
                "definition": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.",
                "requirements": "Assist in searching for appropriate content.",
                "short": "Content intends to support these contexts",
                "min": 0,
                "binding": {
                    "description": "Indicates the countries, regions, disciplines and other aspects of use within which this artifact is targeted for use.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/use-context"
                    },
                    "strength": "extensible"
                },
                "isSummary": true,
                "path": "TestScript.useContext"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Explains why this Test Script is needed and why it's been constrained as it has.",
                "short": "Scope and Usage this Test Script is for",
                "min": 0,
                "comments": "This element does not describe the usage of the Test Script (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.",
                "path": "TestScript.requirements",
                "mapping": [
                    {
                        "map": "why",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
                "short": "Use and/or publishing restrictions",
                "min": 0,
                "alias": [
                    "License",
                    "Restrictions"
                ],
                "path": "TestScript.copyright"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "metadata",
                "max": "1",
                "definition": "The required capability must exist and are assumed to function correctly on the FHIR server being tested.",
                "constraint": [
                    {
                        "human": "TestScript metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-5"
                    }
                ],
                "short": "Required capability that is assumed to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.metadata"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "A link to the FHIR specification that this test is covering.",
                "short": "Links to the FHIR specification",
                "min": 0,
                "path": "TestScript.metadata.link"
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "1",
                "definition": "URL to a particular requirement or feature within the FHIR specification.",
                "short": "URL to the specification",
                "min": 1,
                "path": "TestScript.metadata.link.url"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Short description of the link.",
                "short": "Short description",
                "min": 0,
                "path": "TestScript.metadata.link.description"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are assumed to function correctly on the FHIR server being tested",
                "min": 1,
                "comments": "When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  The do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.",
                "path": "TestScript.metadata.capability"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.",
                "short": "Are the capabilities required?",
                "min": 0,
                "path": "TestScript.metadata.capability.required"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.",
                "short": "Are the capabilities validated?",
                "min": 0,
                "path": "TestScript.metadata.capability.validated"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Description of the capabilities that this test script is requiring the server to support.",
                "short": "The expected capabilities of the server",
                "min": 0,
                "path": "TestScript.metadata.capability.description"
            },
            {
                "type": [
                    {
                        "code": "integer"
                    }
                ],
                "max": "1",
                "definition": "Which server these requirements apply to.",
                "short": "Which server these requirements apply to",
                "min": 0,
                "path": "TestScript.metadata.capability.destination"
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "*",
                "definition": "Links to the FHIR specification that describes this interaction and the resources involved in more detail.",
                "short": "Links to the FHIR specification",
                "min": 0,
                "path": "TestScript.metadata.capability.link"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Conformance"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "1",
                "definition": "Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.",
                "short": "Required Conformance",
                "min": 1,
                "comments": "The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.",
                "path": "TestScript.metadata.capability.conformance"
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.",
                "short": "Whether or not the tests apply to more than one FHIR server",
                "min": 0,
                "path": "TestScript.multiserver"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.",
                "short": "Fixture in the test script - by reference (uri)",
                "min": 0,
                "path": "TestScript.fixture"
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.",
                "short": "Whether or not to implicitly create the fixture during setup",
                "min": 0,
                "path": "TestScript.fixture.autocreate"
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.",
                "short": "Whether or not to implicitly delete the fixture during teardown",
                "min": 0,
                "path": "TestScript.fixture.autodelete"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Resource"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "1",
                "definition": "Reference to the resource (containing the contents of the resource needed for operations).",
                "short": "Reference of the resource",
                "min": 0,
                "comments": "See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.",
                "path": "TestScript.fixture.resource"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Resource"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "*",
                "definition": "Reference to the profile to be used for validation.",
                "short": "Reference of the validation profile",
                "min": 0,
                "comments": "See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.",
                "path": "TestScript.profile"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Variable cannot contain both headerField and path.",
                        "severity": "error",
                        "xpath": "not(f:headerField and f:path)",
                        "key": "inv-4"
                    }
                ],
                "max": "*",
                "definition": "Variable is set based either on element value in response body or on header field value in the response headers.",
                "short": "Placeholder for evaluated elements",
                "min": 0,
                "comments": "Variables would be set based either on XPath/JsonPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.",
                "path": "TestScript.variable"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Descriptive name for this variable.",
                "short": "Descriptive name for this variable",
                "min": 1,
                "comments": "Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.",
                "path": "TestScript.variable.name"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
                "short": "HTTP header field name for source",
                "min": 0,
                "comments": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
                "path": "TestScript.variable.headerField"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.",
                "short": "XPath or JSONPath against the fixture body",
                "min": 0,
                "comments": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
                "path": "TestScript.variable.path"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.",
                "short": "Fixture Id of source expression or headerField within this variable",
                "min": 0,
                "comments": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
                "path": "TestScript.variable.sourceId"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "1",
                "definition": "A series of required setup operations before tests are executed.",
                "short": "A series of required setup operations before tests are executed",
                "min": 0,
                "path": "TestScript.setup"
            },
            {
                "constraint": [
                    {
                        "human": "Setup metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-6"
                    }
                ],
                "max": "1",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are assumed to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.setup.metadata",
                "nameReference": "metadata"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Setup action SHALL contain either an operation or assert but not both.",
                        "severity": "error",
                        "xpath": "(f:operation or f:assert) and not(f:operation and f:assert)",
                        "key": "inv-1"
                    }
                ],
                "max": "*",
                "definition": "Action would contain either an operation or an assertion.",
                "short": "A setup operation or assert to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.setup.action"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "operation",
                "max": "1",
                "definition": "The operation to perform.",
                "constraint": [
                    {
                        "human": "Setup operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or ((f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1)) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-10"
                    }
                ],
                "short": "The setup operation to perform",
                "min": 0,
                "path": "TestScript.setup.action.operation"
            },
            {
                "type": [
                    {
                        "code": "Coding"
                    }
                ],
                "max": "1",
                "definition": "Server interaction or operation type.",
                "short": "The setup operation type that will be executed",
                "min": 0,
                "binding": {
                    "description": "The allowable operation types.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/testscript-operation-codes"
                    },
                    "strength": "extensible"
                },
                "comments": "See http://hl7-fhir.github.io/http.html for list of server interactions.",
                "path": "TestScript.setup.action.operation.type"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
                "short": "Resource type",
                "min": 0,
                "binding": {
                    "description": "Either a resource or a data type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/defined-types"
                    },
                    "strength": "required"
                },
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored. For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present. For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url. For \"vread\" and \"history\" operations, the versionId value will also be used.",
                "path": "TestScript.setup.action.operation.resource"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The label would be used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging operation label",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.operation.label"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The description would be used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting operation description",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.operation.description"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Accept' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall set the 'Accept' header to the corresponding value.    If 'xml' is specified, then 'Accept' header of 'application/xml+fhir' will be set.  If 'json' is specified, then 'application/json+fhir' will be used.    If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.",
                "path": "TestScript.setup.action.operation.accept"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.    If 'xml' is specified, then 'Content-Type' header of 'application/xml+fhir' will be set.    If 'json' is specified, then 'application/json+fhir' will be used.    If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.",
                "path": "TestScript.setup.action.operation.contentType"
            },
            {
                "type": [
                    {
                        "code": "integer"
                    }
                ],
                "max": "1",
                "definition": "Which server to perform the operation on.",
                "short": "Which server to perform the operation on",
                "min": 0,
                "defaultValueInteger": 0,
                "path": "TestScript.setup.action.operation.destination"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": true,
                "max": "1",
                "definition": "Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.",
                "short": "Whether or not to send the request url in encoded format",
                "min": 0,
                "path": "TestScript.setup.action.operation.encodeRequestUrl"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Path plus parameters after [type].  Used to set parts of the request URL explicitly.",
                "short": "Explicitly defined path parameters",
                "min": 0,
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.   Test engines would append whatever is specified for \"params\" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The \"params\" element does not correspond exactly to \"search parameters\".  Nor is it the \"path\".  It corresponds to the part of the URL that comes after the [type] (when \"resource\" element is specified); e.g. It corresponds to \"/[id]/_history/[vid] {?_format=[mime-type]}\" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.params"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Header elements would be used to set HTTP headers.",
                "short": "Each operation can have one ore more header elements",
                "min": 0,
                "comments": "This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://hl7-fhir.github.io/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://hl7-fhir.github.io/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://hl7-fhir.github.io/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.",
                "path": "TestScript.setup.action.operation.requestHeader"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The HTTP header field e.g. \"Accept\".",
                "short": "HTTP header field name",
                "min": 1,
                "comments": "If header element is specified, then field is required.",
                "path": "TestScript.setup.action.operation.requestHeader.field"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value of the header e.g. \"application/xml\".",
                "short": "HTTP headerfield value",
                "min": 1,
                "comments": "If header element is specified, then value is required.  No conversions will be done by Test Engine e.g. \"xml\" to \"application/xml+fhir\".  The values will be set in HTTP headers \"as-is\".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.requestHeader.value"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The fixture id (maybe new) to map to the response.",
                "short": "Fixture Id of mapped response",
                "min": 0,
                "comments": "If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"responseId\".  If responseId is not specified, it is the Test Engine's responsibility to store the response and use it as sourceId in subsequent assertions when assertion path and/or headerField is specified and sourceId is not specified.",
                "path": "TestScript.setup.action.operation.responseId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The id of the fixture used as the body of a PUT or POST request.",
                "short": "Fixture Id of body for PUT and POST requests",
                "min": 0,
                "path": "TestScript.setup.action.operation.sourceId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.",
                "short": "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests",
                "min": 0,
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.",
                "path": "TestScript.setup.action.operation.targetId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Complete request URL.",
                "short": "Request URL",
                "min": 0,
                "comments": "Used to set the request URL explicitly.  If \"url\" element is defined, then \"targetId\", \"resource\", and \"params\" elements will be ignored.  Test engines would use whatever is specified in \"url\" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.url"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "assert",
                "max": "1",
                "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
                "constraint": [
                    {
                        "human": "Setup action assert shall contain both compareToSourceId and compareToSourcePath or neither.",
                        "severity": "error",
                        "xpath": "(f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)",
                        "key": "inv-13"
                    },
                    {
                        "human": "Only a single assertion SHALL be present within setup action assert element.",
                        "severity": "error",
                        "xpath": "count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1",
                        "key": "inv-8"
                    }
                ],
                "short": "The assertion to perform",
                "min": 0,
                "comments": "In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
                "path": "TestScript.setup.action.assert"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The label would be used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging assertion label",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.assert.label"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The description would be used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting assertion description",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.assert.description"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The direction to use for the assertion.",
                "short": "response | request",
                "min": 0,
                "binding": {
                    "description": "The type of direction to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-direction-codes"
                    },
                    "strength": "required"
                },
                "path": "TestScript.setup.action.assert.direction"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Id of fixture used to compare the \"sourceId/path\" evaluations to.",
                "short": "Id of fixture used to compare the \"sourceId/path\" evaluations to",
                "min": 0,
                "comments": "The id of the fixture used to make comparisons to.",
                "path": "TestScript.setup.action.assert.compareToSourceId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to.",
                "short": "XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to",
                "min": 0,
                "comments": "The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
                "path": "TestScript.setup.action.assert.compareToSourcePath"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).    If 'xml' is specified, then 'Content-Type' header of 'application/xml+fhir' will be confirmed. If 'json' is specified, then 'application/json+fhir' will be used. If you'd like to have more control over the string, then use 'assert.headerField' instead.",
                "path": "TestScript.setup.action.assert.contentType"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The HTTP header field name e.g. 'Location'.",
                "short": "HTTP header field name",
                "min": 0,
                "comments": "If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.",
                "path": "TestScript.setup.action.assert.headerField"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.",
                "short": "Fixture Id of minimum content resource",
                "min": 0,
                "comments": "Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.",
                "path": "TestScript.setup.action.assert.minimumId"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not the test execution performs validation on the bundle navigation links.",
                "short": "Perform validation on navigation links?",
                "min": 0,
                "comments": "Asserts that the Bundle contains first, last, and next links.",
                "path": "TestScript.setup.action.assert.navigationLinks"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The operator type.",
                "short": "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains",
                "min": 0,
                "binding": {
                    "description": "The type of operator to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-operator-codes"
                    },
                    "strength": "required"
                },
                "comments": "Operators come handy especially for negative testing.  If operator is not specified, then the \"equals\" operator is assumed; e.g. <code>   <assert>  <operator value=\"in\" />  <responseCode value=\"200,201,204\" />    </assert>    <assert>  <operator value=\"notEquals\" />  <response value=\"okay\"/>   </assert>    <assert>  <operator value=\"greaterThan\" />    <responseHeader>     <field value=\"Content-Length\" />     <value value=\"0\" />    <responseHeader>   </assert> </code>.",
                "path": "TestScript.setup.action.assert.operator"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
                "short": "XPath or JSONPath expression",
                "min": 0,
                "comments": "If both \"path\" and \"fixtureId\" are specified, then the path will be evaluated against the responseBody mapped to the fixtureId.  If \"path\" is specified and \"fixtureId\" is not, then the path will be evaluated against the responseBody of the last operation.  Test engines are to store the response body and headers of the last operation at all times for subsequent assertions.",
                "path": "TestScript.setup.action.assert.path"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
                "short": "Resource type",
                "min": 0,
                "binding": {
                    "description": "Either a resource or a data type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/defined-types"
                    },
                    "strength": "required"
                },
                "comments": "This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value=\"Patient\" </assert>.",
                "path": "TestScript.setup.action.assert.resource"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.",
                "short": "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable",
                "min": 0,
                "binding": {
                    "description": "The type of response code to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-response-code-types"
                    },
                    "strength": "required"
                },
                "comments": "This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>.",
                "path": "TestScript.setup.action.assert.response"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value of the HTTP response code to be tested.",
                "short": "HTTP response code to test",
                "min": 0,
                "comments": "To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it's expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.",
                "path": "TestScript.setup.action.assert.responseCode"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against.",
                "short": "Fixture Id of source expression or headerField",
                "min": 0,
                "comments": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
                "path": "TestScript.setup.action.assert.sourceId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The ID of the Profile to validate against.",
                "short": "Profile Id of validation profile reference",
                "min": 0,
                "comments": "The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.",
                "path": "TestScript.setup.action.assert.validateProfileId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value to compare to.",
                "short": "The value to compare to",
                "min": 0,
                "comments": "The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.",
                "path": "TestScript.setup.action.assert.value"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will produce a warning only on error for this assert.",
                "short": "Will this assert produce a warning only on error?",
                "min": 0,
                "comments": "If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn\u2019t do it, we could choose to issue a warning.",
                "path": "TestScript.setup.action.assert.warningOnly"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "A test in this script.",
                "short": "A test in this script",
                "min": 0,
                "path": "TestScript.test"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of this test used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging name of this test",
                "min": 0,
                "path": "TestScript.test.name"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A short description of the test used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting short description of the test",
                "min": 0,
                "path": "TestScript.test.description"
            },
            {
                "constraint": [
                    {
                        "human": "Test metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-7"
                    }
                ],
                "max": "1",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are expected to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.test.metadata",
                "nameReference": "metadata"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Test action SHALL contain either an operation or assert but not both.",
                        "severity": "error",
                        "xpath": "(f:operation or f:assert) and not(f:operation and f:assert)",
                        "key": "inv-2"
                    }
                ],
                "max": "*",
                "definition": "Action would contain either an operation or an assertion.",
                "short": "A test operation or assert to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.test.action"
            },
            {
                "constraint": [
                    {
                        "human": "Test operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or (f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-11"
                    }
                ],
                "max": "1",
                "definition": "An operation would involve a REST request to a server.",
                "short": "The setup operation to perform",
                "min": 0,
                "path": "TestScript.test.action.operation",
                "nameReference": "operation"
            },
            {
                "constraint": [
                    {
                        "human": "Test action assert shall contain both compareToSourceId and compareToSourcePath or neither.",
                        "severity": "error",
                        "xpath": "(f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)",
                        "key": "inv-14"
                    },
                    {
                        "human": "Only a single assertion SHALL be present within test action assert element.",
                        "severity": "error",
                        "xpath": "count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1",
                        "key": "inv-9"
                    }
                ],
                "max": "1",
                "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
                "short": "The setup assertion to perform",
                "min": 0,
                "comments": "In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
                "path": "TestScript.test.action.assert",
                "nameReference": "assert"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "1",
                "definition": "A series of operations required to clean up after the all the tests are executed (successfully or otherwise).",
                "short": "A series of required clean up steps",
                "min": 0,
                "path": "TestScript.teardown"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Teardown action SHALL contain an operation.",
                        "severity": "error",
                        "xpath": "f:operation",
                        "key": "inv-3"
                    }
                ],
                "max": "*",
                "definition": "The teardown action will only contain an operation.",
                "short": "One or more teardown operations to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.teardown.action"
            },
            {
                "constraint": [
                    {
                        "human": "Teardown operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or (f:targetId or f:url or (f:params and f:resource)) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-12"
                    }
                ],
                "max": "1",
                "definition": "An operation would involve a REST request to a server.",
                "short": "The teardown operation to perform",
                "min": 0,
                "path": "TestScript.teardown.action.operation",
                "nameReference": "operation"
            }
        ]
    },
    "name": "TestScript",
    "abstract": false,
    "status": "draft",
    "kind": "resource",
    "extension": [
        {
            "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm",
            "valueInteger": 0
        }
    ],
    "snapshot": {
        "element": [
            {
                "type": [
                    {
                        "code": "DomainResource"
                    }
                ],
                "max": "*",
                "definition": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
                "short": "Describes a set of tests",
                "min": 0,
                "mapping": [
                    {
                        "map": "conformance.misc",
                        "identity": "w5"
                    }
                ],
                "path": "TestScript"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
                "short": "Logical id of this artifact",
                "min": 0,
                "comments": "The only time that a resource does not have an id is when it is being submitted to the server using a create operation. Bundles always have an id, though it is usually a generated UUID.",
                "path": "TestScript.id",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "Meta"
                    }
                ],
                "max": "1",
                "definition": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.",
                "short": "Metadata about the resource",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.meta"
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "1",
                "definition": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content.",
                "isModifier": true,
                "short": "A set of rules under which this content was created",
                "min": 0,
                "comments": "Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element as much as possible.",
                "path": "TestScript.implicitRules",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The base language in which the resource is written.",
                "short": "Language of the resource content",
                "min": 0,
                "binding": {
                    "description": "A human language.",
                    "strength": "required",
                    "valueSetUri": "http://tools.ietf.org/html/bcp47"
                },
                "comments": "Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource  Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).",
                "path": "TestScript.language"
            },
            {
                "condition": [
                    "dom-1"
                ],
                "type": [
                    {
                        "code": "Narrative"
                    }
                ],
                "max": "1",
                "definition": "A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
                "short": "Text summary of the resource, for human interpretation",
                "min": 0,
                "alias": [
                    "narrative",
                    "html",
                    "xhtml",
                    "display"
                ],
                "comments": "Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative.",
                "path": "TestScript.text",
                "mapping": [
                    {
                        "map": "Act.text?",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Resource"
                    }
                ],
                "max": "*",
                "definition": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
                "short": "Contained, inline Resources",
                "min": 0,
                "alias": [
                    "inline resources",
                    "anonymous resources",
                    "contained resources"
                ],
                "comments": "This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again.",
                "path": "TestScript.contained",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.extension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "1",
                "definition": "An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.",
                "short": "Absolute URL used to reference this TestScript",
                "min": 1,
                "alias": [
                    "url",
                    "authoritative-url",
                    "destination",
                    "identity"
                ],
                "isSummary": true,
                "path": "TestScript.url",
                "mapping": [
                    {
                        "map": "id",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually.",
                "requirements": "There may be multiple resource versions of the TestScript that have this same identifier. The resource version id will change for technical reasons, whereas the stated version number needs to be under the author's control.",
                "short": "Logical id for this version of the TestScript",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.version",
                "mapping": [
                    {
                        "map": "id.version",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A free text natural language name identifying the TestScript.",
                "short": "Informal name for this TestScript",
                "min": 1,
                "comments": "Not expected to be globally unique.",
                "path": "TestScript.name",
                "isSummary": true
            },
            {
                "isModifier": true,
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The status of the TestScript.",
                "requirements": "Allows filtering of TestScripts that are appropriate for use vs. not.",
                "short": "draft | active | retired",
                "min": 1,
                "binding": {
                    "description": "The lifecycle status of a Value Set or Concept Map.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/conformance-resource-status"
                    },
                    "strength": "required"
                },
                "isSummary": true,
                "path": "TestScript.status",
                "mapping": [
                    {
                        "map": "status",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Identifier"
                    }
                ],
                "max": "1",
                "definition": "Identifier for the TestScript assigned for external purposes outside the context of FHIR.",
                "short": "External identifier",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.identifier",
                "mapping": [
                    {
                        "map": "id",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
                "requirements": "Allows filtering of TestScripts that are appropriate for use vs. not.",
                "short": "If for testing purposes, not real usage",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.experimental",
                "mapping": [
                    {
                        "map": "class",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of the individual or organization that published the Test Script.",
                "requirements": "Helps establish the \"authority/credibility\" of the Test Script.  May also allow for contact.",
                "mapping": [
                    {
                        "map": "who.witness",
                        "identity": "w5"
                    }
                ],
                "short": "Name of the publisher (Organization or individual)",
                "min": 0,
                "comments": "Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.",
                "path": "TestScript.publisher",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Contacts to assist a user in finding and communicating with the publisher.",
                "short": "Contact details of the publisher",
                "min": 0,
                "comments": "May be a web site, an email address, a telephone number (tel:), etc.",
                "path": "TestScript.contact",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.contact.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.contact.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.contact.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of an individual to contact regarding the Test Script.",
                "short": "Name of a individual to contact",
                "min": 0,
                "comments": "If there is no named individual, the telecom is for the organization as a whole.",
                "path": "TestScript.contact.name",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "ContactPoint"
                    }
                ],
                "max": "*",
                "definition": "Contact details for individual (if a name was provided) or the publisher.",
                "short": "Contact details for individual or publisher",
                "min": 0,
                "isSummary": true,
                "path": "TestScript.contact.telecom"
            },
            {
                "type": [
                    {
                        "code": "dateTime"
                    }
                ],
                "max": "1",
                "definition": "The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.",
                "mapping": [
                    {
                        "map": "when.recorded",
                        "identity": "w5"
                    }
                ],
                "short": "Date for this version of the TestScript",
                "min": 0,
                "comments": "Additional specific dates may be added as extensions.",
                "path": "TestScript.date",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A free text natural language description of the TestScript and its use.",
                "short": "Natural language description of the TestScript",
                "min": 0,
                "comments": "This field can be used for things such as why the TestScript was written, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc.  It is *not* a rendering of the TestScript as conveyed in TestScript.text. This item SHOULD be populated unless the information is available from context.",
                "path": "TestScript.description",
                "isSummary": true
            },
            {
                "type": [
                    {
                        "code": "CodeableConcept"
                    }
                ],
                "max": "*",
                "definition": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.",
                "requirements": "Assist in searching for appropriate content.",
                "short": "Content intends to support these contexts",
                "min": 0,
                "binding": {
                    "description": "Indicates the countries, regions, disciplines and other aspects of use within which this artifact is targeted for use.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/use-context"
                    },
                    "strength": "extensible"
                },
                "isSummary": true,
                "path": "TestScript.useContext"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Explains why this Test Script is needed and why it's been constrained as it has.",
                "short": "Scope and Usage this Test Script is for",
                "min": 0,
                "comments": "This element does not describe the usage of the Test Script (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.",
                "path": "TestScript.requirements",
                "mapping": [
                    {
                        "map": "why",
                        "identity": "w5"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
                "short": "Use and/or publishing restrictions",
                "min": 0,
                "alias": [
                    "License",
                    "Restrictions"
                ],
                "path": "TestScript.copyright"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "metadata",
                "max": "1",
                "definition": "The required capability must exist and are assumed to function correctly on the FHIR server being tested.",
                "constraint": [
                    {
                        "human": "TestScript metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-5"
                    }
                ],
                "short": "Required capability that is assumed to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.metadata"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.metadata.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "A link to the FHIR specification that this test is covering.",
                "short": "Links to the FHIR specification",
                "min": 0,
                "path": "TestScript.metadata.link"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.metadata.link.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.link.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.link.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "1",
                "definition": "URL to a particular requirement or feature within the FHIR specification.",
                "short": "URL to the specification",
                "min": 1,
                "path": "TestScript.metadata.link.url"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Short description of the link.",
                "short": "Short description",
                "min": 0,
                "path": "TestScript.metadata.link.description"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are assumed to function correctly on the FHIR server being tested",
                "min": 1,
                "comments": "When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  The do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.",
                "path": "TestScript.metadata.capability"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.metadata.capability.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.capability.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.metadata.capability.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.",
                "short": "Are the capabilities required?",
                "min": 0,
                "path": "TestScript.metadata.capability.required"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.",
                "short": "Are the capabilities validated?",
                "min": 0,
                "path": "TestScript.metadata.capability.validated"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Description of the capabilities that this test script is requiring the server to support.",
                "short": "The expected capabilities of the server",
                "min": 0,
                "path": "TestScript.metadata.capability.description"
            },
            {
                "type": [
                    {
                        "code": "integer"
                    }
                ],
                "max": "1",
                "definition": "Which server these requirements apply to.",
                "short": "Which server these requirements apply to",
                "min": 0,
                "path": "TestScript.metadata.capability.destination"
            },
            {
                "type": [
                    {
                        "code": "uri"
                    }
                ],
                "max": "*",
                "definition": "Links to the FHIR specification that describes this interaction and the resources involved in more detail.",
                "short": "Links to the FHIR specification",
                "min": 0,
                "path": "TestScript.metadata.capability.link"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Conformance"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "1",
                "definition": "Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.",
                "short": "Required Conformance",
                "min": 1,
                "comments": "The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.",
                "path": "TestScript.metadata.capability.conformance"
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "If the tests apply to more than one FHIR server (e.g. cross-server interoperability tests) then multiserver=true. Defaults to false if value is unspecified.",
                "short": "Whether or not the tests apply to more than one FHIR server",
                "min": 0,
                "path": "TestScript.multiserver"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.",
                "short": "Fixture in the test script - by reference (uri)",
                "min": 0,
                "path": "TestScript.fixture"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.fixture.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.fixture.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.fixture.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.",
                "short": "Whether or not to implicitly create the fixture during setup",
                "min": 0,
                "path": "TestScript.fixture.autocreate"
            },
            {
                "meaningWhenMissing": "False",
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.",
                "short": "Whether or not to implicitly delete the fixture during teardown",
                "min": 0,
                "path": "TestScript.fixture.autodelete"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Resource"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "1",
                "definition": "Reference to the resource (containing the contents of the resource needed for operations).",
                "short": "Reference of the resource",
                "min": 0,
                "comments": "See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.",
                "path": "TestScript.fixture.resource"
            },
            {
                "type": [
                    {
                        "profile": [
                            "http://hl7.org/fhir/StructureDefinition/Resource"
                        ],
                        "code": "Reference"
                    }
                ],
                "max": "*",
                "definition": "Reference to the profile to be used for validation.",
                "short": "Reference of the validation profile",
                "min": 0,
                "comments": "See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types.",
                "path": "TestScript.profile"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Variable cannot contain both headerField and path.",
                        "severity": "error",
                        "xpath": "not(f:headerField and f:path)",
                        "key": "inv-4"
                    }
                ],
                "max": "*",
                "definition": "Variable is set based either on element value in response body or on header field value in the response headers.",
                "short": "Placeholder for evaluated elements",
                "min": 0,
                "comments": "Variables would be set based either on XPath/JsonPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.",
                "path": "TestScript.variable"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.variable.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.variable.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.variable.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Descriptive name for this variable.",
                "short": "Descriptive name for this variable",
                "min": 1,
                "comments": "Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.",
                "path": "TestScript.variable.name"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
                "short": "HTTP header field name for source",
                "min": 0,
                "comments": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
                "path": "TestScript.variable.headerField"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.",
                "short": "XPath or JSONPath against the fixture body",
                "min": 0,
                "comments": "If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.",
                "path": "TestScript.variable.path"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.",
                "short": "Fixture Id of source expression or headerField within this variable",
                "min": 0,
                "comments": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
                "path": "TestScript.variable.sourceId"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "1",
                "definition": "A series of required setup operations before tests are executed.",
                "short": "A series of required setup operations before tests are executed",
                "min": 0,
                "path": "TestScript.setup"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.setup.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "constraint": [
                    {
                        "human": "Setup metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-6"
                    }
                ],
                "max": "1",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are assumed to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.setup.metadata",
                "nameReference": "metadata"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Setup action SHALL contain either an operation or assert but not both.",
                        "severity": "error",
                        "xpath": "(f:operation or f:assert) and not(f:operation and f:assert)",
                        "key": "inv-1"
                    }
                ],
                "max": "*",
                "definition": "Action would contain either an operation or an assertion.",
                "short": "A setup operation or assert to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.setup.action"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.setup.action.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "operation",
                "max": "1",
                "definition": "The operation to perform.",
                "constraint": [
                    {
                        "human": "Setup operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or ((f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1)) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-10"
                    }
                ],
                "short": "The setup operation to perform",
                "min": 0,
                "path": "TestScript.setup.action.operation"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.setup.action.operation.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.operation.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.operation.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Coding"
                    }
                ],
                "max": "1",
                "definition": "Server interaction or operation type.",
                "short": "The setup operation type that will be executed",
                "min": 0,
                "binding": {
                    "description": "The allowable operation types.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/testscript-operation-codes"
                    },
                    "strength": "extensible"
                },
                "comments": "See http://hl7-fhir.github.io/http.html for list of server interactions.",
                "path": "TestScript.setup.action.operation.type"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
                "short": "Resource type",
                "min": 0,
                "binding": {
                    "description": "Either a resource or a data type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/defined-types"
                    },
                    "strength": "required"
                },
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored. For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present. For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url. For \"vread\" and \"history\" operations, the versionId value will also be used.",
                "path": "TestScript.setup.action.operation.resource"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The label would be used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging operation label",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.operation.label"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The description would be used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting operation description",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.operation.description"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Accept' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall set the 'Accept' header to the corresponding value.    If 'xml' is specified, then 'Accept' header of 'application/xml+fhir' will be set.  If 'json' is specified, then 'application/json+fhir' will be used.    If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.",
                "path": "TestScript.setup.action.operation.accept"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.    If 'xml' is specified, then 'Content-Type' header of 'application/xml+fhir' will be set.    If 'json' is specified, then 'application/json+fhir' will be used.    If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.",
                "path": "TestScript.setup.action.operation.contentType"
            },
            {
                "type": [
                    {
                        "code": "integer"
                    }
                ],
                "max": "1",
                "definition": "Which server to perform the operation on.",
                "short": "Which server to perform the operation on",
                "min": 0,
                "defaultValueInteger": 0,
                "path": "TestScript.setup.action.operation.destination"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": true,
                "max": "1",
                "definition": "Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.",
                "short": "Whether or not to send the request url in encoded format",
                "min": 0,
                "path": "TestScript.setup.action.operation.encodeRequestUrl"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Path plus parameters after [type].  Used to set parts of the request URL explicitly.",
                "short": "Explicitly defined path parameters",
                "min": 0,
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.   Test engines would append whatever is specified for \"params\" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The \"params\" element does not correspond exactly to \"search parameters\".  Nor is it the \"path\".  It corresponds to the part of the URL that comes after the [type] (when \"resource\" element is specified); e.g. It corresponds to \"/[id]/_history/[vid] {?_format=[mime-type]}\" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.params"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "Header elements would be used to set HTTP headers.",
                "short": "Each operation can have one ore more header elements",
                "min": 0,
                "comments": "This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://hl7-fhir.github.io/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://hl7-fhir.github.io/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://hl7-fhir.github.io/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.",
                "path": "TestScript.setup.action.operation.requestHeader"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.setup.action.operation.requestHeader.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.operation.requestHeader.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.operation.requestHeader.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The HTTP header field e.g. \"Accept\".",
                "short": "HTTP header field name",
                "min": 1,
                "comments": "If header element is specified, then field is required.",
                "path": "TestScript.setup.action.operation.requestHeader.field"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value of the header e.g. \"application/xml\".",
                "short": "HTTP headerfield value",
                "min": 1,
                "comments": "If header element is specified, then value is required.  No conversions will be done by Test Engine e.g. \"xml\" to \"application/xml+fhir\".  The values will be set in HTTP headers \"as-is\".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.requestHeader.value"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The fixture id (maybe new) to map to the response.",
                "short": "Fixture Id of mapped response",
                "min": 0,
                "comments": "If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"responseId\".  If responseId is not specified, it is the Test Engine's responsibility to store the response and use it as sourceId in subsequent assertions when assertion path and/or headerField is specified and sourceId is not specified.",
                "path": "TestScript.setup.action.operation.responseId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The id of the fixture used as the body of a PUT or POST request.",
                "short": "Fixture Id of body for PUT and POST requests",
                "min": 0,
                "path": "TestScript.setup.action.operation.sourceId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.",
                "short": "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests",
                "min": 0,
                "comments": "If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.",
                "path": "TestScript.setup.action.operation.targetId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Complete request URL.",
                "short": "Request URL",
                "min": 0,
                "comments": "Used to set the request URL explicitly.  If \"url\" element is defined, then \"targetId\", \"resource\", and \"params\" elements will be ignored.  Test engines would use whatever is specified in \"url\" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.",
                "path": "TestScript.setup.action.operation.url"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "name": "assert",
                "max": "1",
                "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
                "constraint": [
                    {
                        "human": "Setup action assert shall contain both compareToSourceId and compareToSourcePath or neither.",
                        "severity": "error",
                        "xpath": "(f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)",
                        "key": "inv-13"
                    },
                    {
                        "human": "Only a single assertion SHALL be present within setup action assert element.",
                        "severity": "error",
                        "xpath": "count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1",
                        "key": "inv-8"
                    }
                ],
                "short": "The assertion to perform",
                "min": 0,
                "comments": "In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
                "path": "TestScript.setup.action.assert"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.setup.action.assert.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.assert.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.setup.action.assert.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The label would be used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging assertion label",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.assert.label"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The description would be used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting assertion description",
                "min": 0,
                "comments": "This has no impact on the verification itself.",
                "path": "TestScript.setup.action.assert.description"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The direction to use for the assertion.",
                "short": "response | request",
                "min": 0,
                "binding": {
                    "description": "The type of direction to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-direction-codes"
                    },
                    "strength": "required"
                },
                "path": "TestScript.setup.action.assert.direction"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "Id of fixture used to compare the \"sourceId/path\" evaluations to.",
                "short": "Id of fixture used to compare the \"sourceId/path\" evaluations to",
                "min": 0,
                "comments": "The id of the fixture used to make comparisons to.",
                "path": "TestScript.setup.action.assert.compareToSourceId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to.",
                "short": "XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to",
                "min": 0,
                "comments": "The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.",
                "path": "TestScript.setup.action.assert.compareToSourcePath"
            },
            {
                "meaningWhenMissing": "xml",
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The content-type or mime-type to use for RESTful operation in the 'Content-Type' header.",
                "short": "xml | json",
                "min": 0,
                "binding": {
                    "description": "The content or mime type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/content-type"
                    },
                    "strength": "required"
                },
                "comments": "If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).    If 'xml' is specified, then 'Content-Type' header of 'application/xml+fhir' will be confirmed. If 'json' is specified, then 'application/json+fhir' will be used. If you'd like to have more control over the string, then use 'assert.headerField' instead.",
                "path": "TestScript.setup.action.assert.contentType"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The HTTP header field name e.g. 'Location'.",
                "short": "HTTP header field name",
                "min": 0,
                "comments": "If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.",
                "path": "TestScript.setup.action.assert.headerField"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The ID of a fixture.  Asserts that the response contains at a minimumId the fixture specified by minimumId.",
                "short": "Fixture Id of minimum content resource",
                "min": 0,
                "comments": "Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.",
                "path": "TestScript.setup.action.assert.minimumId"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "max": "1",
                "definition": "Whether or not the test execution performs validation on the bundle navigation links.",
                "short": "Perform validation on navigation links?",
                "min": 0,
                "comments": "Asserts that the Bundle contains first, last, and next links.",
                "path": "TestScript.setup.action.assert.navigationLinks"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The operator type.",
                "short": "equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains",
                "min": 0,
                "binding": {
                    "description": "The type of operator to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-operator-codes"
                    },
                    "strength": "required"
                },
                "comments": "Operators come handy especially for negative testing.  If operator is not specified, then the \"equals\" operator is assumed; e.g. <code>   <assert>  <operator value=\"in\" />  <responseCode value=\"200,201,204\" />    </assert>    <assert>  <operator value=\"notEquals\" />  <response value=\"okay\"/>   </assert>    <assert>  <operator value=\"greaterThan\" />    <responseHeader>     <field value=\"Content-Length\" />     <value value=\"0\" />    <responseHeader>   </assert> </code>.",
                "path": "TestScript.setup.action.assert.operator"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
                "short": "XPath or JSONPath expression",
                "min": 0,
                "comments": "If both \"path\" and \"fixtureId\" are specified, then the path will be evaluated against the responseBody mapped to the fixtureId.  If \"path\" is specified and \"fixtureId\" is not, then the path will be evaluated against the responseBody of the last operation.  Test engines are to store the response body and headers of the last operation at all times for subsequent assertions.",
                "path": "TestScript.setup.action.assert.path"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
                "short": "Resource type",
                "min": 0,
                "binding": {
                    "description": "Either a resource or a data type.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/defined-types"
                    },
                    "strength": "required"
                },
                "comments": "This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://hl7-fhir.github.io/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value=\"Patient\" </assert>.",
                "path": "TestScript.setup.action.assert.resource"
            },
            {
                "type": [
                    {
                        "code": "code"
                    }
                ],
                "max": "1",
                "definition": "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.",
                "short": "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable",
                "min": 0,
                "binding": {
                    "description": "The type of response code to use for assertion.",
                    "valueSetReference": {
                        "reference": "http://hl7.org/fhir/ValueSet/assert-response-code-types"
                    },
                    "strength": "required"
                },
                "comments": "This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>.",
                "path": "TestScript.setup.action.assert.response"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value of the HTTP response code to be tested.",
                "short": "HTTP response code to test",
                "min": 0,
                "comments": "To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it's expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.",
                "path": "TestScript.setup.action.assert.responseCode"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against.",
                "short": "Fixture Id of source expression or headerField",
                "min": 0,
                "comments": "This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.",
                "path": "TestScript.setup.action.assert.sourceId"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "The ID of the Profile to validate against.",
                "short": "Profile Id of validation profile reference",
                "min": 0,
                "comments": "The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.",
                "path": "TestScript.setup.action.assert.validateProfileId"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The value to compare to.",
                "short": "The value to compare to",
                "min": 0,
                "comments": "The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.",
                "path": "TestScript.setup.action.assert.value"
            },
            {
                "type": [
                    {
                        "code": "boolean"
                    }
                ],
                "defaultValueBoolean": false,
                "max": "1",
                "definition": "Whether or not the test execution will produce a warning only on error for this assert.",
                "short": "Will this assert produce a warning only on error?",
                "min": 0,
                "comments": "If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn\u2019t do it, we could choose to issue a warning.",
                "path": "TestScript.setup.action.assert.warningOnly"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "*",
                "definition": "A test in this script.",
                "short": "A test in this script",
                "min": 0,
                "path": "TestScript.test"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.test.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.test.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.test.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "The name of this test used for tracking/logging purposes by test engines.",
                "short": "Tracking/logging name of this test",
                "min": 0,
                "path": "TestScript.test.name"
            },
            {
                "type": [
                    {
                        "code": "string"
                    }
                ],
                "max": "1",
                "definition": "A short description of the test used by test engines for tracking and reporting purposes.",
                "short": "Tracking/reporting short description of the test",
                "min": 0,
                "path": "TestScript.test.description"
            },
            {
                "constraint": [
                    {
                        "human": "Test metadata capability SHALL contain required or validated or both.",
                        "severity": "error",
                        "xpath": "f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)",
                        "key": "inv-7"
                    }
                ],
                "max": "1",
                "definition": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
                "short": "Capabilities  that are expected to function correctly on the FHIR server being tested",
                "min": 0,
                "path": "TestScript.test.metadata",
                "nameReference": "metadata"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Test action SHALL contain either an operation or assert but not both.",
                        "severity": "error",
                        "xpath": "(f:operation or f:assert) and not(f:operation and f:assert)",
                        "key": "inv-2"
                    }
                ],
                "max": "*",
                "definition": "Action would contain either an operation or an assertion.",
                "short": "A test operation or assert to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.test.action"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.test.action.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.test.action.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.test.action.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "constraint": [
                    {
                        "human": "Test operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or (f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-11"
                    }
                ],
                "max": "1",
                "definition": "An operation would involve a REST request to a server.",
                "short": "The setup operation to perform",
                "min": 0,
                "path": "TestScript.test.action.operation",
                "nameReference": "operation"
            },
            {
                "constraint": [
                    {
                        "human": "Test action assert shall contain both compareToSourceId and compareToSourcePath or neither.",
                        "severity": "error",
                        "xpath": "(f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourcePath)",
                        "key": "inv-14"
                    },
                    {
                        "human": "Only a single assertion SHALL be present within test action assert element.",
                        "severity": "error",
                        "xpath": "count(f:contentType) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:validateProfileId)  <=1",
                        "key": "inv-9"
                    }
                ],
                "max": "1",
                "definition": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
                "short": "The setup assertion to perform",
                "min": 0,
                "comments": "In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.",
                "path": "TestScript.test.action.assert",
                "nameReference": "assert"
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "max": "1",
                "definition": "A series of operations required to clean up after the all the tests are executed (successfully or otherwise).",
                "short": "A series of required clean up steps",
                "min": 0,
                "path": "TestScript.teardown"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.teardown.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.teardown.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.teardown.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "BackboneElement"
                    }
                ],
                "constraint": [
                    {
                        "human": "Teardown action SHALL contain an operation.",
                        "severity": "error",
                        "xpath": "f:operation",
                        "key": "inv-3"
                    }
                ],
                "max": "*",
                "definition": "The teardown action will only contain an operation.",
                "short": "One or more teardown operations to perform",
                "min": 1,
                "comments": "An action should contain either an operation or an assertion but not both.  It can contain any number of variables.",
                "path": "TestScript.teardown.action"
            },
            {
                "type": [
                    {
                        "code": "id"
                    }
                ],
                "max": "1",
                "definition": "unique id for the element within a resource (for internal references).",
                "representation": [
                    "xmlAttr"
                ],
                "short": "xml:id (or equivalent in JSON)",
                "min": 0,
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ],
                "path": "TestScript.teardown.action.id"
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "short": "Additional Content defined by implementations",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.teardown.action.extension",
                "mapping": [
                    {
                        "map": "n/a",
                        "identity": "rim"
                    }
                ]
            },
            {
                "type": [
                    {
                        "code": "Extension"
                    }
                ],
                "max": "*",
                "definition": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
                "isModifier": true,
                "short": "Extensions that cannot be ignored",
                "min": 0,
                "alias": [
                    "extensions",
                    "user content",
                    "modifiers"
                ],
                "comments": "There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.",
                "path": "TestScript.teardown.action.modifierExtension",
                "mapping": [
                    {
                        "map": "N/A",
                        "identity": "rim"
                    }
                ]
            },
            {
                "constraint": [
                    {
                        "human": "Teardown operation SHALL contain either sourceId or targetId or params or url.",
                        "severity": "error",
                        "xpath": "f:sourceId or (f:targetId or f:url or (f:params and f:resource)) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value='conformance' or f:type/f:code/@value='search' or f:type/f:code/@value='transaction' or f:type/f:code/@value='history')",
                        "key": "inv-12"
                    }
                ],
                "max": "1",
                "definition": "An operation would involve a REST request to a server.",
                "short": "The teardown operation to perform",
                "min": 0,
                "path": "TestScript.teardown.action.operation",
                "nameReference": "operation"
            }
        ]
    },
    "description": "Base StructureDefinition for TestScript Resource",
    "url": "http://hl7.org/fhir/StructureDefinition/TestScript",
    "fhirVersion": "1.0.2",
    "base": "http://hl7.org/fhir/StructureDefinition/DomainResource",
    "mapping": [
        {
            "uri": "http://hl7.org/fhir/w5",
            "identity": "w5",
            "name": "W5 Mapping"
        },
        {
            "uri": "http://hl7.org/v3",
            "identity": "rim",
            "name": "RIM"
        }
    ],
    "resourceType": "StructureDefinition",
    "meta": {
        "lastUpdated": "2015-10-24T07:41:03.495+11:00"
    },
    "contact": [
        {
            "telecom": [
                {
                    "value": "http://hl7.org/fhir",
                    "system": "other"
                }
            ]
        },
        {
            "telecom": [
                {
                    "value": "http://www.hl7.org/Special/committees/fiwg/index.cfm",
                    "system": "other"
                }
            ]
        }
    ],
    "publisher": "Health Level Seven International (FHIR Infrastructure)"
}