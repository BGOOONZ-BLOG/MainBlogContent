# parses valid SHACL constructs from an RDF graph
# for transformation to SHACL abstract syntax.
#

PREFIX sh:<http://www.w3.org/ns/shacl#>
PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?entry ?isShape ?choice ?group
(IF(Bound(?property),                      # compile TripleConstraint
    CONCAT("ShapeExpr(TripleConstraint(",
      "IRI(", STR(?predicate), "), ",
      IF(Bound(?valueType),      CONCAT("ValueType(IRI(",STR(?valueType),"))"),   # valueType
        IF(Bound(?nodeKind),     CONCAT("NodeKind(IRI(",STR(?nodeKind),"))"),     # nodeKind
          IF(Bound(?shapeLabel), CONCAT("ShapeLabel(IRI(",STR(?shapeLabel),"))"), # valueShape
                                 CONCAT("ValueSet(",GROUP_CONCAT(CONCAT(          # allowedValue
                                     IF(IsLiteral(?allowedValue), "Literal", "IRI"), # IRIs and Literals
                                           "(", STR(?allowedValue), ")")
                                   ),")")
      ))),
     "))[",if(Bound(?min1), STR(?min1), "1"),",",if(Bound(?max1), STR(?max1), "INF"),"]"), # cardinality
    "") AS ?TripleConstraint)
where { 
  {
    ?entry sh:property ?property .
    ?property sh:predicate ?predicate ;
    OPTIONAL { ?property sh:minCount ?min1 }
    OPTIONAL { ?property sh:maxCount ?max1 }
    OPTIONAL { ?property sh:valueType ?valueType }
    OPTIONAL { ?property sh:nodeKind ?nodeKind }
    OPTIONAL { ?property sh:valueShape ?shapeLabel }
    OPTIONAL { ?property sh:allowedValue ?allowedValue
               FILTER (IsIRI(?allowedValue) || IsLiteral(?allowedValue)) }
  } UNION {
    ?entry sh:choice ?choice
  } UNION {
    ?entry sh:propertyGroup ?group
  }
  OPTIONAL { ?entry a sh:Shape
    BIND(true AS ?isShape)
  }
} GROUP BY ?entry ?isShape ?property ?predicate ?choice ?group
           ?min1 ?max1 ?valueType ?nodeKind ?shapeLabel
