#!/usr/bin/env python

# -*- coding: utf-8 -*-
# Copyright (c) 2015, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys

from dirlistproc import DirectoryListProcessor

if __name__ == "__main__":
    sys.path.append(os.path.join(os.path.join(os.getcwd(), os.path.dirname(__file__)), '..'))

from hcls_fhir_rdf.defaults import *
from hcls_fhir_rdf.fhir_elements import PathElements

elements = None

DEFAULT_LOG_FILE = os.path.basename(__file__) + ".log"


def addargs(args: argparse.ArgumentParser) -> None:
    """ Add local args to the dirlistproc set
    :param args: dirlistproc arguments
    """
    add_default_args(args, __file__)
    args.add_argument("--differential", help="Generate differential instead of snapshot", action="store_true")
    args.add_argument("--genx", help="Add genx output to ShExC", action="store_true")


def procargs(opts: argparse.Namespace) -> None:
    """ Evaluate the return arguments
    :param opts: argument parser output
    """
    if not opts.indir:
        opts.indir = DEFAULT_TARGET_DIRECTORY
    if not opts.outdir:
        opts.outdir = DEFAULT_TARGET_DIRECTORY
    if not opts.outfile:
        opts.outfile = [DEFAULT_SHEX_DEFINITIONS]
        opts.onebigfile = os.path.join(opts.outdir, DEFAULT_SHEX_DEFINITIONS)
    else:
        opts._onebigfile = None

    os.makedirs(opts.outdir, exist_ok=True)
    start_logger(opts)


def proc_profiles(input_fn: str, output_fn: str, opts: argparse.Namespace) -> bool:
    """ Process a FHIR profile file (json format)
    :param input_fn: name of the file to process
    :param output_fn: name of the output file
    :param opts: process options
    :return: True if file was processed, false if it was skipped
    """
    global elements
    log_info("Processing", input_fn)
    if not elements:
        elements = PathElements()
    success = elements.proc_file(input_fn, opts.differential)
    if success and not opts.onebigfile:
        print(elements.as_shexc, file=open(opts.outfile, 'w') if output_fn else sys.stdout)
        elements = None
    return success


def main():
    dlp = DirectoryListProcessor(None, "Generate ShExC definitions for FHIR", ".profile.json", None, addargs, procargs)

    nfiles, nsuccess = dlp.run(proc_profiles, PathElements.inp_filtr)
    if dlp.opts.onebigfile:
        print(elements.as_shexc, file=open(dlp.opts.onebigfile, 'w') if dlp.opts.outfile else sys.stdout)
    logging.info("Total files processed=%d Errors=%d" % (nfiles, nfiles - nsuccess))


if __name__ == '__main__':
    main()
